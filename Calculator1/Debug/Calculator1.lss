
Calculator1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000028ba  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002e  00800060  000028ba  0000292e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001d28  00000000  00000000  0000295c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000e4b  00000000  00000000  00004684  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  000054cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  0000560f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  0000577f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  000073c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  000082b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00009060  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  000091c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  0000944d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00009c1b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea eb       	ldi	r30, 0xBA	; 186
      68:	f8 e2       	ldi	r31, 0x28	; 40
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 38       	cpi	r26, 0x8E	; 142
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 9b 05 	call	0xb36	; 0xb36 <main>
      7a:	0c 94 5b 14 	jmp	0x28b6	; 0x28b6 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 24 14 	jmp	0x2848	; 0x2848 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a6 e7       	ldi	r26, 0x76	; 118
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 40 14 	jmp	0x2880	; 0x2880 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 30 14 	jmp	0x2860	; 0x2860 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 4c 14 	jmp	0x2898	; 0x2898 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 30 14 	jmp	0x2860	; 0x2860 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 4c 14 	jmp	0x2898	; 0x2898 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 24 14 	jmp	0x2848	; 0x2848 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	86 e7       	ldi	r24, 0x76	; 118
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 40 14 	jmp	0x2880	; 0x2880 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 30 14 	jmp	0x2860	; 0x2860 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 4c 14 	jmp	0x2898	; 0x2898 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 30 14 	jmp	0x2860	; 0x2860 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 4c 14 	jmp	0x2898	; 0x2898 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 30 14 	jmp	0x2860	; 0x2860 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 4c 14 	jmp	0x2898	; 0x2898 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 34 14 	jmp	0x2868	; 0x2868 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 50 14 	jmp	0x28a0	; 0x28a0 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <main>:
#include "LCD_Interface.h"
#include "Keypad_Interface.h"
#include "App_FunctionsandDefine.h"

int main (void)
{
     b36:	0f 93       	push	r16
     b38:	1f 93       	push	r17
     b3a:	df 93       	push	r29
     b3c:	cf 93       	push	r28
     b3e:	cd b7       	in	r28, 0x3d	; 61
     b40:	de b7       	in	r29, 0x3e	; 62
     b42:	e9 97       	sbiw	r28, 0x39	; 57
     b44:	0f b6       	in	r0, 0x3f	; 63
     b46:	f8 94       	cli
     b48:	de bf       	out	0x3e, r29	; 62
     b4a:	0f be       	out	0x3f, r0	; 63
     b4c:	cd bf       	out	0x3d, r28	; 61
	u8 LOC_u8PressedValue = 'F';
     b4e:	86 e4       	ldi	r24, 0x46	; 70
     b50:	89 83       	std	Y+1, r24	; 0x01
	DIO_vdSetPortDirection(LCD_U8_DATA_PORT,PORT_OUTPUT);
     b52:	80 e0       	ldi	r24, 0x00	; 0
     b54:	6f ef       	ldi	r22, 0xFF	; 255
     b56:	0e 94 b9 08 	call	0x1172	; 0x1172 <DIO_vdSetPortDirection>
	DIO_vdSetPortDirection(LCD_U8_CTRL_PORT,PORT_OUTPUT);
     b5a:	83 e0       	ldi	r24, 0x03	; 3
     b5c:	6f ef       	ldi	r22, 0xFF	; 255
     b5e:	0e 94 b9 08 	call	0x1172	; 0x1172 <DIO_vdSetPortDirection>
	s32 App_u8FirstOperand=0, App_u8SecondOperand=0;
     b62:	1a 82       	std	Y+2, r1	; 0x02
     b64:	1b 82       	std	Y+3, r1	; 0x03
     b66:	1c 82       	std	Y+4, r1	; 0x04
     b68:	1d 82       	std	Y+5, r1	; 0x05
     b6a:	1e 82       	std	Y+6, r1	; 0x06
     b6c:	1f 82       	std	Y+7, r1	; 0x07
     b6e:	18 86       	std	Y+8, r1	; 0x08
     b70:	19 86       	std	Y+9, r1	; 0x09
	u8 App_u8OperandSendingTimes=0;
     b72:	1a 86       	std	Y+10, r1	; 0x0a
	u8 App_u8Operator ='F', App_u8OperatorSendingTimes=0;
     b74:	86 e4       	ldi	r24, 0x46	; 70
     b76:	8b 87       	std	Y+11, r24	; 0x0b
     b78:	1c 86       	std	Y+12, r1	; 0x0c
	s32 App_u2ResultOperation=0;
     b7a:	1d 86       	std	Y+13, r1	; 0x0d
     b7c:	1e 86       	std	Y+14, r1	; 0x0e
     b7e:	1f 86       	std	Y+15, r1	; 0x0f
     b80:	18 8a       	std	Y+16, r1	; 0x10
	s32 App_s8OperatorAssign1=1, App_s8OperatorAssign2=1;
     b82:	81 e0       	ldi	r24, 0x01	; 1
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	a0 e0       	ldi	r26, 0x00	; 0
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	89 8b       	std	Y+17, r24	; 0x11
     b8c:	9a 8b       	std	Y+18, r25	; 0x12
     b8e:	ab 8b       	std	Y+19, r26	; 0x13
     b90:	bc 8b       	std	Y+20, r27	; 0x14
     b92:	81 e0       	ldi	r24, 0x01	; 1
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	a0 e0       	ldi	r26, 0x00	; 0
     b98:	b0 e0       	ldi	r27, 0x00	; 0
     b9a:	8d 8b       	std	Y+21, r24	; 0x15
     b9c:	9e 8b       	std	Y+22, r25	; 0x16
     b9e:	af 8b       	std	Y+23, r26	; 0x17
     ba0:	b8 8f       	std	Y+24, r27	; 0x18
	u8 alarm=0;
     ba2:	19 8e       	std	Y+25, r1	; 0x19
	u8 stringWarning []="Wrong Input";
     ba4:	ce 01       	movw	r24, r28
     ba6:	4a 96       	adiw	r24, 0x1a	; 26
     ba8:	99 ab       	std	Y+49, r25	; 0x31
     baa:	88 ab       	std	Y+48, r24	; 0x30
     bac:	e0 e6       	ldi	r30, 0x60	; 96
     bae:	f0 e0       	ldi	r31, 0x00	; 0
     bb0:	fb ab       	std	Y+51, r31	; 0x33
     bb2:	ea ab       	std	Y+50, r30	; 0x32
     bb4:	fc e0       	ldi	r31, 0x0C	; 12
     bb6:	fc ab       	std	Y+52, r31	; 0x34
     bb8:	ea a9       	ldd	r30, Y+50	; 0x32
     bba:	fb a9       	ldd	r31, Y+51	; 0x33
     bbc:	00 80       	ld	r0, Z
     bbe:	8a a9       	ldd	r24, Y+50	; 0x32
     bc0:	9b a9       	ldd	r25, Y+51	; 0x33
     bc2:	01 96       	adiw	r24, 0x01	; 1
     bc4:	9b ab       	std	Y+51, r25	; 0x33
     bc6:	8a ab       	std	Y+50, r24	; 0x32
     bc8:	e8 a9       	ldd	r30, Y+48	; 0x30
     bca:	f9 a9       	ldd	r31, Y+49	; 0x31
     bcc:	00 82       	st	Z, r0
     bce:	88 a9       	ldd	r24, Y+48	; 0x30
     bd0:	99 a9       	ldd	r25, Y+49	; 0x31
     bd2:	01 96       	adiw	r24, 0x01	; 1
     bd4:	99 ab       	std	Y+49, r25	; 0x31
     bd6:	88 ab       	std	Y+48, r24	; 0x30
     bd8:	9c a9       	ldd	r25, Y+52	; 0x34
     bda:	91 50       	subi	r25, 0x01	; 1
     bdc:	9c ab       	std	Y+52, r25	; 0x34
     bde:	ec a9       	ldd	r30, Y+52	; 0x34
     be0:	ee 23       	and	r30, r30
     be2:	51 f7       	brne	.-44     	; 0xbb8 <main+0x82>
	u8 stringUndefined[]="Undefined";
     be4:	ce 01       	movw	r24, r28
     be6:	86 96       	adiw	r24, 0x26	; 38
     be8:	9e ab       	std	Y+54, r25	; 0x36
     bea:	8d ab       	std	Y+53, r24	; 0x35
     bec:	ec e6       	ldi	r30, 0x6C	; 108
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	f8 af       	std	Y+56, r31	; 0x38
     bf2:	ef ab       	std	Y+55, r30	; 0x37
     bf4:	fa e0       	ldi	r31, 0x0A	; 10
     bf6:	f9 af       	std	Y+57, r31	; 0x39
     bf8:	ef a9       	ldd	r30, Y+55	; 0x37
     bfa:	f8 ad       	ldd	r31, Y+56	; 0x38
     bfc:	00 80       	ld	r0, Z
     bfe:	8f a9       	ldd	r24, Y+55	; 0x37
     c00:	98 ad       	ldd	r25, Y+56	; 0x38
     c02:	01 96       	adiw	r24, 0x01	; 1
     c04:	98 af       	std	Y+56, r25	; 0x38
     c06:	8f ab       	std	Y+55, r24	; 0x37
     c08:	ed a9       	ldd	r30, Y+53	; 0x35
     c0a:	fe a9       	ldd	r31, Y+54	; 0x36
     c0c:	00 82       	st	Z, r0
     c0e:	8d a9       	ldd	r24, Y+53	; 0x35
     c10:	9e a9       	ldd	r25, Y+54	; 0x36
     c12:	01 96       	adiw	r24, 0x01	; 1
     c14:	9e ab       	std	Y+54, r25	; 0x36
     c16:	8d ab       	std	Y+53, r24	; 0x35
     c18:	99 ad       	ldd	r25, Y+57	; 0x39
     c1a:	91 50       	subi	r25, 0x01	; 1
     c1c:	99 af       	std	Y+57, r25	; 0x39
     c1e:	e9 ad       	ldd	r30, Y+57	; 0x39
     c20:	ee 23       	and	r30, r30
     c22:	51 f7       	brne	.-44     	; 0xbf8 <main+0xc2>
	Keypad_vdInitialization();
     c24:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <Keypad_vdInitialization>
	LCD_vdInitialization();
     c28:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <LCD_vdInitialization>

	while(1)
	{
		Keypad_vdGetPressedKey(&LOC_u8PressedValue);
     c2c:	ce 01       	movw	r24, r28
     c2e:	01 96       	adiw	r24, 0x01	; 1
     c30:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <Keypad_vdGetPressedKey>
		if(LOC_u8PressedValue != 'F')
     c34:	89 81       	ldd	r24, Y+1	; 0x01
     c36:	86 34       	cpi	r24, 0x46	; 70
     c38:	c9 f3       	breq	.-14     	; 0xc2c <main+0xf6>
		{
			LCD_vdSendChar(LOC_u8PressedValue);
     c3a:	89 81       	ldd	r24, Y+1	; 0x01
     c3c:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <LCD_vdSendChar>
			//If It was an operator...
			if((LOC_u8PressedValue >= 0x2A && LOC_u8PressedValue <=0x2F) || (LOC_u8PressedValue ==0x25 ))
     c40:	89 81       	ldd	r24, Y+1	; 0x01
     c42:	8a 32       	cpi	r24, 0x2A	; 42
     c44:	18 f0       	brcs	.+6      	; 0xc4c <main+0x116>
     c46:	89 81       	ldd	r24, Y+1	; 0x01
     c48:	80 33       	cpi	r24, 0x30	; 48
     c4a:	18 f0       	brcs	.+6      	; 0xc52 <main+0x11c>
     c4c:	89 81       	ldd	r24, Y+1	; 0x01
     c4e:	85 32       	cpi	r24, 0x25	; 37
     c50:	f9 f4       	brne	.+62     	; 0xc90 <main+0x15a>
			{
				App_u8OperatorSendingTimes++;
     c52:	8c 85       	ldd	r24, Y+12	; 0x0c
     c54:	8f 5f       	subi	r24, 0xFF	; 255
     c56:	8c 87       	std	Y+12, r24	; 0x0c
				if(App_u8OperandSendingTimes==0 || App_u8OperandSendingTimes>App_u8OperatorSendingTimes)
     c58:	8a 85       	ldd	r24, Y+10	; 0x0a
     c5a:	88 23       	and	r24, r24
     c5c:	21 f0       	breq	.+8      	; 0xc66 <main+0x130>
     c5e:	9a 85       	ldd	r25, Y+10	; 0x0a
     c60:	8c 85       	ldd	r24, Y+12	; 0x0c
     c62:	89 17       	cp	r24, r25
     c64:	90 f4       	brcc	.+36     	; 0xc8a <main+0x154>
				{
					App_vdOparatorCheck(&LOC_u8PressedValue, &App_s8OperatorAssign1, &App_s8OperatorAssign2, &App_u8OperandSendingTimes, &App_u8OperatorSendingTimes);
     c66:	9e 01       	movw	r18, r28
     c68:	2f 5e       	subi	r18, 0xEF	; 239
     c6a:	3f 4f       	sbci	r19, 0xFF	; 255
     c6c:	ae 01       	movw	r20, r28
     c6e:	4b 5e       	subi	r20, 0xEB	; 235
     c70:	5f 4f       	sbci	r21, 0xFF	; 255
     c72:	fe 01       	movw	r30, r28
     c74:	3a 96       	adiw	r30, 0x0a	; 10
     c76:	de 01       	movw	r26, r28
     c78:	1c 96       	adiw	r26, 0x0c	; 12
     c7a:	ce 01       	movw	r24, r28
     c7c:	01 96       	adiw	r24, 0x01	; 1
     c7e:	b9 01       	movw	r22, r18
     c80:	9f 01       	movw	r18, r30
     c82:	8d 01       	movw	r16, r26
     c84:	0e 94 08 07 	call	0xe10	; 0xe10 <App_vdOparatorCheck>
     c88:	c0 c0       	rjmp	.+384    	; 0xe0a <main+0x2d4>
				}
				else
				{
					App_u8Operator= LOC_u8PressedValue;
     c8a:	89 81       	ldd	r24, Y+1	; 0x01
     c8c:	8b 87       	std	Y+11, r24	; 0x0b
     c8e:	bd c0       	rjmp	.+378    	; 0xe0a <main+0x2d4>
				}
			}
			//Assign operator --> Break
			else if(LOC_u8PressedValue== '=')
     c90:	89 81       	ldd	r24, Y+1	; 0x01
     c92:	8d 33       	cpi	r24, 0x3D	; 61
     c94:	09 f0       	breq	.+2      	; 0xc98 <main+0x162>
     c96:	76 c0       	rjmp	.+236    	; 0xd84 <main+0x24e>
			{
				App_u8FirstOperand= App_u8FirstOperand*App_s8OperatorAssign1;
     c98:	8a 81       	ldd	r24, Y+2	; 0x02
     c9a:	9b 81       	ldd	r25, Y+3	; 0x03
     c9c:	ac 81       	ldd	r26, Y+4	; 0x04
     c9e:	bd 81       	ldd	r27, Y+5	; 0x05
     ca0:	29 89       	ldd	r18, Y+17	; 0x11
     ca2:	3a 89       	ldd	r19, Y+18	; 0x12
     ca4:	4b 89       	ldd	r20, Y+19	; 0x13
     ca6:	5c 89       	ldd	r21, Y+20	; 0x14
     ca8:	bc 01       	movw	r22, r24
     caa:	cd 01       	movw	r24, r26
     cac:	0e 94 c8 13 	call	0x2790	; 0x2790 <__mulsi3>
     cb0:	dc 01       	movw	r26, r24
     cb2:	cb 01       	movw	r24, r22
     cb4:	8a 83       	std	Y+2, r24	; 0x02
     cb6:	9b 83       	std	Y+3, r25	; 0x03
     cb8:	ac 83       	std	Y+4, r26	; 0x04
     cba:	bd 83       	std	Y+5, r27	; 0x05
				App_u8SecondOperand=App_u8SecondOperand*App_s8OperatorAssign2;
     cbc:	8e 81       	ldd	r24, Y+6	; 0x06
     cbe:	9f 81       	ldd	r25, Y+7	; 0x07
     cc0:	a8 85       	ldd	r26, Y+8	; 0x08
     cc2:	b9 85       	ldd	r27, Y+9	; 0x09
     cc4:	2d 89       	ldd	r18, Y+21	; 0x15
     cc6:	3e 89       	ldd	r19, Y+22	; 0x16
     cc8:	4f 89       	ldd	r20, Y+23	; 0x17
     cca:	58 8d       	ldd	r21, Y+24	; 0x18
     ccc:	bc 01       	movw	r22, r24
     cce:	cd 01       	movw	r24, r26
     cd0:	0e 94 c8 13 	call	0x2790	; 0x2790 <__mulsi3>
     cd4:	dc 01       	movw	r26, r24
     cd6:	cb 01       	movw	r24, r22
     cd8:	8e 83       	std	Y+6, r24	; 0x06
     cda:	9f 83       	std	Y+7, r25	; 0x07
     cdc:	a8 87       	std	Y+8, r26	; 0x08
     cde:	b9 87       	std	Y+9, r27	; 0x09
				if(App_u8OperatorSendingTimes==0 && App_u8OperandSendingTimes>=1)
     ce0:	8c 85       	ldd	r24, Y+12	; 0x0c
     ce2:	88 23       	and	r24, r24
     ce4:	61 f4       	brne	.+24     	; 0xcfe <main+0x1c8>
     ce6:	8a 85       	ldd	r24, Y+10	; 0x0a
     ce8:	88 23       	and	r24, r24
     cea:	49 f0       	breq	.+18     	; 0xcfe <main+0x1c8>
				{
					LCD_vdWriteNum(App_u8FirstOperand);
     cec:	8a 81       	ldd	r24, Y+2	; 0x02
     cee:	9b 81       	ldd	r25, Y+3	; 0x03
     cf0:	ac 81       	ldd	r26, Y+4	; 0x04
     cf2:	bd 81       	ldd	r27, Y+5	; 0x05
     cf4:	bc 01       	movw	r22, r24
     cf6:	cd 01       	movw	r24, r26
     cf8:	0e 94 f6 12 	call	0x25ec	; 0x25ec <LCD_vdWriteNum>
     cfc:	36 c0       	rjmp	.+108    	; 0xd6a <main+0x234>
				}
				else
				{
					if(App_s8OperatorAssign1==0 || App_s8OperatorAssign2==0)
     cfe:	89 89       	ldd	r24, Y+17	; 0x11
     d00:	9a 89       	ldd	r25, Y+18	; 0x12
     d02:	ab 89       	ldd	r26, Y+19	; 0x13
     d04:	bc 89       	ldd	r27, Y+20	; 0x14
     d06:	00 97       	sbiw	r24, 0x00	; 0
     d08:	a1 05       	cpc	r26, r1
     d0a:	b1 05       	cpc	r27, r1
     d0c:	41 f0       	breq	.+16     	; 0xd1e <main+0x1e8>
     d0e:	8d 89       	ldd	r24, Y+21	; 0x15
     d10:	9e 89       	ldd	r25, Y+22	; 0x16
     d12:	af 89       	ldd	r26, Y+23	; 0x17
     d14:	b8 8d       	ldd	r27, Y+24	; 0x18
     d16:	00 97       	sbiw	r24, 0x00	; 0
     d18:	a1 05       	cpc	r26, r1
     d1a:	b1 05       	cpc	r27, r1
     d1c:	29 f4       	brne	.+10     	; 0xd28 <main+0x1f2>
					{
						 LCD_vdWriteString(stringWarning);
     d1e:	ce 01       	movw	r24, r28
     d20:	4a 96       	adiw	r24, 0x1a	; 26
     d22:	0e 94 5e 12 	call	0x24bc	; 0x24bc <LCD_vdWriteString>
     d26:	21 c0       	rjmp	.+66     	; 0xd6a <main+0x234>
					}
					else if(alarm ==1)
     d28:	89 8d       	ldd	r24, Y+25	; 0x19
     d2a:	81 30       	cpi	r24, 0x01	; 1
     d2c:	29 f4       	brne	.+10     	; 0xd38 <main+0x202>
					{
						 LCD_vdWriteString(stringUndefined);
     d2e:	ce 01       	movw	r24, r28
     d30:	86 96       	adiw	r24, 0x26	; 38
     d32:	0e 94 5e 12 	call	0x24bc	; 0x24bc <LCD_vdWriteString>
     d36:	19 c0       	rjmp	.+50     	; 0xd6a <main+0x234>
					}
					else
					{
						App_s32OperationChosen(&App_u8FirstOperand,&App_u8SecondOperand, &App_u8Operator, &App_u2ResultOperation, &alarm );
     d38:	ce 01       	movw	r24, r28
     d3a:	02 96       	adiw	r24, 0x02	; 2
     d3c:	9e 01       	movw	r18, r28
     d3e:	2a 5f       	subi	r18, 0xFA	; 250
     d40:	3f 4f       	sbci	r19, 0xFF	; 255
     d42:	ae 01       	movw	r20, r28
     d44:	45 5f       	subi	r20, 0xF5	; 245
     d46:	5f 4f       	sbci	r21, 0xFF	; 255
     d48:	fe 01       	movw	r30, r28
     d4a:	3d 96       	adiw	r30, 0x0d	; 13
     d4c:	de 01       	movw	r26, r28
     d4e:	59 96       	adiw	r26, 0x19	; 25
     d50:	b9 01       	movw	r22, r18
     d52:	9f 01       	movw	r18, r30
     d54:	8d 01       	movw	r16, r26
     d56:	0e 94 df 07 	call	0xfbe	; 0xfbe <App_s32OperationChosen>
						LCD_vdWriteNum(App_u2ResultOperation);
     d5a:	8d 85       	ldd	r24, Y+13	; 0x0d
     d5c:	9e 85       	ldd	r25, Y+14	; 0x0e
     d5e:	af 85       	ldd	r26, Y+15	; 0x0f
     d60:	b8 89       	ldd	r27, Y+16	; 0x10
     d62:	bc 01       	movw	r22, r24
     d64:	cd 01       	movw	r24, r26
     d66:	0e 94 f6 12 	call	0x25ec	; 0x25ec <LCD_vdWriteNum>
				}
			}
			LOC_u8PressedValue = 'F';
		}
	}
	return 0;
     d6a:	80 e0       	ldi	r24, 0x00	; 0
     d6c:	90 e0       	ldi	r25, 0x00	; 0

}
     d6e:	e9 96       	adiw	r28, 0x39	; 57
     d70:	0f b6       	in	r0, 0x3f	; 63
     d72:	f8 94       	cli
     d74:	de bf       	out	0x3e, r29	; 62
     d76:	0f be       	out	0x3f, r0	; 63
     d78:	cd bf       	out	0x3d, r28	; 61
     d7a:	cf 91       	pop	r28
     d7c:	df 91       	pop	r29
     d7e:	1f 91       	pop	r17
     d80:	0f 91       	pop	r16
     d82:	08 95       	ret
				break;
			}
			//Operand
			else
			{
				App_u8OperandSendingTimes++;
     d84:	8a 85       	ldd	r24, Y+10	; 0x0a
     d86:	8f 5f       	subi	r24, 0xFF	; 255
     d88:	8a 87       	std	Y+10, r24	; 0x0a
				if(App_u8OperatorSendingTimes==0)
     d8a:	8c 85       	ldd	r24, Y+12	; 0x0c
     d8c:	88 23       	and	r24, r24
     d8e:	f9 f4       	brne	.+62     	; 0xdce <main+0x298>
				{
					LOC_u8PressedValue-=48;
     d90:	89 81       	ldd	r24, Y+1	; 0x01
     d92:	80 53       	subi	r24, 0x30	; 48
     d94:	89 83       	std	Y+1, r24	; 0x01
					App_u8FirstOperand = App_u8FirstOperand*10 + (LOC_u8PressedValue);
     d96:	8a 81       	ldd	r24, Y+2	; 0x02
     d98:	9b 81       	ldd	r25, Y+3	; 0x03
     d9a:	ac 81       	ldd	r26, Y+4	; 0x04
     d9c:	bd 81       	ldd	r27, Y+5	; 0x05
     d9e:	2a e0       	ldi	r18, 0x0A	; 10
     da0:	30 e0       	ldi	r19, 0x00	; 0
     da2:	40 e0       	ldi	r20, 0x00	; 0
     da4:	50 e0       	ldi	r21, 0x00	; 0
     da6:	bc 01       	movw	r22, r24
     da8:	cd 01       	movw	r24, r26
     daa:	0e 94 c8 13 	call	0x2790	; 0x2790 <__mulsi3>
     dae:	9b 01       	movw	r18, r22
     db0:	ac 01       	movw	r20, r24
     db2:	89 81       	ldd	r24, Y+1	; 0x01
     db4:	88 2f       	mov	r24, r24
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	a0 e0       	ldi	r26, 0x00	; 0
     dba:	b0 e0       	ldi	r27, 0x00	; 0
     dbc:	82 0f       	add	r24, r18
     dbe:	93 1f       	adc	r25, r19
     dc0:	a4 1f       	adc	r26, r20
     dc2:	b5 1f       	adc	r27, r21
     dc4:	8a 83       	std	Y+2, r24	; 0x02
     dc6:	9b 83       	std	Y+3, r25	; 0x03
     dc8:	ac 83       	std	Y+4, r26	; 0x04
     dca:	bd 83       	std	Y+5, r27	; 0x05
     dcc:	1e c0       	rjmp	.+60     	; 0xe0a <main+0x2d4>

				}
				else
				{
					LOC_u8PressedValue-=48;
     dce:	89 81       	ldd	r24, Y+1	; 0x01
     dd0:	80 53       	subi	r24, 0x30	; 48
     dd2:	89 83       	std	Y+1, r24	; 0x01
					App_u8SecondOperand = App_u8SecondOperand*10 + LOC_u8PressedValue;
     dd4:	8e 81       	ldd	r24, Y+6	; 0x06
     dd6:	9f 81       	ldd	r25, Y+7	; 0x07
     dd8:	a8 85       	ldd	r26, Y+8	; 0x08
     dda:	b9 85       	ldd	r27, Y+9	; 0x09
     ddc:	2a e0       	ldi	r18, 0x0A	; 10
     dde:	30 e0       	ldi	r19, 0x00	; 0
     de0:	40 e0       	ldi	r20, 0x00	; 0
     de2:	50 e0       	ldi	r21, 0x00	; 0
     de4:	bc 01       	movw	r22, r24
     de6:	cd 01       	movw	r24, r26
     de8:	0e 94 c8 13 	call	0x2790	; 0x2790 <__mulsi3>
     dec:	9b 01       	movw	r18, r22
     dee:	ac 01       	movw	r20, r24
     df0:	89 81       	ldd	r24, Y+1	; 0x01
     df2:	88 2f       	mov	r24, r24
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	a0 e0       	ldi	r26, 0x00	; 0
     df8:	b0 e0       	ldi	r27, 0x00	; 0
     dfa:	82 0f       	add	r24, r18
     dfc:	93 1f       	adc	r25, r19
     dfe:	a4 1f       	adc	r26, r20
     e00:	b5 1f       	adc	r27, r21
     e02:	8e 83       	std	Y+6, r24	; 0x06
     e04:	9f 83       	std	Y+7, r25	; 0x07
     e06:	a8 87       	std	Y+8, r26	; 0x08
     e08:	b9 87       	std	Y+9, r27	; 0x09
				}
			}
			LOC_u8PressedValue = 'F';
     e0a:	86 e4       	ldi	r24, 0x46	; 70
     e0c:	89 83       	std	Y+1, r24	; 0x01
     e0e:	0e cf       	rjmp	.-484    	; 0xc2c <main+0xf6>

00000e10 <App_vdOparatorCheck>:

#include "Types.h"

#include "App_FunctionsandDefine.h"
void App_vdOparatorCheck(u8* App_u8PressedValueChecked, s32* App_s8OperatorAssign1Checked, s32* App_s8OperatorAssign2Checked, u8* App_u8OperandSendingTimesChecked, u8* App_u8OperatorSendingTimesChecked )
{
     e10:	0f 93       	push	r16
     e12:	1f 93       	push	r17
     e14:	df 93       	push	r29
     e16:	cf 93       	push	r28
     e18:	cd b7       	in	r28, 0x3d	; 61
     e1a:	de b7       	in	r29, 0x3e	; 62
     e1c:	2e 97       	sbiw	r28, 0x0e	; 14
     e1e:	0f b6       	in	r0, 0x3f	; 63
     e20:	f8 94       	cli
     e22:	de bf       	out	0x3e, r29	; 62
     e24:	0f be       	out	0x3f, r0	; 63
     e26:	cd bf       	out	0x3d, r28	; 61
     e28:	9a 83       	std	Y+2, r25	; 0x02
     e2a:	89 83       	std	Y+1, r24	; 0x01
     e2c:	7c 83       	std	Y+4, r23	; 0x04
     e2e:	6b 83       	std	Y+3, r22	; 0x03
     e30:	5e 83       	std	Y+6, r21	; 0x06
     e32:	4d 83       	std	Y+5, r20	; 0x05
     e34:	38 87       	std	Y+8, r19	; 0x08
     e36:	2f 83       	std	Y+7, r18	; 0x07
     e38:	1a 87       	std	Y+10, r17	; 0x0a
     e3a:	09 87       	std	Y+9, r16	; 0x09
	if(*App_u8OperandSendingTimesChecked==0)
     e3c:	ef 81       	ldd	r30, Y+7	; 0x07
     e3e:	f8 85       	ldd	r31, Y+8	; 0x08
     e40:	80 81       	ld	r24, Z
     e42:	88 23       	and	r24, r24
     e44:	09 f0       	breq	.+2      	; 0xe48 <App_vdOparatorCheck+0x38>
     e46:	54 c0       	rjmp	.+168    	; 0xef0 <App_vdOparatorCheck+0xe0>
	{
		switch(*App_u8PressedValueChecked)
     e48:	e9 81       	ldd	r30, Y+1	; 0x01
     e4a:	fa 81       	ldd	r31, Y+2	; 0x02
     e4c:	80 81       	ld	r24, Z
     e4e:	28 2f       	mov	r18, r24
     e50:	30 e0       	ldi	r19, 0x00	; 0
     e52:	3e 87       	std	Y+14, r19	; 0x0e
     e54:	2d 87       	std	Y+13, r18	; 0x0d
     e56:	8d 85       	ldd	r24, Y+13	; 0x0d
     e58:	9e 85       	ldd	r25, Y+14	; 0x0e
     e5a:	8b 32       	cpi	r24, 0x2B	; 43
     e5c:	91 05       	cpc	r25, r1
     e5e:	09 f4       	brne	.+2      	; 0xe62 <App_vdOparatorCheck+0x52>
     e60:	a3 c0       	rjmp	.+326    	; 0xfa8 <App_vdOparatorCheck+0x198>
     e62:	2d 85       	ldd	r18, Y+13	; 0x0d
     e64:	3e 85       	ldd	r19, Y+14	; 0x0e
     e66:	2c 32       	cpi	r18, 0x2C	; 44
     e68:	31 05       	cpc	r19, r1
     e6a:	5c f4       	brge	.+22     	; 0xe82 <App_vdOparatorCheck+0x72>
     e6c:	8d 85       	ldd	r24, Y+13	; 0x0d
     e6e:	9e 85       	ldd	r25, Y+14	; 0x0e
     e70:	85 32       	cpi	r24, 0x25	; 37
     e72:	91 05       	cpc	r25, r1
     e74:	79 f1       	breq	.+94     	; 0xed4 <App_vdOparatorCheck+0xc4>
     e76:	2d 85       	ldd	r18, Y+13	; 0x0d
     e78:	3e 85       	ldd	r19, Y+14	; 0x0e
     e7a:	2a 32       	cpi	r18, 0x2A	; 42
     e7c:	31 05       	cpc	r19, r1
     e7e:	e1 f0       	breq	.+56     	; 0xeb8 <App_vdOparatorCheck+0xa8>
     e80:	93 c0       	rjmp	.+294    	; 0xfa8 <App_vdOparatorCheck+0x198>
     e82:	8d 85       	ldd	r24, Y+13	; 0x0d
     e84:	9e 85       	ldd	r25, Y+14	; 0x0e
     e86:	8d 32       	cpi	r24, 0x2D	; 45
     e88:	91 05       	cpc	r25, r1
     e8a:	59 f0       	breq	.+22     	; 0xea2 <App_vdOparatorCheck+0x92>
     e8c:	2d 85       	ldd	r18, Y+13	; 0x0d
     e8e:	3e 85       	ldd	r19, Y+14	; 0x0e
     e90:	2d 32       	cpi	r18, 0x2D	; 45
     e92:	31 05       	cpc	r19, r1
     e94:	34 f1       	brlt	.+76     	; 0xee2 <App_vdOparatorCheck+0xd2>
     e96:	8d 85       	ldd	r24, Y+13	; 0x0d
     e98:	9e 85       	ldd	r25, Y+14	; 0x0e
     e9a:	8f 32       	cpi	r24, 0x2F	; 47
     e9c:	91 05       	cpc	r25, r1
     e9e:	99 f0       	breq	.+38     	; 0xec6 <App_vdOparatorCheck+0xb6>
     ea0:	83 c0       	rjmp	.+262    	; 0xfa8 <App_vdOparatorCheck+0x198>
			{
				case '+':
					break;
				case '-':
					*App_s8OperatorAssign1Checked= -1;
     ea2:	eb 81       	ldd	r30, Y+3	; 0x03
     ea4:	fc 81       	ldd	r31, Y+4	; 0x04
     ea6:	8f ef       	ldi	r24, 0xFF	; 255
     ea8:	9f ef       	ldi	r25, 0xFF	; 255
     eaa:	af ef       	ldi	r26, 0xFF	; 255
     eac:	bf ef       	ldi	r27, 0xFF	; 255
     eae:	80 83       	st	Z, r24
     eb0:	91 83       	std	Z+1, r25	; 0x01
     eb2:	a2 83       	std	Z+2, r26	; 0x02
     eb4:	b3 83       	std	Z+3, r27	; 0x03
     eb6:	78 c0       	rjmp	.+240    	; 0xfa8 <App_vdOparatorCheck+0x198>
					break;
				case'*':
					 *App_s8OperatorAssign1Checked=0;
     eb8:	eb 81       	ldd	r30, Y+3	; 0x03
     eba:	fc 81       	ldd	r31, Y+4	; 0x04
     ebc:	10 82       	st	Z, r1
     ebe:	11 82       	std	Z+1, r1	; 0x01
     ec0:	12 82       	std	Z+2, r1	; 0x02
     ec2:	13 82       	std	Z+3, r1	; 0x03
     ec4:	71 c0       	rjmp	.+226    	; 0xfa8 <App_vdOparatorCheck+0x198>
					break;
				case '/':
					*App_s8OperatorAssign1Checked=0;
     ec6:	eb 81       	ldd	r30, Y+3	; 0x03
     ec8:	fc 81       	ldd	r31, Y+4	; 0x04
     eca:	10 82       	st	Z, r1
     ecc:	11 82       	std	Z+1, r1	; 0x01
     ece:	12 82       	std	Z+2, r1	; 0x02
     ed0:	13 82       	std	Z+3, r1	; 0x03
     ed2:	6a c0       	rjmp	.+212    	; 0xfa8 <App_vdOparatorCheck+0x198>
					break;
				case '%':
					*App_s8OperatorAssign1Checked=0;
     ed4:	eb 81       	ldd	r30, Y+3	; 0x03
     ed6:	fc 81       	ldd	r31, Y+4	; 0x04
     ed8:	10 82       	st	Z, r1
     eda:	11 82       	std	Z+1, r1	; 0x01
     edc:	12 82       	std	Z+2, r1	; 0x02
     ede:	13 82       	std	Z+3, r1	; 0x03
     ee0:	63 c0       	rjmp	.+198    	; 0xfa8 <App_vdOparatorCheck+0x198>
					break;
				case ',':
					*App_s8OperatorAssign1Checked=0;
     ee2:	eb 81       	ldd	r30, Y+3	; 0x03
     ee4:	fc 81       	ldd	r31, Y+4	; 0x04
     ee6:	10 82       	st	Z, r1
     ee8:	11 82       	std	Z+1, r1	; 0x01
     eea:	12 82       	std	Z+2, r1	; 0x02
     eec:	13 82       	std	Z+3, r1	; 0x03
     eee:	5c c0       	rjmp	.+184    	; 0xfa8 <App_vdOparatorCheck+0x198>
					break;
					//Casting float
			}
	}
	else if(*App_u8OperandSendingTimesChecked>*App_u8OperatorSendingTimesChecked)
     ef0:	ef 81       	ldd	r30, Y+7	; 0x07
     ef2:	f8 85       	ldd	r31, Y+8	; 0x08
     ef4:	90 81       	ld	r25, Z
     ef6:	e9 85       	ldd	r30, Y+9	; 0x09
     ef8:	fa 85       	ldd	r31, Y+10	; 0x0a
     efa:	80 81       	ld	r24, Z
     efc:	89 17       	cp	r24, r25
     efe:	08 f0       	brcs	.+2      	; 0xf02 <App_vdOparatorCheck+0xf2>
     f00:	53 c0       	rjmp	.+166    	; 0xfa8 <App_vdOparatorCheck+0x198>
	{
		switch(*App_u8PressedValueChecked)
     f02:	e9 81       	ldd	r30, Y+1	; 0x01
     f04:	fa 81       	ldd	r31, Y+2	; 0x02
     f06:	80 81       	ld	r24, Z
     f08:	28 2f       	mov	r18, r24
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	3c 87       	std	Y+12, r19	; 0x0c
     f0e:	2b 87       	std	Y+11, r18	; 0x0b
     f10:	8b 85       	ldd	r24, Y+11	; 0x0b
     f12:	9c 85       	ldd	r25, Y+12	; 0x0c
     f14:	8b 32       	cpi	r24, 0x2B	; 43
     f16:	91 05       	cpc	r25, r1
     f18:	09 f4       	brne	.+2      	; 0xf1c <App_vdOparatorCheck+0x10c>
     f1a:	46 c0       	rjmp	.+140    	; 0xfa8 <App_vdOparatorCheck+0x198>
     f1c:	2b 85       	ldd	r18, Y+11	; 0x0b
     f1e:	3c 85       	ldd	r19, Y+12	; 0x0c
     f20:	2c 32       	cpi	r18, 0x2C	; 44
     f22:	31 05       	cpc	r19, r1
     f24:	5c f4       	brge	.+22     	; 0xf3c <App_vdOparatorCheck+0x12c>
     f26:	8b 85       	ldd	r24, Y+11	; 0x0b
     f28:	9c 85       	ldd	r25, Y+12	; 0x0c
     f2a:	85 32       	cpi	r24, 0x25	; 37
     f2c:	91 05       	cpc	r25, r1
     f2e:	79 f1       	breq	.+94     	; 0xf8e <App_vdOparatorCheck+0x17e>
     f30:	2b 85       	ldd	r18, Y+11	; 0x0b
     f32:	3c 85       	ldd	r19, Y+12	; 0x0c
     f34:	2a 32       	cpi	r18, 0x2A	; 42
     f36:	31 05       	cpc	r19, r1
     f38:	e1 f0       	breq	.+56     	; 0xf72 <App_vdOparatorCheck+0x162>
     f3a:	36 c0       	rjmp	.+108    	; 0xfa8 <App_vdOparatorCheck+0x198>
     f3c:	8b 85       	ldd	r24, Y+11	; 0x0b
     f3e:	9c 85       	ldd	r25, Y+12	; 0x0c
     f40:	8d 32       	cpi	r24, 0x2D	; 45
     f42:	91 05       	cpc	r25, r1
     f44:	59 f0       	breq	.+22     	; 0xf5c <App_vdOparatorCheck+0x14c>
     f46:	2b 85       	ldd	r18, Y+11	; 0x0b
     f48:	3c 85       	ldd	r19, Y+12	; 0x0c
     f4a:	2d 32       	cpi	r18, 0x2D	; 45
     f4c:	31 05       	cpc	r19, r1
     f4e:	34 f1       	brlt	.+76     	; 0xf9c <App_vdOparatorCheck+0x18c>
     f50:	8b 85       	ldd	r24, Y+11	; 0x0b
     f52:	9c 85       	ldd	r25, Y+12	; 0x0c
     f54:	8f 32       	cpi	r24, 0x2F	; 47
     f56:	91 05       	cpc	r25, r1
     f58:	99 f0       	breq	.+38     	; 0xf80 <App_vdOparatorCheck+0x170>
     f5a:	26 c0       	rjmp	.+76     	; 0xfa8 <App_vdOparatorCheck+0x198>
			{
				case '+':
					break;
				case '-':
					*App_s8OperatorAssign2Checked= -1;
     f5c:	ed 81       	ldd	r30, Y+5	; 0x05
     f5e:	fe 81       	ldd	r31, Y+6	; 0x06
     f60:	8f ef       	ldi	r24, 0xFF	; 255
     f62:	9f ef       	ldi	r25, 0xFF	; 255
     f64:	af ef       	ldi	r26, 0xFF	; 255
     f66:	bf ef       	ldi	r27, 0xFF	; 255
     f68:	80 83       	st	Z, r24
     f6a:	91 83       	std	Z+1, r25	; 0x01
     f6c:	a2 83       	std	Z+2, r26	; 0x02
     f6e:	b3 83       	std	Z+3, r27	; 0x03
     f70:	1b c0       	rjmp	.+54     	; 0xfa8 <App_vdOparatorCheck+0x198>
					break;
				case'*':
					 *App_s8OperatorAssign2Checked=0;
     f72:	ed 81       	ldd	r30, Y+5	; 0x05
     f74:	fe 81       	ldd	r31, Y+6	; 0x06
     f76:	10 82       	st	Z, r1
     f78:	11 82       	std	Z+1, r1	; 0x01
     f7a:	12 82       	std	Z+2, r1	; 0x02
     f7c:	13 82       	std	Z+3, r1	; 0x03
     f7e:	14 c0       	rjmp	.+40     	; 0xfa8 <App_vdOparatorCheck+0x198>
					break;
				case '/':
					*App_s8OperatorAssign2Checked=0;
     f80:	ed 81       	ldd	r30, Y+5	; 0x05
     f82:	fe 81       	ldd	r31, Y+6	; 0x06
     f84:	10 82       	st	Z, r1
     f86:	11 82       	std	Z+1, r1	; 0x01
     f88:	12 82       	std	Z+2, r1	; 0x02
     f8a:	13 82       	std	Z+3, r1	; 0x03
     f8c:	0d c0       	rjmp	.+26     	; 0xfa8 <App_vdOparatorCheck+0x198>
					break;
				case '%':
					*App_s8OperatorAssign2Checked=0;
     f8e:	ed 81       	ldd	r30, Y+5	; 0x05
     f90:	fe 81       	ldd	r31, Y+6	; 0x06
     f92:	10 82       	st	Z, r1
     f94:	11 82       	std	Z+1, r1	; 0x01
     f96:	12 82       	std	Z+2, r1	; 0x02
     f98:	13 82       	std	Z+3, r1	; 0x03
     f9a:	06 c0       	rjmp	.+12     	; 0xfa8 <App_vdOparatorCheck+0x198>
					break;
				case ',':
					*App_s8OperatorAssign2Checked=0;
     f9c:	ed 81       	ldd	r30, Y+5	; 0x05
     f9e:	fe 81       	ldd	r31, Y+6	; 0x06
     fa0:	10 82       	st	Z, r1
     fa2:	11 82       	std	Z+1, r1	; 0x01
     fa4:	12 82       	std	Z+2, r1	; 0x02
     fa6:	13 82       	std	Z+3, r1	; 0x03
			}
	}
	else
	{}

}
     fa8:	2e 96       	adiw	r28, 0x0e	; 14
     faa:	0f b6       	in	r0, 0x3f	; 63
     fac:	f8 94       	cli
     fae:	de bf       	out	0x3e, r29	; 62
     fb0:	0f be       	out	0x3f, r0	; 63
     fb2:	cd bf       	out	0x3d, r28	; 61
     fb4:	cf 91       	pop	r28
     fb6:	df 91       	pop	r29
     fb8:	1f 91       	pop	r17
     fba:	0f 91       	pop	r16
     fbc:	08 95       	ret

00000fbe <App_s32OperationChosen>:

void App_s32OperationChosen(s32* App_u8FirstOperandCheck, s32* App_u8SecondOperandCheck, u8* App_u8OperatorCheck, s32* App_u2ResultOperationptr, u8*alarm)
{
     fbe:	ef 92       	push	r14
     fc0:	ff 92       	push	r15
     fc2:	0f 93       	push	r16
     fc4:	1f 93       	push	r17
     fc6:	df 93       	push	r29
     fc8:	cf 93       	push	r28
     fca:	cd b7       	in	r28, 0x3d	; 61
     fcc:	de b7       	in	r29, 0x3e	; 62
     fce:	2c 97       	sbiw	r28, 0x0c	; 12
     fd0:	0f b6       	in	r0, 0x3f	; 63
     fd2:	f8 94       	cli
     fd4:	de bf       	out	0x3e, r29	; 62
     fd6:	0f be       	out	0x3f, r0	; 63
     fd8:	cd bf       	out	0x3d, r28	; 61
     fda:	9a 83       	std	Y+2, r25	; 0x02
     fdc:	89 83       	std	Y+1, r24	; 0x01
     fde:	7c 83       	std	Y+4, r23	; 0x04
     fe0:	6b 83       	std	Y+3, r22	; 0x03
     fe2:	5e 83       	std	Y+6, r21	; 0x06
     fe4:	4d 83       	std	Y+5, r20	; 0x05
     fe6:	38 87       	std	Y+8, r19	; 0x08
     fe8:	2f 83       	std	Y+7, r18	; 0x07
     fea:	1a 87       	std	Y+10, r17	; 0x0a
     fec:	09 87       	std	Y+9, r16	; 0x09
	switch(*App_u8OperatorCheck)
     fee:	ed 81       	ldd	r30, Y+5	; 0x05
     ff0:	fe 81       	ldd	r31, Y+6	; 0x06
     ff2:	80 81       	ld	r24, Z
     ff4:	e8 2e       	mov	r14, r24
     ff6:	ff 24       	eor	r15, r15
     ff8:	fc 86       	std	Y+12, r15	; 0x0c
     ffa:	eb 86       	std	Y+11, r14	; 0x0b
     ffc:	0b 85       	ldd	r16, Y+11	; 0x0b
     ffe:	1c 85       	ldd	r17, Y+12	; 0x0c
    1000:	0b 32       	cpi	r16, 0x2B	; 43
    1002:	11 05       	cpc	r17, r1
    1004:	f1 f0       	breq	.+60     	; 0x1042 <App_s32OperationChosen+0x84>
    1006:	2b 85       	ldd	r18, Y+11	; 0x0b
    1008:	3c 85       	ldd	r19, Y+12	; 0x0c
    100a:	2c 32       	cpi	r18, 0x2C	; 44
    100c:	31 05       	cpc	r19, r1
    100e:	6c f4       	brge	.+26     	; 0x102a <App_s32OperationChosen+0x6c>
    1010:	8b 85       	ldd	r24, Y+11	; 0x0b
    1012:	9c 85       	ldd	r25, Y+12	; 0x0c
    1014:	85 32       	cpi	r24, 0x25	; 37
    1016:	91 05       	cpc	r25, r1
    1018:	09 f4       	brne	.+2      	; 0x101c <App_s32OperationChosen+0x5e>
    101a:	86 c0       	rjmp	.+268    	; 0x1128 <App_s32OperationChosen+0x16a>
    101c:	0b 85       	ldd	r16, Y+11	; 0x0b
    101e:	1c 85       	ldd	r17, Y+12	; 0x0c
    1020:	0a 32       	cpi	r16, 0x2A	; 42
    1022:	11 05       	cpc	r17, r1
    1024:	09 f4       	brne	.+2      	; 0x1028 <App_s32OperationChosen+0x6a>
    1026:	3f c0       	rjmp	.+126    	; 0x10a6 <App_s32OperationChosen+0xe8>
    1028:	97 c0       	rjmp	.+302    	; 0x1158 <App_s32OperationChosen+0x19a>
    102a:	2b 85       	ldd	r18, Y+11	; 0x0b
    102c:	3c 85       	ldd	r19, Y+12	; 0x0c
    102e:	2d 32       	cpi	r18, 0x2D	; 45
    1030:	31 05       	cpc	r19, r1
    1032:	f1 f0       	breq	.+60     	; 0x1070 <App_s32OperationChosen+0xb2>
    1034:	8b 85       	ldd	r24, Y+11	; 0x0b
    1036:	9c 85       	ldd	r25, Y+12	; 0x0c
    1038:	8f 32       	cpi	r24, 0x2F	; 47
    103a:	91 05       	cpc	r25, r1
    103c:	09 f4       	brne	.+2      	; 0x1040 <App_s32OperationChosen+0x82>
    103e:	4c c0       	rjmp	.+152    	; 0x10d8 <App_s32OperationChosen+0x11a>
    1040:	8b c0       	rjmp	.+278    	; 0x1158 <App_s32OperationChosen+0x19a>
		{
			case '+':
				*App_u2ResultOperationptr = (*App_u8FirstOperandCheck) + (*App_u8SecondOperandCheck);
    1042:	e9 81       	ldd	r30, Y+1	; 0x01
    1044:	fa 81       	ldd	r31, Y+2	; 0x02
    1046:	20 81       	ld	r18, Z
    1048:	31 81       	ldd	r19, Z+1	; 0x01
    104a:	42 81       	ldd	r20, Z+2	; 0x02
    104c:	53 81       	ldd	r21, Z+3	; 0x03
    104e:	eb 81       	ldd	r30, Y+3	; 0x03
    1050:	fc 81       	ldd	r31, Y+4	; 0x04
    1052:	80 81       	ld	r24, Z
    1054:	91 81       	ldd	r25, Z+1	; 0x01
    1056:	a2 81       	ldd	r26, Z+2	; 0x02
    1058:	b3 81       	ldd	r27, Z+3	; 0x03
    105a:	82 0f       	add	r24, r18
    105c:	93 1f       	adc	r25, r19
    105e:	a4 1f       	adc	r26, r20
    1060:	b5 1f       	adc	r27, r21
    1062:	ef 81       	ldd	r30, Y+7	; 0x07
    1064:	f8 85       	ldd	r31, Y+8	; 0x08
    1066:	80 83       	st	Z, r24
    1068:	91 83       	std	Z+1, r25	; 0x01
    106a:	a2 83       	std	Z+2, r26	; 0x02
    106c:	b3 83       	std	Z+3, r27	; 0x03
    106e:	74 c0       	rjmp	.+232    	; 0x1158 <App_s32OperationChosen+0x19a>
				break;
			case '-':
				*App_u2ResultOperationptr= (*App_u8FirstOperandCheck) - (*App_u8SecondOperandCheck);
    1070:	e9 81       	ldd	r30, Y+1	; 0x01
    1072:	fa 81       	ldd	r31, Y+2	; 0x02
    1074:	20 81       	ld	r18, Z
    1076:	31 81       	ldd	r19, Z+1	; 0x01
    1078:	42 81       	ldd	r20, Z+2	; 0x02
    107a:	53 81       	ldd	r21, Z+3	; 0x03
    107c:	eb 81       	ldd	r30, Y+3	; 0x03
    107e:	fc 81       	ldd	r31, Y+4	; 0x04
    1080:	80 81       	ld	r24, Z
    1082:	91 81       	ldd	r25, Z+1	; 0x01
    1084:	a2 81       	ldd	r26, Z+2	; 0x02
    1086:	b3 81       	ldd	r27, Z+3	; 0x03
    1088:	79 01       	movw	r14, r18
    108a:	8a 01       	movw	r16, r20
    108c:	e8 1a       	sub	r14, r24
    108e:	f9 0a       	sbc	r15, r25
    1090:	0a 0b       	sbc	r16, r26
    1092:	1b 0b       	sbc	r17, r27
    1094:	d8 01       	movw	r26, r16
    1096:	c7 01       	movw	r24, r14
    1098:	ef 81       	ldd	r30, Y+7	; 0x07
    109a:	f8 85       	ldd	r31, Y+8	; 0x08
    109c:	80 83       	st	Z, r24
    109e:	91 83       	std	Z+1, r25	; 0x01
    10a0:	a2 83       	std	Z+2, r26	; 0x02
    10a2:	b3 83       	std	Z+3, r27	; 0x03
    10a4:	59 c0       	rjmp	.+178    	; 0x1158 <App_s32OperationChosen+0x19a>
				break;
			case'*':
				*App_u2ResultOperationptr= (*App_u8FirstOperandCheck) * (*App_u8SecondOperandCheck);
    10a6:	e9 81       	ldd	r30, Y+1	; 0x01
    10a8:	fa 81       	ldd	r31, Y+2	; 0x02
    10aa:	80 81       	ld	r24, Z
    10ac:	91 81       	ldd	r25, Z+1	; 0x01
    10ae:	a2 81       	ldd	r26, Z+2	; 0x02
    10b0:	b3 81       	ldd	r27, Z+3	; 0x03
    10b2:	eb 81       	ldd	r30, Y+3	; 0x03
    10b4:	fc 81       	ldd	r31, Y+4	; 0x04
    10b6:	20 81       	ld	r18, Z
    10b8:	31 81       	ldd	r19, Z+1	; 0x01
    10ba:	42 81       	ldd	r20, Z+2	; 0x02
    10bc:	53 81       	ldd	r21, Z+3	; 0x03
    10be:	bc 01       	movw	r22, r24
    10c0:	cd 01       	movw	r24, r26
    10c2:	0e 94 c8 13 	call	0x2790	; 0x2790 <__mulsi3>
    10c6:	dc 01       	movw	r26, r24
    10c8:	cb 01       	movw	r24, r22
    10ca:	ef 81       	ldd	r30, Y+7	; 0x07
    10cc:	f8 85       	ldd	r31, Y+8	; 0x08
    10ce:	80 83       	st	Z, r24
    10d0:	91 83       	std	Z+1, r25	; 0x01
    10d2:	a2 83       	std	Z+2, r26	; 0x02
    10d4:	b3 83       	std	Z+3, r27	; 0x03
    10d6:	40 c0       	rjmp	.+128    	; 0x1158 <App_s32OperationChosen+0x19a>
				break;
			case '/':
				if(*App_u8SecondOperandCheck==0)
    10d8:	eb 81       	ldd	r30, Y+3	; 0x03
    10da:	fc 81       	ldd	r31, Y+4	; 0x04
    10dc:	80 81       	ld	r24, Z
    10de:	91 81       	ldd	r25, Z+1	; 0x01
    10e0:	a2 81       	ldd	r26, Z+2	; 0x02
    10e2:	b3 81       	ldd	r27, Z+3	; 0x03
    10e4:	00 97       	sbiw	r24, 0x00	; 0
    10e6:	a1 05       	cpc	r26, r1
    10e8:	b1 05       	cpc	r27, r1
    10ea:	29 f4       	brne	.+10     	; 0x10f6 <App_s32OperationChosen+0x138>
				{
					*alarm =1;
    10ec:	e9 85       	ldd	r30, Y+9	; 0x09
    10ee:	fa 85       	ldd	r31, Y+10	; 0x0a
    10f0:	81 e0       	ldi	r24, 0x01	; 1
    10f2:	80 83       	st	Z, r24
    10f4:	31 c0       	rjmp	.+98     	; 0x1158 <App_s32OperationChosen+0x19a>
					break;
				}
				*App_u2ResultOperationptr= (*App_u8FirstOperandCheck) / (*App_u8SecondOperandCheck);
    10f6:	e9 81       	ldd	r30, Y+1	; 0x01
    10f8:	fa 81       	ldd	r31, Y+2	; 0x02
    10fa:	80 81       	ld	r24, Z
    10fc:	91 81       	ldd	r25, Z+1	; 0x01
    10fe:	a2 81       	ldd	r26, Z+2	; 0x02
    1100:	b3 81       	ldd	r27, Z+3	; 0x03
    1102:	eb 81       	ldd	r30, Y+3	; 0x03
    1104:	fc 81       	ldd	r31, Y+4	; 0x04
    1106:	20 81       	ld	r18, Z
    1108:	31 81       	ldd	r19, Z+1	; 0x01
    110a:	42 81       	ldd	r20, Z+2	; 0x02
    110c:	53 81       	ldd	r21, Z+3	; 0x03
    110e:	bc 01       	movw	r22, r24
    1110:	cd 01       	movw	r24, r26
    1112:	0e 94 09 14 	call	0x2812	; 0x2812 <__divmodsi4>
    1116:	da 01       	movw	r26, r20
    1118:	c9 01       	movw	r24, r18
    111a:	ef 81       	ldd	r30, Y+7	; 0x07
    111c:	f8 85       	ldd	r31, Y+8	; 0x08
    111e:	80 83       	st	Z, r24
    1120:	91 83       	std	Z+1, r25	; 0x01
    1122:	a2 83       	std	Z+2, r26	; 0x02
    1124:	b3 83       	std	Z+3, r27	; 0x03
    1126:	18 c0       	rjmp	.+48     	; 0x1158 <App_s32OperationChosen+0x19a>
				break;
			case '%':
				*App_u2ResultOperationptr= (*App_u8FirstOperandCheck) % (*App_u8SecondOperandCheck);
    1128:	e9 81       	ldd	r30, Y+1	; 0x01
    112a:	fa 81       	ldd	r31, Y+2	; 0x02
    112c:	80 81       	ld	r24, Z
    112e:	91 81       	ldd	r25, Z+1	; 0x01
    1130:	a2 81       	ldd	r26, Z+2	; 0x02
    1132:	b3 81       	ldd	r27, Z+3	; 0x03
    1134:	eb 81       	ldd	r30, Y+3	; 0x03
    1136:	fc 81       	ldd	r31, Y+4	; 0x04
    1138:	20 81       	ld	r18, Z
    113a:	31 81       	ldd	r19, Z+1	; 0x01
    113c:	42 81       	ldd	r20, Z+2	; 0x02
    113e:	53 81       	ldd	r21, Z+3	; 0x03
    1140:	bc 01       	movw	r22, r24
    1142:	cd 01       	movw	r24, r26
    1144:	0e 94 09 14 	call	0x2812	; 0x2812 <__divmodsi4>
    1148:	dc 01       	movw	r26, r24
    114a:	cb 01       	movw	r24, r22
    114c:	ef 81       	ldd	r30, Y+7	; 0x07
    114e:	f8 85       	ldd	r31, Y+8	; 0x08
    1150:	80 83       	st	Z, r24
    1152:	91 83       	std	Z+1, r25	; 0x01
    1154:	a2 83       	std	Z+2, r26	; 0x02
    1156:	b3 83       	std	Z+3, r27	; 0x03
				break;
		}

}
    1158:	2c 96       	adiw	r28, 0x0c	; 12
    115a:	0f b6       	in	r0, 0x3f	; 63
    115c:	f8 94       	cli
    115e:	de bf       	out	0x3e, r29	; 62
    1160:	0f be       	out	0x3f, r0	; 63
    1162:	cd bf       	out	0x3d, r28	; 61
    1164:	cf 91       	pop	r28
    1166:	df 91       	pop	r29
    1168:	1f 91       	pop	r17
    116a:	0f 91       	pop	r16
    116c:	ff 90       	pop	r15
    116e:	ef 90       	pop	r14
    1170:	08 95       	ret

00001172 <DIO_vdSetPortDirection>:
#include "DIO_Registers.h"
//Filename_typeFunctionality

//Set Port direction
void DIO_vdSetPortDirection(u8 PortID, u8 PortDirection)
{
    1172:	df 93       	push	r29
    1174:	cf 93       	push	r28
    1176:	00 d0       	rcall	.+0      	; 0x1178 <DIO_vdSetPortDirection+0x6>
    1178:	00 d0       	rcall	.+0      	; 0x117a <DIO_vdSetPortDirection+0x8>
    117a:	cd b7       	in	r28, 0x3d	; 61
    117c:	de b7       	in	r29, 0x3e	; 62
    117e:	89 83       	std	Y+1, r24	; 0x01
    1180:	6a 83       	std	Y+2, r22	; 0x02
	if(PortID >= 0 && PortID <= 3)
    1182:	89 81       	ldd	r24, Y+1	; 0x01
    1184:	84 30       	cpi	r24, 0x04	; 4
    1186:	90 f5       	brcc	.+100    	; 0x11ec <DIO_vdSetPortDirection+0x7a>
	{
		switch (PortID)
    1188:	89 81       	ldd	r24, Y+1	; 0x01
    118a:	28 2f       	mov	r18, r24
    118c:	30 e0       	ldi	r19, 0x00	; 0
    118e:	3c 83       	std	Y+4, r19	; 0x04
    1190:	2b 83       	std	Y+3, r18	; 0x03
    1192:	8b 81       	ldd	r24, Y+3	; 0x03
    1194:	9c 81       	ldd	r25, Y+4	; 0x04
    1196:	81 30       	cpi	r24, 0x01	; 1
    1198:	91 05       	cpc	r25, r1
    119a:	d1 f0       	breq	.+52     	; 0x11d0 <DIO_vdSetPortDirection+0x5e>
    119c:	2b 81       	ldd	r18, Y+3	; 0x03
    119e:	3c 81       	ldd	r19, Y+4	; 0x04
    11a0:	22 30       	cpi	r18, 0x02	; 2
    11a2:	31 05       	cpc	r19, r1
    11a4:	2c f4       	brge	.+10     	; 0x11b0 <DIO_vdSetPortDirection+0x3e>
    11a6:	8b 81       	ldd	r24, Y+3	; 0x03
    11a8:	9c 81       	ldd	r25, Y+4	; 0x04
    11aa:	00 97       	sbiw	r24, 0x00	; 0
    11ac:	61 f0       	breq	.+24     	; 0x11c6 <DIO_vdSetPortDirection+0x54>
    11ae:	1e c0       	rjmp	.+60     	; 0x11ec <DIO_vdSetPortDirection+0x7a>
    11b0:	2b 81       	ldd	r18, Y+3	; 0x03
    11b2:	3c 81       	ldd	r19, Y+4	; 0x04
    11b4:	22 30       	cpi	r18, 0x02	; 2
    11b6:	31 05       	cpc	r19, r1
    11b8:	81 f0       	breq	.+32     	; 0x11da <DIO_vdSetPortDirection+0x68>
    11ba:	8b 81       	ldd	r24, Y+3	; 0x03
    11bc:	9c 81       	ldd	r25, Y+4	; 0x04
    11be:	83 30       	cpi	r24, 0x03	; 3
    11c0:	91 05       	cpc	r25, r1
    11c2:	81 f0       	breq	.+32     	; 0x11e4 <DIO_vdSetPortDirection+0x72>
    11c4:	13 c0       	rjmp	.+38     	; 0x11ec <DIO_vdSetPortDirection+0x7a>
		{
			case PortA:
				DDRA_REGISTER= PortDirection;
    11c6:	ea e3       	ldi	r30, 0x3A	; 58
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	8a 81       	ldd	r24, Y+2	; 0x02
    11cc:	80 83       	st	Z, r24
    11ce:	0e c0       	rjmp	.+28     	; 0x11ec <DIO_vdSetPortDirection+0x7a>
				break;
			case PortB:
				DDRB_REGISTER= PortDirection;
    11d0:	e7 e3       	ldi	r30, 0x37	; 55
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	8a 81       	ldd	r24, Y+2	; 0x02
    11d6:	80 83       	st	Z, r24
    11d8:	09 c0       	rjmp	.+18     	; 0x11ec <DIO_vdSetPortDirection+0x7a>
				break;
			case PortC:
				DDRC_REGISTER= PortDirection;
    11da:	e4 e3       	ldi	r30, 0x34	; 52
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	8a 81       	ldd	r24, Y+2	; 0x02
    11e0:	80 83       	st	Z, r24
    11e2:	04 c0       	rjmp	.+8      	; 0x11ec <DIO_vdSetPortDirection+0x7a>
				break;
			case PortD:
				DDRD_REGISTER= PortDirection;
    11e4:	e1 e3       	ldi	r30, 0x31	; 49
    11e6:	f0 e0       	ldi	r31, 0x00	; 0
    11e8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ea:	80 83       	st	Z, r24
				break;
		}
	}
	else
	{}
}
    11ec:	0f 90       	pop	r0
    11ee:	0f 90       	pop	r0
    11f0:	0f 90       	pop	r0
    11f2:	0f 90       	pop	r0
    11f4:	cf 91       	pop	r28
    11f6:	df 91       	pop	r29
    11f8:	08 95       	ret

000011fa <DIO_vdSetPortValue>:

//Set PORT value
void DIO_vdSetPortValue(u8 PortID , u8 PortValue )
{
    11fa:	df 93       	push	r29
    11fc:	cf 93       	push	r28
    11fe:	00 d0       	rcall	.+0      	; 0x1200 <DIO_vdSetPortValue+0x6>
    1200:	00 d0       	rcall	.+0      	; 0x1202 <DIO_vdSetPortValue+0x8>
    1202:	00 d0       	rcall	.+0      	; 0x1204 <DIO_vdSetPortValue+0xa>
    1204:	cd b7       	in	r28, 0x3d	; 61
    1206:	de b7       	in	r29, 0x3e	; 62
    1208:	89 83       	std	Y+1, r24	; 0x01
    120a:	6a 83       	std	Y+2, r22	; 0x02
	if(PortID >= 0 && PortID <= 3)
    120c:	89 81       	ldd	r24, Y+1	; 0x01
    120e:	84 30       	cpi	r24, 0x04	; 4
    1210:	08 f0       	brcs	.+2      	; 0x1214 <DIO_vdSetPortValue+0x1a>
    1212:	64 c0       	rjmp	.+200    	; 0x12dc <DIO_vdSetPortValue+0xe2>
	{
		if(PortValue == PORT_LOW)
    1214:	8a 81       	ldd	r24, Y+2	; 0x02
    1216:	88 23       	and	r24, r24
    1218:	79 f5       	brne	.+94     	; 0x1278 <DIO_vdSetPortValue+0x7e>
		{
			switch(PortID)
    121a:	89 81       	ldd	r24, Y+1	; 0x01
    121c:	28 2f       	mov	r18, r24
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	3e 83       	std	Y+6, r19	; 0x06
    1222:	2d 83       	std	Y+5, r18	; 0x05
    1224:	8d 81       	ldd	r24, Y+5	; 0x05
    1226:	9e 81       	ldd	r25, Y+6	; 0x06
    1228:	81 30       	cpi	r24, 0x01	; 1
    122a:	91 05       	cpc	r25, r1
    122c:	c9 f0       	breq	.+50     	; 0x1260 <DIO_vdSetPortValue+0x66>
    122e:	2d 81       	ldd	r18, Y+5	; 0x05
    1230:	3e 81       	ldd	r19, Y+6	; 0x06
    1232:	22 30       	cpi	r18, 0x02	; 2
    1234:	31 05       	cpc	r19, r1
    1236:	2c f4       	brge	.+10     	; 0x1242 <DIO_vdSetPortValue+0x48>
    1238:	8d 81       	ldd	r24, Y+5	; 0x05
    123a:	9e 81       	ldd	r25, Y+6	; 0x06
    123c:	00 97       	sbiw	r24, 0x00	; 0
    123e:	61 f0       	breq	.+24     	; 0x1258 <DIO_vdSetPortValue+0x5e>
    1240:	4d c0       	rjmp	.+154    	; 0x12dc <DIO_vdSetPortValue+0xe2>
    1242:	2d 81       	ldd	r18, Y+5	; 0x05
    1244:	3e 81       	ldd	r19, Y+6	; 0x06
    1246:	22 30       	cpi	r18, 0x02	; 2
    1248:	31 05       	cpc	r19, r1
    124a:	71 f0       	breq	.+28     	; 0x1268 <DIO_vdSetPortValue+0x6e>
    124c:	8d 81       	ldd	r24, Y+5	; 0x05
    124e:	9e 81       	ldd	r25, Y+6	; 0x06
    1250:	83 30       	cpi	r24, 0x03	; 3
    1252:	91 05       	cpc	r25, r1
    1254:	69 f0       	breq	.+26     	; 0x1270 <DIO_vdSetPortValue+0x76>
    1256:	42 c0       	rjmp	.+132    	; 0x12dc <DIO_vdSetPortValue+0xe2>
			{
				case PortA:
					CLR_BYTE(PORTA_REGISTER);
    1258:	eb e3       	ldi	r30, 0x3B	; 59
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	10 82       	st	Z, r1
    125e:	3e c0       	rjmp	.+124    	; 0x12dc <DIO_vdSetPortValue+0xe2>
					break;
				case PortB:
					CLR_BYTE(PORTB_REGISTER);
    1260:	e8 e3       	ldi	r30, 0x38	; 56
    1262:	f0 e0       	ldi	r31, 0x00	; 0
    1264:	10 82       	st	Z, r1
    1266:	3a c0       	rjmp	.+116    	; 0x12dc <DIO_vdSetPortValue+0xe2>
					break;
				case PortC:
					CLR_BYTE(PORTC_REGISTER);
    1268:	e5 e3       	ldi	r30, 0x35	; 53
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	10 82       	st	Z, r1
    126e:	36 c0       	rjmp	.+108    	; 0x12dc <DIO_vdSetPortValue+0xe2>
					break;
				case PortD:
					CLR_BYTE(PORTD_REGISTER);
    1270:	e2 e3       	ldi	r30, 0x32	; 50
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	10 82       	st	Z, r1
    1276:	32 c0       	rjmp	.+100    	; 0x12dc <DIO_vdSetPortValue+0xe2>
					break;
			}
		}
		else
		{
			switch(PortID)
    1278:	89 81       	ldd	r24, Y+1	; 0x01
    127a:	28 2f       	mov	r18, r24
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	3c 83       	std	Y+4, r19	; 0x04
    1280:	2b 83       	std	Y+3, r18	; 0x03
    1282:	8b 81       	ldd	r24, Y+3	; 0x03
    1284:	9c 81       	ldd	r25, Y+4	; 0x04
    1286:	81 30       	cpi	r24, 0x01	; 1
    1288:	91 05       	cpc	r25, r1
    128a:	d1 f0       	breq	.+52     	; 0x12c0 <DIO_vdSetPortValue+0xc6>
    128c:	2b 81       	ldd	r18, Y+3	; 0x03
    128e:	3c 81       	ldd	r19, Y+4	; 0x04
    1290:	22 30       	cpi	r18, 0x02	; 2
    1292:	31 05       	cpc	r19, r1
    1294:	2c f4       	brge	.+10     	; 0x12a0 <DIO_vdSetPortValue+0xa6>
    1296:	8b 81       	ldd	r24, Y+3	; 0x03
    1298:	9c 81       	ldd	r25, Y+4	; 0x04
    129a:	00 97       	sbiw	r24, 0x00	; 0
    129c:	61 f0       	breq	.+24     	; 0x12b6 <DIO_vdSetPortValue+0xbc>
    129e:	1e c0       	rjmp	.+60     	; 0x12dc <DIO_vdSetPortValue+0xe2>
    12a0:	2b 81       	ldd	r18, Y+3	; 0x03
    12a2:	3c 81       	ldd	r19, Y+4	; 0x04
    12a4:	22 30       	cpi	r18, 0x02	; 2
    12a6:	31 05       	cpc	r19, r1
    12a8:	81 f0       	breq	.+32     	; 0x12ca <DIO_vdSetPortValue+0xd0>
    12aa:	8b 81       	ldd	r24, Y+3	; 0x03
    12ac:	9c 81       	ldd	r25, Y+4	; 0x04
    12ae:	83 30       	cpi	r24, 0x03	; 3
    12b0:	91 05       	cpc	r25, r1
    12b2:	81 f0       	breq	.+32     	; 0x12d4 <DIO_vdSetPortValue+0xda>
    12b4:	13 c0       	rjmp	.+38     	; 0x12dc <DIO_vdSetPortValue+0xe2>
			{
				case PortA:
					SET_BYTE(PORTA_REGISTER ,  PortValue);
    12b6:	eb e3       	ldi	r30, 0x3B	; 59
    12b8:	f0 e0       	ldi	r31, 0x00	; 0
    12ba:	8a 81       	ldd	r24, Y+2	; 0x02
    12bc:	80 83       	st	Z, r24
    12be:	0e c0       	rjmp	.+28     	; 0x12dc <DIO_vdSetPortValue+0xe2>
					break;
				case PortB:
					SET_BYTE(PORTB_REGISTER , PortValue);
    12c0:	e8 e3       	ldi	r30, 0x38	; 56
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	8a 81       	ldd	r24, Y+2	; 0x02
    12c6:	80 83       	st	Z, r24
    12c8:	09 c0       	rjmp	.+18     	; 0x12dc <DIO_vdSetPortValue+0xe2>
					break;
				case PortC:
					SET_BYTE(PORTC_REGISTER , PortValue);
    12ca:	e5 e3       	ldi	r30, 0x35	; 53
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	8a 81       	ldd	r24, Y+2	; 0x02
    12d0:	80 83       	st	Z, r24
    12d2:	04 c0       	rjmp	.+8      	; 0x12dc <DIO_vdSetPortValue+0xe2>
					break;
				case PortD:
					SET_BYTE(PORTD_REGISTER , PortValue);
    12d4:	e2 e3       	ldi	r30, 0x32	; 50
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	8a 81       	ldd	r24, Y+2	; 0x02
    12da:	80 83       	st	Z, r24
			}
		}
	}
	else
	{}
}
    12dc:	26 96       	adiw	r28, 0x06	; 6
    12de:	0f b6       	in	r0, 0x3f	; 63
    12e0:	f8 94       	cli
    12e2:	de bf       	out	0x3e, r29	; 62
    12e4:	0f be       	out	0x3f, r0	; 63
    12e6:	cd bf       	out	0x3d, r28	; 61
    12e8:	cf 91       	pop	r28
    12ea:	df 91       	pop	r29
    12ec:	08 95       	ret

000012ee <DIO_vdSetPintDirection>:

//Set pin direction
void DIO_vdSetPintDirection(u8 PortID, u8 PinID, u8 PinDirection)
{
    12ee:	df 93       	push	r29
    12f0:	cf 93       	push	r28
    12f2:	cd b7       	in	r28, 0x3d	; 61
    12f4:	de b7       	in	r29, 0x3e	; 62
    12f6:	27 97       	sbiw	r28, 0x07	; 7
    12f8:	0f b6       	in	r0, 0x3f	; 63
    12fa:	f8 94       	cli
    12fc:	de bf       	out	0x3e, r29	; 62
    12fe:	0f be       	out	0x3f, r0	; 63
    1300:	cd bf       	out	0x3d, r28	; 61
    1302:	89 83       	std	Y+1, r24	; 0x01
    1304:	6a 83       	std	Y+2, r22	; 0x02
    1306:	4b 83       	std	Y+3, r20	; 0x03
	if((PortID >= 0 && PortID <= 3) && (PinID >= 0 && PinID <= 7))
    1308:	89 81       	ldd	r24, Y+1	; 0x01
    130a:	84 30       	cpi	r24, 0x04	; 4
    130c:	08 f0       	brcs	.+2      	; 0x1310 <DIO_vdSetPintDirection+0x22>
    130e:	ee c0       	rjmp	.+476    	; 0x14ec <DIO_vdSetPintDirection+0x1fe>
    1310:	8a 81       	ldd	r24, Y+2	; 0x02
    1312:	88 30       	cpi	r24, 0x08	; 8
    1314:	08 f0       	brcs	.+2      	; 0x1318 <DIO_vdSetPintDirection+0x2a>
    1316:	ea c0       	rjmp	.+468    	; 0x14ec <DIO_vdSetPintDirection+0x1fe>
	{
		if(PinDirection == PIN_OUTPUT)
    1318:	8b 81       	ldd	r24, Y+3	; 0x03
    131a:	81 30       	cpi	r24, 0x01	; 1
    131c:	09 f0       	breq	.+2      	; 0x1320 <DIO_vdSetPintDirection+0x32>
    131e:	6f c0       	rjmp	.+222    	; 0x13fe <DIO_vdSetPintDirection+0x110>
		{
			switch(PortID)
    1320:	89 81       	ldd	r24, Y+1	; 0x01
    1322:	28 2f       	mov	r18, r24
    1324:	30 e0       	ldi	r19, 0x00	; 0
    1326:	3f 83       	std	Y+7, r19	; 0x07
    1328:	2e 83       	std	Y+6, r18	; 0x06
    132a:	8e 81       	ldd	r24, Y+6	; 0x06
    132c:	9f 81       	ldd	r25, Y+7	; 0x07
    132e:	81 30       	cpi	r24, 0x01	; 1
    1330:	91 05       	cpc	r25, r1
    1332:	49 f1       	breq	.+82     	; 0x1386 <DIO_vdSetPintDirection+0x98>
    1334:	2e 81       	ldd	r18, Y+6	; 0x06
    1336:	3f 81       	ldd	r19, Y+7	; 0x07
    1338:	22 30       	cpi	r18, 0x02	; 2
    133a:	31 05       	cpc	r19, r1
    133c:	2c f4       	brge	.+10     	; 0x1348 <DIO_vdSetPintDirection+0x5a>
    133e:	8e 81       	ldd	r24, Y+6	; 0x06
    1340:	9f 81       	ldd	r25, Y+7	; 0x07
    1342:	00 97       	sbiw	r24, 0x00	; 0
    1344:	61 f0       	breq	.+24     	; 0x135e <DIO_vdSetPintDirection+0x70>
    1346:	d2 c0       	rjmp	.+420    	; 0x14ec <DIO_vdSetPintDirection+0x1fe>
    1348:	2e 81       	ldd	r18, Y+6	; 0x06
    134a:	3f 81       	ldd	r19, Y+7	; 0x07
    134c:	22 30       	cpi	r18, 0x02	; 2
    134e:	31 05       	cpc	r19, r1
    1350:	71 f1       	breq	.+92     	; 0x13ae <DIO_vdSetPintDirection+0xc0>
    1352:	8e 81       	ldd	r24, Y+6	; 0x06
    1354:	9f 81       	ldd	r25, Y+7	; 0x07
    1356:	83 30       	cpi	r24, 0x03	; 3
    1358:	91 05       	cpc	r25, r1
    135a:	e9 f1       	breq	.+122    	; 0x13d6 <DIO_vdSetPintDirection+0xe8>
    135c:	c7 c0       	rjmp	.+398    	; 0x14ec <DIO_vdSetPintDirection+0x1fe>
			{
				case PortA:
					SET_BIT(DDRA_REGISTER , PinID);
    135e:	aa e3       	ldi	r26, 0x3A	; 58
    1360:	b0 e0       	ldi	r27, 0x00	; 0
    1362:	ea e3       	ldi	r30, 0x3A	; 58
    1364:	f0 e0       	ldi	r31, 0x00	; 0
    1366:	80 81       	ld	r24, Z
    1368:	48 2f       	mov	r20, r24
    136a:	8a 81       	ldd	r24, Y+2	; 0x02
    136c:	28 2f       	mov	r18, r24
    136e:	30 e0       	ldi	r19, 0x00	; 0
    1370:	81 e0       	ldi	r24, 0x01	; 1
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	02 2e       	mov	r0, r18
    1376:	02 c0       	rjmp	.+4      	; 0x137c <DIO_vdSetPintDirection+0x8e>
    1378:	88 0f       	add	r24, r24
    137a:	99 1f       	adc	r25, r25
    137c:	0a 94       	dec	r0
    137e:	e2 f7       	brpl	.-8      	; 0x1378 <DIO_vdSetPintDirection+0x8a>
    1380:	84 2b       	or	r24, r20
    1382:	8c 93       	st	X, r24
    1384:	b3 c0       	rjmp	.+358    	; 0x14ec <DIO_vdSetPintDirection+0x1fe>
					break;
				case PortB:
					SET_BIT(DDRB_REGISTER , PinID);
    1386:	a7 e3       	ldi	r26, 0x37	; 55
    1388:	b0 e0       	ldi	r27, 0x00	; 0
    138a:	e7 e3       	ldi	r30, 0x37	; 55
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	80 81       	ld	r24, Z
    1390:	48 2f       	mov	r20, r24
    1392:	8a 81       	ldd	r24, Y+2	; 0x02
    1394:	28 2f       	mov	r18, r24
    1396:	30 e0       	ldi	r19, 0x00	; 0
    1398:	81 e0       	ldi	r24, 0x01	; 1
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	02 2e       	mov	r0, r18
    139e:	02 c0       	rjmp	.+4      	; 0x13a4 <DIO_vdSetPintDirection+0xb6>
    13a0:	88 0f       	add	r24, r24
    13a2:	99 1f       	adc	r25, r25
    13a4:	0a 94       	dec	r0
    13a6:	e2 f7       	brpl	.-8      	; 0x13a0 <DIO_vdSetPintDirection+0xb2>
    13a8:	84 2b       	or	r24, r20
    13aa:	8c 93       	st	X, r24
    13ac:	9f c0       	rjmp	.+318    	; 0x14ec <DIO_vdSetPintDirection+0x1fe>
					break;
				case PortC:
					SET_BIT(DDRC_REGISTER , PinID);
    13ae:	a4 e3       	ldi	r26, 0x34	; 52
    13b0:	b0 e0       	ldi	r27, 0x00	; 0
    13b2:	e4 e3       	ldi	r30, 0x34	; 52
    13b4:	f0 e0       	ldi	r31, 0x00	; 0
    13b6:	80 81       	ld	r24, Z
    13b8:	48 2f       	mov	r20, r24
    13ba:	8a 81       	ldd	r24, Y+2	; 0x02
    13bc:	28 2f       	mov	r18, r24
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	81 e0       	ldi	r24, 0x01	; 1
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	02 2e       	mov	r0, r18
    13c6:	02 c0       	rjmp	.+4      	; 0x13cc <DIO_vdSetPintDirection+0xde>
    13c8:	88 0f       	add	r24, r24
    13ca:	99 1f       	adc	r25, r25
    13cc:	0a 94       	dec	r0
    13ce:	e2 f7       	brpl	.-8      	; 0x13c8 <DIO_vdSetPintDirection+0xda>
    13d0:	84 2b       	or	r24, r20
    13d2:	8c 93       	st	X, r24
    13d4:	8b c0       	rjmp	.+278    	; 0x14ec <DIO_vdSetPintDirection+0x1fe>
					break;
				case PortD:
					SET_BIT(DDRD_REGISTER , PinID);
    13d6:	a1 e3       	ldi	r26, 0x31	; 49
    13d8:	b0 e0       	ldi	r27, 0x00	; 0
    13da:	e1 e3       	ldi	r30, 0x31	; 49
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	80 81       	ld	r24, Z
    13e0:	48 2f       	mov	r20, r24
    13e2:	8a 81       	ldd	r24, Y+2	; 0x02
    13e4:	28 2f       	mov	r18, r24
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	81 e0       	ldi	r24, 0x01	; 1
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	02 2e       	mov	r0, r18
    13ee:	02 c0       	rjmp	.+4      	; 0x13f4 <DIO_vdSetPintDirection+0x106>
    13f0:	88 0f       	add	r24, r24
    13f2:	99 1f       	adc	r25, r25
    13f4:	0a 94       	dec	r0
    13f6:	e2 f7       	brpl	.-8      	; 0x13f0 <DIO_vdSetPintDirection+0x102>
    13f8:	84 2b       	or	r24, r20
    13fa:	8c 93       	st	X, r24
    13fc:	77 c0       	rjmp	.+238    	; 0x14ec <DIO_vdSetPintDirection+0x1fe>
					break;
			}
		}
		else if(PinDirection == PIN_INPUT)
    13fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1400:	88 23       	and	r24, r24
    1402:	09 f0       	breq	.+2      	; 0x1406 <DIO_vdSetPintDirection+0x118>
    1404:	73 c0       	rjmp	.+230    	; 0x14ec <DIO_vdSetPintDirection+0x1fe>
		{
			switch(PortID)
    1406:	89 81       	ldd	r24, Y+1	; 0x01
    1408:	28 2f       	mov	r18, r24
    140a:	30 e0       	ldi	r19, 0x00	; 0
    140c:	3d 83       	std	Y+5, r19	; 0x05
    140e:	2c 83       	std	Y+4, r18	; 0x04
    1410:	8c 81       	ldd	r24, Y+4	; 0x04
    1412:	9d 81       	ldd	r25, Y+5	; 0x05
    1414:	81 30       	cpi	r24, 0x01	; 1
    1416:	91 05       	cpc	r25, r1
    1418:	59 f1       	breq	.+86     	; 0x1470 <DIO_vdSetPintDirection+0x182>
    141a:	2c 81       	ldd	r18, Y+4	; 0x04
    141c:	3d 81       	ldd	r19, Y+5	; 0x05
    141e:	22 30       	cpi	r18, 0x02	; 2
    1420:	31 05       	cpc	r19, r1
    1422:	2c f4       	brge	.+10     	; 0x142e <DIO_vdSetPintDirection+0x140>
    1424:	8c 81       	ldd	r24, Y+4	; 0x04
    1426:	9d 81       	ldd	r25, Y+5	; 0x05
    1428:	00 97       	sbiw	r24, 0x00	; 0
    142a:	69 f0       	breq	.+26     	; 0x1446 <DIO_vdSetPintDirection+0x158>
    142c:	5f c0       	rjmp	.+190    	; 0x14ec <DIO_vdSetPintDirection+0x1fe>
    142e:	2c 81       	ldd	r18, Y+4	; 0x04
    1430:	3d 81       	ldd	r19, Y+5	; 0x05
    1432:	22 30       	cpi	r18, 0x02	; 2
    1434:	31 05       	cpc	r19, r1
    1436:	89 f1       	breq	.+98     	; 0x149a <DIO_vdSetPintDirection+0x1ac>
    1438:	8c 81       	ldd	r24, Y+4	; 0x04
    143a:	9d 81       	ldd	r25, Y+5	; 0x05
    143c:	83 30       	cpi	r24, 0x03	; 3
    143e:	91 05       	cpc	r25, r1
    1440:	09 f4       	brne	.+2      	; 0x1444 <DIO_vdSetPintDirection+0x156>
    1442:	40 c0       	rjmp	.+128    	; 0x14c4 <DIO_vdSetPintDirection+0x1d6>
    1444:	53 c0       	rjmp	.+166    	; 0x14ec <DIO_vdSetPintDirection+0x1fe>
			{
				case PortA:
					CLR_BIT(DDRA_REGISTER , PinID);
    1446:	aa e3       	ldi	r26, 0x3A	; 58
    1448:	b0 e0       	ldi	r27, 0x00	; 0
    144a:	ea e3       	ldi	r30, 0x3A	; 58
    144c:	f0 e0       	ldi	r31, 0x00	; 0
    144e:	80 81       	ld	r24, Z
    1450:	48 2f       	mov	r20, r24
    1452:	8a 81       	ldd	r24, Y+2	; 0x02
    1454:	28 2f       	mov	r18, r24
    1456:	30 e0       	ldi	r19, 0x00	; 0
    1458:	81 e0       	ldi	r24, 0x01	; 1
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	02 2e       	mov	r0, r18
    145e:	02 c0       	rjmp	.+4      	; 0x1464 <DIO_vdSetPintDirection+0x176>
    1460:	88 0f       	add	r24, r24
    1462:	99 1f       	adc	r25, r25
    1464:	0a 94       	dec	r0
    1466:	e2 f7       	brpl	.-8      	; 0x1460 <DIO_vdSetPintDirection+0x172>
    1468:	80 95       	com	r24
    146a:	84 23       	and	r24, r20
    146c:	8c 93       	st	X, r24
    146e:	3e c0       	rjmp	.+124    	; 0x14ec <DIO_vdSetPintDirection+0x1fe>
					break;
				case PortB:
					CLR_BIT(DDRB_REGISTER , PinID);
    1470:	a7 e3       	ldi	r26, 0x37	; 55
    1472:	b0 e0       	ldi	r27, 0x00	; 0
    1474:	e7 e3       	ldi	r30, 0x37	; 55
    1476:	f0 e0       	ldi	r31, 0x00	; 0
    1478:	80 81       	ld	r24, Z
    147a:	48 2f       	mov	r20, r24
    147c:	8a 81       	ldd	r24, Y+2	; 0x02
    147e:	28 2f       	mov	r18, r24
    1480:	30 e0       	ldi	r19, 0x00	; 0
    1482:	81 e0       	ldi	r24, 0x01	; 1
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	02 2e       	mov	r0, r18
    1488:	02 c0       	rjmp	.+4      	; 0x148e <DIO_vdSetPintDirection+0x1a0>
    148a:	88 0f       	add	r24, r24
    148c:	99 1f       	adc	r25, r25
    148e:	0a 94       	dec	r0
    1490:	e2 f7       	brpl	.-8      	; 0x148a <DIO_vdSetPintDirection+0x19c>
    1492:	80 95       	com	r24
    1494:	84 23       	and	r24, r20
    1496:	8c 93       	st	X, r24
    1498:	29 c0       	rjmp	.+82     	; 0x14ec <DIO_vdSetPintDirection+0x1fe>
					break;
				case PortC:
					CLR_BIT(DDRC_REGISTER , PinID);
    149a:	a4 e3       	ldi	r26, 0x34	; 52
    149c:	b0 e0       	ldi	r27, 0x00	; 0
    149e:	e4 e3       	ldi	r30, 0x34	; 52
    14a0:	f0 e0       	ldi	r31, 0x00	; 0
    14a2:	80 81       	ld	r24, Z
    14a4:	48 2f       	mov	r20, r24
    14a6:	8a 81       	ldd	r24, Y+2	; 0x02
    14a8:	28 2f       	mov	r18, r24
    14aa:	30 e0       	ldi	r19, 0x00	; 0
    14ac:	81 e0       	ldi	r24, 0x01	; 1
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	02 2e       	mov	r0, r18
    14b2:	02 c0       	rjmp	.+4      	; 0x14b8 <DIO_vdSetPintDirection+0x1ca>
    14b4:	88 0f       	add	r24, r24
    14b6:	99 1f       	adc	r25, r25
    14b8:	0a 94       	dec	r0
    14ba:	e2 f7       	brpl	.-8      	; 0x14b4 <DIO_vdSetPintDirection+0x1c6>
    14bc:	80 95       	com	r24
    14be:	84 23       	and	r24, r20
    14c0:	8c 93       	st	X, r24
    14c2:	14 c0       	rjmp	.+40     	; 0x14ec <DIO_vdSetPintDirection+0x1fe>
					break;
				case PortD:
					CLR_BIT(DDRD_REGISTER , PinID);
    14c4:	a1 e3       	ldi	r26, 0x31	; 49
    14c6:	b0 e0       	ldi	r27, 0x00	; 0
    14c8:	e1 e3       	ldi	r30, 0x31	; 49
    14ca:	f0 e0       	ldi	r31, 0x00	; 0
    14cc:	80 81       	ld	r24, Z
    14ce:	48 2f       	mov	r20, r24
    14d0:	8a 81       	ldd	r24, Y+2	; 0x02
    14d2:	28 2f       	mov	r18, r24
    14d4:	30 e0       	ldi	r19, 0x00	; 0
    14d6:	81 e0       	ldi	r24, 0x01	; 1
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	02 2e       	mov	r0, r18
    14dc:	02 c0       	rjmp	.+4      	; 0x14e2 <DIO_vdSetPintDirection+0x1f4>
    14de:	88 0f       	add	r24, r24
    14e0:	99 1f       	adc	r25, r25
    14e2:	0a 94       	dec	r0
    14e4:	e2 f7       	brpl	.-8      	; 0x14de <DIO_vdSetPintDirection+0x1f0>
    14e6:	80 95       	com	r24
    14e8:	84 23       	and	r24, r20
    14ea:	8c 93       	st	X, r24
			}
		}

	}
	else {}
}
    14ec:	27 96       	adiw	r28, 0x07	; 7
    14ee:	0f b6       	in	r0, 0x3f	; 63
    14f0:	f8 94       	cli
    14f2:	de bf       	out	0x3e, r29	; 62
    14f4:	0f be       	out	0x3f, r0	; 63
    14f6:	cd bf       	out	0x3d, r28	; 61
    14f8:	cf 91       	pop	r28
    14fa:	df 91       	pop	r29
    14fc:	08 95       	ret

000014fe <DIO_vdSetPinValue>:


//Set Pin value
void DIO_vdSetPinValue(u8 PortID , u8 PinID ,u8 PinValue )
{
    14fe:	df 93       	push	r29
    1500:	cf 93       	push	r28
    1502:	cd b7       	in	r28, 0x3d	; 61
    1504:	de b7       	in	r29, 0x3e	; 62
    1506:	27 97       	sbiw	r28, 0x07	; 7
    1508:	0f b6       	in	r0, 0x3f	; 63
    150a:	f8 94       	cli
    150c:	de bf       	out	0x3e, r29	; 62
    150e:	0f be       	out	0x3f, r0	; 63
    1510:	cd bf       	out	0x3d, r28	; 61
    1512:	89 83       	std	Y+1, r24	; 0x01
    1514:	6a 83       	std	Y+2, r22	; 0x02
    1516:	4b 83       	std	Y+3, r20	; 0x03
	if((PortID >= 0 && PortID <= 3) && (PinID >= 0 && PinID <= 7))
    1518:	89 81       	ldd	r24, Y+1	; 0x01
    151a:	84 30       	cpi	r24, 0x04	; 4
    151c:	08 f0       	brcs	.+2      	; 0x1520 <DIO_vdSetPinValue+0x22>
    151e:	ee c0       	rjmp	.+476    	; 0x16fc <DIO_vdSetPinValue+0x1fe>
    1520:	8a 81       	ldd	r24, Y+2	; 0x02
    1522:	88 30       	cpi	r24, 0x08	; 8
    1524:	08 f0       	brcs	.+2      	; 0x1528 <DIO_vdSetPinValue+0x2a>
    1526:	ea c0       	rjmp	.+468    	; 0x16fc <DIO_vdSetPinValue+0x1fe>
	{
		if(PinValue==PIN_High)
    1528:	8b 81       	ldd	r24, Y+3	; 0x03
    152a:	81 30       	cpi	r24, 0x01	; 1
    152c:	09 f0       	breq	.+2      	; 0x1530 <DIO_vdSetPinValue+0x32>
    152e:	6f c0       	rjmp	.+222    	; 0x160e <DIO_vdSetPinValue+0x110>
		{
			switch(PortID)
    1530:	89 81       	ldd	r24, Y+1	; 0x01
    1532:	28 2f       	mov	r18, r24
    1534:	30 e0       	ldi	r19, 0x00	; 0
    1536:	3f 83       	std	Y+7, r19	; 0x07
    1538:	2e 83       	std	Y+6, r18	; 0x06
    153a:	8e 81       	ldd	r24, Y+6	; 0x06
    153c:	9f 81       	ldd	r25, Y+7	; 0x07
    153e:	81 30       	cpi	r24, 0x01	; 1
    1540:	91 05       	cpc	r25, r1
    1542:	49 f1       	breq	.+82     	; 0x1596 <DIO_vdSetPinValue+0x98>
    1544:	2e 81       	ldd	r18, Y+6	; 0x06
    1546:	3f 81       	ldd	r19, Y+7	; 0x07
    1548:	22 30       	cpi	r18, 0x02	; 2
    154a:	31 05       	cpc	r19, r1
    154c:	2c f4       	brge	.+10     	; 0x1558 <DIO_vdSetPinValue+0x5a>
    154e:	8e 81       	ldd	r24, Y+6	; 0x06
    1550:	9f 81       	ldd	r25, Y+7	; 0x07
    1552:	00 97       	sbiw	r24, 0x00	; 0
    1554:	61 f0       	breq	.+24     	; 0x156e <DIO_vdSetPinValue+0x70>
    1556:	d2 c0       	rjmp	.+420    	; 0x16fc <DIO_vdSetPinValue+0x1fe>
    1558:	2e 81       	ldd	r18, Y+6	; 0x06
    155a:	3f 81       	ldd	r19, Y+7	; 0x07
    155c:	22 30       	cpi	r18, 0x02	; 2
    155e:	31 05       	cpc	r19, r1
    1560:	71 f1       	breq	.+92     	; 0x15be <DIO_vdSetPinValue+0xc0>
    1562:	8e 81       	ldd	r24, Y+6	; 0x06
    1564:	9f 81       	ldd	r25, Y+7	; 0x07
    1566:	83 30       	cpi	r24, 0x03	; 3
    1568:	91 05       	cpc	r25, r1
    156a:	e9 f1       	breq	.+122    	; 0x15e6 <DIO_vdSetPinValue+0xe8>
    156c:	c7 c0       	rjmp	.+398    	; 0x16fc <DIO_vdSetPinValue+0x1fe>
			{
				case PortA:
					SET_BIT(PORTA_REGISTER , PinID);
    156e:	ab e3       	ldi	r26, 0x3B	; 59
    1570:	b0 e0       	ldi	r27, 0x00	; 0
    1572:	eb e3       	ldi	r30, 0x3B	; 59
    1574:	f0 e0       	ldi	r31, 0x00	; 0
    1576:	80 81       	ld	r24, Z
    1578:	48 2f       	mov	r20, r24
    157a:	8a 81       	ldd	r24, Y+2	; 0x02
    157c:	28 2f       	mov	r18, r24
    157e:	30 e0       	ldi	r19, 0x00	; 0
    1580:	81 e0       	ldi	r24, 0x01	; 1
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	02 2e       	mov	r0, r18
    1586:	02 c0       	rjmp	.+4      	; 0x158c <DIO_vdSetPinValue+0x8e>
    1588:	88 0f       	add	r24, r24
    158a:	99 1f       	adc	r25, r25
    158c:	0a 94       	dec	r0
    158e:	e2 f7       	brpl	.-8      	; 0x1588 <DIO_vdSetPinValue+0x8a>
    1590:	84 2b       	or	r24, r20
    1592:	8c 93       	st	X, r24
    1594:	b3 c0       	rjmp	.+358    	; 0x16fc <DIO_vdSetPinValue+0x1fe>
					break;
				case PortB:
					SET_BIT(PORTB_REGISTER , PinID);
    1596:	a8 e3       	ldi	r26, 0x38	; 56
    1598:	b0 e0       	ldi	r27, 0x00	; 0
    159a:	e8 e3       	ldi	r30, 0x38	; 56
    159c:	f0 e0       	ldi	r31, 0x00	; 0
    159e:	80 81       	ld	r24, Z
    15a0:	48 2f       	mov	r20, r24
    15a2:	8a 81       	ldd	r24, Y+2	; 0x02
    15a4:	28 2f       	mov	r18, r24
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	81 e0       	ldi	r24, 0x01	; 1
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	02 2e       	mov	r0, r18
    15ae:	02 c0       	rjmp	.+4      	; 0x15b4 <DIO_vdSetPinValue+0xb6>
    15b0:	88 0f       	add	r24, r24
    15b2:	99 1f       	adc	r25, r25
    15b4:	0a 94       	dec	r0
    15b6:	e2 f7       	brpl	.-8      	; 0x15b0 <DIO_vdSetPinValue+0xb2>
    15b8:	84 2b       	or	r24, r20
    15ba:	8c 93       	st	X, r24
    15bc:	9f c0       	rjmp	.+318    	; 0x16fc <DIO_vdSetPinValue+0x1fe>
					break;
				case PortC:
					SET_BIT(PORTC_REGISTER , PinID);
    15be:	a5 e3       	ldi	r26, 0x35	; 53
    15c0:	b0 e0       	ldi	r27, 0x00	; 0
    15c2:	e5 e3       	ldi	r30, 0x35	; 53
    15c4:	f0 e0       	ldi	r31, 0x00	; 0
    15c6:	80 81       	ld	r24, Z
    15c8:	48 2f       	mov	r20, r24
    15ca:	8a 81       	ldd	r24, Y+2	; 0x02
    15cc:	28 2f       	mov	r18, r24
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	81 e0       	ldi	r24, 0x01	; 1
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	02 2e       	mov	r0, r18
    15d6:	02 c0       	rjmp	.+4      	; 0x15dc <DIO_vdSetPinValue+0xde>
    15d8:	88 0f       	add	r24, r24
    15da:	99 1f       	adc	r25, r25
    15dc:	0a 94       	dec	r0
    15de:	e2 f7       	brpl	.-8      	; 0x15d8 <DIO_vdSetPinValue+0xda>
    15e0:	84 2b       	or	r24, r20
    15e2:	8c 93       	st	X, r24
    15e4:	8b c0       	rjmp	.+278    	; 0x16fc <DIO_vdSetPinValue+0x1fe>
					break;
				case PortD:
					SET_BIT(PORTD_REGISTER , PinID);
    15e6:	a2 e3       	ldi	r26, 0x32	; 50
    15e8:	b0 e0       	ldi	r27, 0x00	; 0
    15ea:	e2 e3       	ldi	r30, 0x32	; 50
    15ec:	f0 e0       	ldi	r31, 0x00	; 0
    15ee:	80 81       	ld	r24, Z
    15f0:	48 2f       	mov	r20, r24
    15f2:	8a 81       	ldd	r24, Y+2	; 0x02
    15f4:	28 2f       	mov	r18, r24
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	81 e0       	ldi	r24, 0x01	; 1
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	02 2e       	mov	r0, r18
    15fe:	02 c0       	rjmp	.+4      	; 0x1604 <DIO_vdSetPinValue+0x106>
    1600:	88 0f       	add	r24, r24
    1602:	99 1f       	adc	r25, r25
    1604:	0a 94       	dec	r0
    1606:	e2 f7       	brpl	.-8      	; 0x1600 <DIO_vdSetPinValue+0x102>
    1608:	84 2b       	or	r24, r20
    160a:	8c 93       	st	X, r24
    160c:	77 c0       	rjmp	.+238    	; 0x16fc <DIO_vdSetPinValue+0x1fe>
					break;
			}
		}
		else if(PinValue==PIN_LOW)
    160e:	8b 81       	ldd	r24, Y+3	; 0x03
    1610:	88 23       	and	r24, r24
    1612:	09 f0       	breq	.+2      	; 0x1616 <DIO_vdSetPinValue+0x118>
    1614:	73 c0       	rjmp	.+230    	; 0x16fc <DIO_vdSetPinValue+0x1fe>
		{
			switch(PortID)
    1616:	89 81       	ldd	r24, Y+1	; 0x01
    1618:	28 2f       	mov	r18, r24
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	3d 83       	std	Y+5, r19	; 0x05
    161e:	2c 83       	std	Y+4, r18	; 0x04
    1620:	8c 81       	ldd	r24, Y+4	; 0x04
    1622:	9d 81       	ldd	r25, Y+5	; 0x05
    1624:	81 30       	cpi	r24, 0x01	; 1
    1626:	91 05       	cpc	r25, r1
    1628:	59 f1       	breq	.+86     	; 0x1680 <DIO_vdSetPinValue+0x182>
    162a:	2c 81       	ldd	r18, Y+4	; 0x04
    162c:	3d 81       	ldd	r19, Y+5	; 0x05
    162e:	22 30       	cpi	r18, 0x02	; 2
    1630:	31 05       	cpc	r19, r1
    1632:	2c f4       	brge	.+10     	; 0x163e <DIO_vdSetPinValue+0x140>
    1634:	8c 81       	ldd	r24, Y+4	; 0x04
    1636:	9d 81       	ldd	r25, Y+5	; 0x05
    1638:	00 97       	sbiw	r24, 0x00	; 0
    163a:	69 f0       	breq	.+26     	; 0x1656 <DIO_vdSetPinValue+0x158>
    163c:	5f c0       	rjmp	.+190    	; 0x16fc <DIO_vdSetPinValue+0x1fe>
    163e:	2c 81       	ldd	r18, Y+4	; 0x04
    1640:	3d 81       	ldd	r19, Y+5	; 0x05
    1642:	22 30       	cpi	r18, 0x02	; 2
    1644:	31 05       	cpc	r19, r1
    1646:	89 f1       	breq	.+98     	; 0x16aa <DIO_vdSetPinValue+0x1ac>
    1648:	8c 81       	ldd	r24, Y+4	; 0x04
    164a:	9d 81       	ldd	r25, Y+5	; 0x05
    164c:	83 30       	cpi	r24, 0x03	; 3
    164e:	91 05       	cpc	r25, r1
    1650:	09 f4       	brne	.+2      	; 0x1654 <DIO_vdSetPinValue+0x156>
    1652:	40 c0       	rjmp	.+128    	; 0x16d4 <DIO_vdSetPinValue+0x1d6>
    1654:	53 c0       	rjmp	.+166    	; 0x16fc <DIO_vdSetPinValue+0x1fe>
			{
				case PortA:
					CLR_BIT(PORTA_REGISTER , PinID);
    1656:	ab e3       	ldi	r26, 0x3B	; 59
    1658:	b0 e0       	ldi	r27, 0x00	; 0
    165a:	eb e3       	ldi	r30, 0x3B	; 59
    165c:	f0 e0       	ldi	r31, 0x00	; 0
    165e:	80 81       	ld	r24, Z
    1660:	48 2f       	mov	r20, r24
    1662:	8a 81       	ldd	r24, Y+2	; 0x02
    1664:	28 2f       	mov	r18, r24
    1666:	30 e0       	ldi	r19, 0x00	; 0
    1668:	81 e0       	ldi	r24, 0x01	; 1
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	02 2e       	mov	r0, r18
    166e:	02 c0       	rjmp	.+4      	; 0x1674 <DIO_vdSetPinValue+0x176>
    1670:	88 0f       	add	r24, r24
    1672:	99 1f       	adc	r25, r25
    1674:	0a 94       	dec	r0
    1676:	e2 f7       	brpl	.-8      	; 0x1670 <DIO_vdSetPinValue+0x172>
    1678:	80 95       	com	r24
    167a:	84 23       	and	r24, r20
    167c:	8c 93       	st	X, r24
    167e:	3e c0       	rjmp	.+124    	; 0x16fc <DIO_vdSetPinValue+0x1fe>
					break;
				case PortB:
					CLR_BIT(PORTB_REGISTER , PinID);
    1680:	a8 e3       	ldi	r26, 0x38	; 56
    1682:	b0 e0       	ldi	r27, 0x00	; 0
    1684:	e8 e3       	ldi	r30, 0x38	; 56
    1686:	f0 e0       	ldi	r31, 0x00	; 0
    1688:	80 81       	ld	r24, Z
    168a:	48 2f       	mov	r20, r24
    168c:	8a 81       	ldd	r24, Y+2	; 0x02
    168e:	28 2f       	mov	r18, r24
    1690:	30 e0       	ldi	r19, 0x00	; 0
    1692:	81 e0       	ldi	r24, 0x01	; 1
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	02 2e       	mov	r0, r18
    1698:	02 c0       	rjmp	.+4      	; 0x169e <DIO_vdSetPinValue+0x1a0>
    169a:	88 0f       	add	r24, r24
    169c:	99 1f       	adc	r25, r25
    169e:	0a 94       	dec	r0
    16a0:	e2 f7       	brpl	.-8      	; 0x169a <DIO_vdSetPinValue+0x19c>
    16a2:	80 95       	com	r24
    16a4:	84 23       	and	r24, r20
    16a6:	8c 93       	st	X, r24
    16a8:	29 c0       	rjmp	.+82     	; 0x16fc <DIO_vdSetPinValue+0x1fe>
					break;
				case PortC:
					CLR_BIT(PORTC_REGISTER , PinID);
    16aa:	a5 e3       	ldi	r26, 0x35	; 53
    16ac:	b0 e0       	ldi	r27, 0x00	; 0
    16ae:	e5 e3       	ldi	r30, 0x35	; 53
    16b0:	f0 e0       	ldi	r31, 0x00	; 0
    16b2:	80 81       	ld	r24, Z
    16b4:	48 2f       	mov	r20, r24
    16b6:	8a 81       	ldd	r24, Y+2	; 0x02
    16b8:	28 2f       	mov	r18, r24
    16ba:	30 e0       	ldi	r19, 0x00	; 0
    16bc:	81 e0       	ldi	r24, 0x01	; 1
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	02 2e       	mov	r0, r18
    16c2:	02 c0       	rjmp	.+4      	; 0x16c8 <DIO_vdSetPinValue+0x1ca>
    16c4:	88 0f       	add	r24, r24
    16c6:	99 1f       	adc	r25, r25
    16c8:	0a 94       	dec	r0
    16ca:	e2 f7       	brpl	.-8      	; 0x16c4 <DIO_vdSetPinValue+0x1c6>
    16cc:	80 95       	com	r24
    16ce:	84 23       	and	r24, r20
    16d0:	8c 93       	st	X, r24
    16d2:	14 c0       	rjmp	.+40     	; 0x16fc <DIO_vdSetPinValue+0x1fe>
					break;
				case PortD:
					CLR_BIT(PORTD_REGISTER , PinID);
    16d4:	a2 e3       	ldi	r26, 0x32	; 50
    16d6:	b0 e0       	ldi	r27, 0x00	; 0
    16d8:	e2 e3       	ldi	r30, 0x32	; 50
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	80 81       	ld	r24, Z
    16de:	48 2f       	mov	r20, r24
    16e0:	8a 81       	ldd	r24, Y+2	; 0x02
    16e2:	28 2f       	mov	r18, r24
    16e4:	30 e0       	ldi	r19, 0x00	; 0
    16e6:	81 e0       	ldi	r24, 0x01	; 1
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	02 2e       	mov	r0, r18
    16ec:	02 c0       	rjmp	.+4      	; 0x16f2 <DIO_vdSetPinValue+0x1f4>
    16ee:	88 0f       	add	r24, r24
    16f0:	99 1f       	adc	r25, r25
    16f2:	0a 94       	dec	r0
    16f4:	e2 f7       	brpl	.-8      	; 0x16ee <DIO_vdSetPinValue+0x1f0>
    16f6:	80 95       	com	r24
    16f8:	84 23       	and	r24, r20
    16fa:	8c 93       	st	X, r24
		}
		else
		{}
	}
	else {}
}
    16fc:	27 96       	adiw	r28, 0x07	; 7
    16fe:	0f b6       	in	r0, 0x3f	; 63
    1700:	f8 94       	cli
    1702:	de bf       	out	0x3e, r29	; 62
    1704:	0f be       	out	0x3f, r0	; 63
    1706:	cd bf       	out	0x3d, r28	; 61
    1708:	cf 91       	pop	r28
    170a:	df 91       	pop	r29
    170c:	08 95       	ret

0000170e <DIO_u8GetPinValue>:

//Get PIN value
u8 DIO_u8GetPinValue(u8 PortID, u8 PinID)
{
    170e:	df 93       	push	r29
    1710:	cf 93       	push	r28
    1712:	00 d0       	rcall	.+0      	; 0x1714 <DIO_u8GetPinValue+0x6>
    1714:	00 d0       	rcall	.+0      	; 0x1716 <DIO_u8GetPinValue+0x8>
    1716:	00 d0       	rcall	.+0      	; 0x1718 <DIO_u8GetPinValue+0xa>
    1718:	cd b7       	in	r28, 0x3d	; 61
    171a:	de b7       	in	r29, 0x3e	; 62
    171c:	89 83       	std	Y+1, r24	; 0x01
    171e:	6a 83       	std	Y+2, r22	; 0x02
	if((PortID >= 0 && PortID <= 3) && (PinID >= 0 && PinID <= 7))
    1720:	89 81       	ldd	r24, Y+1	; 0x01
    1722:	84 30       	cpi	r24, 0x04	; 4
    1724:	08 f0       	brcs	.+2      	; 0x1728 <DIO_u8GetPinValue+0x1a>
    1726:	70 c0       	rjmp	.+224    	; 0x1808 <DIO_u8GetPinValue+0xfa>
    1728:	8a 81       	ldd	r24, Y+2	; 0x02
    172a:	88 30       	cpi	r24, 0x08	; 8
    172c:	08 f0       	brcs	.+2      	; 0x1730 <DIO_u8GetPinValue+0x22>
    172e:	6c c0       	rjmp	.+216    	; 0x1808 <DIO_u8GetPinValue+0xfa>
	{
		switch(PortID)
    1730:	89 81       	ldd	r24, Y+1	; 0x01
    1732:	28 2f       	mov	r18, r24
    1734:	30 e0       	ldi	r19, 0x00	; 0
    1736:	3d 83       	std	Y+5, r19	; 0x05
    1738:	2c 83       	std	Y+4, r18	; 0x04
    173a:	4c 81       	ldd	r20, Y+4	; 0x04
    173c:	5d 81       	ldd	r21, Y+5	; 0x05
    173e:	41 30       	cpi	r20, 0x01	; 1
    1740:	51 05       	cpc	r21, r1
    1742:	49 f1       	breq	.+82     	; 0x1796 <DIO_u8GetPinValue+0x88>
    1744:	8c 81       	ldd	r24, Y+4	; 0x04
    1746:	9d 81       	ldd	r25, Y+5	; 0x05
    1748:	82 30       	cpi	r24, 0x02	; 2
    174a:	91 05       	cpc	r25, r1
    174c:	34 f4       	brge	.+12     	; 0x175a <DIO_u8GetPinValue+0x4c>
    174e:	2c 81       	ldd	r18, Y+4	; 0x04
    1750:	3d 81       	ldd	r19, Y+5	; 0x05
    1752:	21 15       	cp	r18, r1
    1754:	31 05       	cpc	r19, r1
    1756:	61 f0       	breq	.+24     	; 0x1770 <DIO_u8GetPinValue+0x62>
    1758:	57 c0       	rjmp	.+174    	; 0x1808 <DIO_u8GetPinValue+0xfa>
    175a:	4c 81       	ldd	r20, Y+4	; 0x04
    175c:	5d 81       	ldd	r21, Y+5	; 0x05
    175e:	42 30       	cpi	r20, 0x02	; 2
    1760:	51 05       	cpc	r21, r1
    1762:	61 f1       	breq	.+88     	; 0x17bc <DIO_u8GetPinValue+0xae>
    1764:	8c 81       	ldd	r24, Y+4	; 0x04
    1766:	9d 81       	ldd	r25, Y+5	; 0x05
    1768:	83 30       	cpi	r24, 0x03	; 3
    176a:	91 05       	cpc	r25, r1
    176c:	d1 f1       	breq	.+116    	; 0x17e2 <DIO_u8GetPinValue+0xd4>
    176e:	4c c0       	rjmp	.+152    	; 0x1808 <DIO_u8GetPinValue+0xfa>
		{
			case PortA:
				return GET_BIT(PINA_REGISTER , PinID);
    1770:	e9 e3       	ldi	r30, 0x39	; 57
    1772:	f0 e0       	ldi	r31, 0x00	; 0
    1774:	80 81       	ld	r24, Z
    1776:	28 2f       	mov	r18, r24
    1778:	30 e0       	ldi	r19, 0x00	; 0
    177a:	8a 81       	ldd	r24, Y+2	; 0x02
    177c:	88 2f       	mov	r24, r24
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	a9 01       	movw	r20, r18
    1782:	02 c0       	rjmp	.+4      	; 0x1788 <DIO_u8GetPinValue+0x7a>
    1784:	55 95       	asr	r21
    1786:	47 95       	ror	r20
    1788:	8a 95       	dec	r24
    178a:	e2 f7       	brpl	.-8      	; 0x1784 <DIO_u8GetPinValue+0x76>
    178c:	ca 01       	movw	r24, r20
    178e:	58 2f       	mov	r21, r24
    1790:	51 70       	andi	r21, 0x01	; 1
    1792:	5b 83       	std	Y+3, r21	; 0x03
    1794:	3a c0       	rjmp	.+116    	; 0x180a <DIO_u8GetPinValue+0xfc>
			case PortB:
				return GET_BIT(PINB_REGISTER , PinID);
    1796:	e6 e3       	ldi	r30, 0x36	; 54
    1798:	f0 e0       	ldi	r31, 0x00	; 0
    179a:	80 81       	ld	r24, Z
    179c:	28 2f       	mov	r18, r24
    179e:	30 e0       	ldi	r19, 0x00	; 0
    17a0:	8a 81       	ldd	r24, Y+2	; 0x02
    17a2:	88 2f       	mov	r24, r24
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	a9 01       	movw	r20, r18
    17a8:	02 c0       	rjmp	.+4      	; 0x17ae <DIO_u8GetPinValue+0xa0>
    17aa:	55 95       	asr	r21
    17ac:	47 95       	ror	r20
    17ae:	8a 95       	dec	r24
    17b0:	e2 f7       	brpl	.-8      	; 0x17aa <DIO_u8GetPinValue+0x9c>
    17b2:	ca 01       	movw	r24, r20
    17b4:	58 2f       	mov	r21, r24
    17b6:	51 70       	andi	r21, 0x01	; 1
    17b8:	5b 83       	std	Y+3, r21	; 0x03
    17ba:	27 c0       	rjmp	.+78     	; 0x180a <DIO_u8GetPinValue+0xfc>
			case PortC:
				return GET_BIT(PINC_REGISTER , PinID);
    17bc:	e3 e3       	ldi	r30, 0x33	; 51
    17be:	f0 e0       	ldi	r31, 0x00	; 0
    17c0:	80 81       	ld	r24, Z
    17c2:	28 2f       	mov	r18, r24
    17c4:	30 e0       	ldi	r19, 0x00	; 0
    17c6:	8a 81       	ldd	r24, Y+2	; 0x02
    17c8:	88 2f       	mov	r24, r24
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	a9 01       	movw	r20, r18
    17ce:	02 c0       	rjmp	.+4      	; 0x17d4 <DIO_u8GetPinValue+0xc6>
    17d0:	55 95       	asr	r21
    17d2:	47 95       	ror	r20
    17d4:	8a 95       	dec	r24
    17d6:	e2 f7       	brpl	.-8      	; 0x17d0 <DIO_u8GetPinValue+0xc2>
    17d8:	ca 01       	movw	r24, r20
    17da:	58 2f       	mov	r21, r24
    17dc:	51 70       	andi	r21, 0x01	; 1
    17de:	5b 83       	std	Y+3, r21	; 0x03
    17e0:	14 c0       	rjmp	.+40     	; 0x180a <DIO_u8GetPinValue+0xfc>
			case PortD:
				return GET_BIT(PIND_REGISTER , PinID);
    17e2:	e0 e3       	ldi	r30, 0x30	; 48
    17e4:	f0 e0       	ldi	r31, 0x00	; 0
    17e6:	80 81       	ld	r24, Z
    17e8:	28 2f       	mov	r18, r24
    17ea:	30 e0       	ldi	r19, 0x00	; 0
    17ec:	8a 81       	ldd	r24, Y+2	; 0x02
    17ee:	88 2f       	mov	r24, r24
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	a9 01       	movw	r20, r18
    17f4:	02 c0       	rjmp	.+4      	; 0x17fa <DIO_u8GetPinValue+0xec>
    17f6:	55 95       	asr	r21
    17f8:	47 95       	ror	r20
    17fa:	8a 95       	dec	r24
    17fc:	e2 f7       	brpl	.-8      	; 0x17f6 <DIO_u8GetPinValue+0xe8>
    17fe:	ca 01       	movw	r24, r20
    1800:	58 2f       	mov	r21, r24
    1802:	51 70       	andi	r21, 0x01	; 1
    1804:	5b 83       	std	Y+3, r21	; 0x03
    1806:	01 c0       	rjmp	.+2      	; 0x180a <DIO_u8GetPinValue+0xfc>
    1808:	02 c0       	rjmp	.+4      	; 0x180e <DIO_u8GetPinValue+0x100>
		}
	}
	else
	{}
	//return 0;
}
    180a:	8b 81       	ldd	r24, Y+3	; 0x03
    180c:	8e 83       	std	Y+6, r24	; 0x06
    180e:	8e 81       	ldd	r24, Y+6	; 0x06
    1810:	26 96       	adiw	r28, 0x06	; 6
    1812:	0f b6       	in	r0, 0x3f	; 63
    1814:	f8 94       	cli
    1816:	de bf       	out	0x3e, r29	; 62
    1818:	0f be       	out	0x3f, r0	; 63
    181a:	cd bf       	out	0x3d, r28	; 61
    181c:	cf 91       	pop	r28
    181e:	df 91       	pop	r29
    1820:	08 95       	ret

00001822 <DIO_vdTogPortValue>:

//Toggle port value
void DIO_vdTogPortValue(u8 PortID)
{
    1822:	df 93       	push	r29
    1824:	cf 93       	push	r28
    1826:	00 d0       	rcall	.+0      	; 0x1828 <DIO_vdTogPortValue+0x6>
    1828:	0f 92       	push	r0
    182a:	cd b7       	in	r28, 0x3d	; 61
    182c:	de b7       	in	r29, 0x3e	; 62
    182e:	89 83       	std	Y+1, r24	; 0x01
	if(PortID >= 0 && PortID <= 3)
    1830:	89 81       	ldd	r24, Y+1	; 0x01
    1832:	84 30       	cpi	r24, 0x04	; 4
    1834:	08 f0       	brcs	.+2      	; 0x1838 <DIO_vdTogPortValue+0x16>
    1836:	3e c0       	rjmp	.+124    	; 0x18b4 <DIO_vdTogPortValue+0x92>
	{
		switch(PortID)
    1838:	89 81       	ldd	r24, Y+1	; 0x01
    183a:	28 2f       	mov	r18, r24
    183c:	30 e0       	ldi	r19, 0x00	; 0
    183e:	3b 83       	std	Y+3, r19	; 0x03
    1840:	2a 83       	std	Y+2, r18	; 0x02
    1842:	8a 81       	ldd	r24, Y+2	; 0x02
    1844:	9b 81       	ldd	r25, Y+3	; 0x03
    1846:	81 30       	cpi	r24, 0x01	; 1
    1848:	91 05       	cpc	r25, r1
    184a:	e9 f0       	breq	.+58     	; 0x1886 <DIO_vdTogPortValue+0x64>
    184c:	2a 81       	ldd	r18, Y+2	; 0x02
    184e:	3b 81       	ldd	r19, Y+3	; 0x03
    1850:	22 30       	cpi	r18, 0x02	; 2
    1852:	31 05       	cpc	r19, r1
    1854:	2c f4       	brge	.+10     	; 0x1860 <DIO_vdTogPortValue+0x3e>
    1856:	8a 81       	ldd	r24, Y+2	; 0x02
    1858:	9b 81       	ldd	r25, Y+3	; 0x03
    185a:	00 97       	sbiw	r24, 0x00	; 0
    185c:	61 f0       	breq	.+24     	; 0x1876 <DIO_vdTogPortValue+0x54>
    185e:	2a c0       	rjmp	.+84     	; 0x18b4 <DIO_vdTogPortValue+0x92>
    1860:	2a 81       	ldd	r18, Y+2	; 0x02
    1862:	3b 81       	ldd	r19, Y+3	; 0x03
    1864:	22 30       	cpi	r18, 0x02	; 2
    1866:	31 05       	cpc	r19, r1
    1868:	b1 f0       	breq	.+44     	; 0x1896 <DIO_vdTogPortValue+0x74>
    186a:	8a 81       	ldd	r24, Y+2	; 0x02
    186c:	9b 81       	ldd	r25, Y+3	; 0x03
    186e:	83 30       	cpi	r24, 0x03	; 3
    1870:	91 05       	cpc	r25, r1
    1872:	c9 f0       	breq	.+50     	; 0x18a6 <DIO_vdTogPortValue+0x84>
    1874:	1f c0       	rjmp	.+62     	; 0x18b4 <DIO_vdTogPortValue+0x92>
		{
			case PortA:
				TOG_BYTE(PORTA_REGISTER);
    1876:	ab e3       	ldi	r26, 0x3B	; 59
    1878:	b0 e0       	ldi	r27, 0x00	; 0
    187a:	eb e3       	ldi	r30, 0x3B	; 59
    187c:	f0 e0       	ldi	r31, 0x00	; 0
    187e:	80 81       	ld	r24, Z
    1880:	80 95       	com	r24
    1882:	8c 93       	st	X, r24
    1884:	17 c0       	rjmp	.+46     	; 0x18b4 <DIO_vdTogPortValue+0x92>
				break;
			case PortB:
				TOG_BYTE(PORTB_REGISTER);
    1886:	a8 e3       	ldi	r26, 0x38	; 56
    1888:	b0 e0       	ldi	r27, 0x00	; 0
    188a:	e8 e3       	ldi	r30, 0x38	; 56
    188c:	f0 e0       	ldi	r31, 0x00	; 0
    188e:	80 81       	ld	r24, Z
    1890:	80 95       	com	r24
    1892:	8c 93       	st	X, r24
    1894:	0f c0       	rjmp	.+30     	; 0x18b4 <DIO_vdTogPortValue+0x92>
				break;
			case PortC:
				TOG_BYTE(PORTC_REGISTER);
    1896:	a5 e3       	ldi	r26, 0x35	; 53
    1898:	b0 e0       	ldi	r27, 0x00	; 0
    189a:	e5 e3       	ldi	r30, 0x35	; 53
    189c:	f0 e0       	ldi	r31, 0x00	; 0
    189e:	80 81       	ld	r24, Z
    18a0:	80 95       	com	r24
    18a2:	8c 93       	st	X, r24
    18a4:	07 c0       	rjmp	.+14     	; 0x18b4 <DIO_vdTogPortValue+0x92>
				break;
			case PortD:
				TOG_BYTE(PORTD_REGISTER);
    18a6:	a2 e3       	ldi	r26, 0x32	; 50
    18a8:	b0 e0       	ldi	r27, 0x00	; 0
    18aa:	e2 e3       	ldi	r30, 0x32	; 50
    18ac:	f0 e0       	ldi	r31, 0x00	; 0
    18ae:	80 81       	ld	r24, Z
    18b0:	80 95       	com	r24
    18b2:	8c 93       	st	X, r24
				break;
		}
	}
	else{}
}
    18b4:	0f 90       	pop	r0
    18b6:	0f 90       	pop	r0
    18b8:	0f 90       	pop	r0
    18ba:	cf 91       	pop	r28
    18bc:	df 91       	pop	r29
    18be:	08 95       	ret

000018c0 <DIO_vdTogPinValue>:

//Toggle pin value
void DIO_vdTogPinValue(u8 PortID, u8 PinID)
{
    18c0:	df 93       	push	r29
    18c2:	cf 93       	push	r28
    18c4:	00 d0       	rcall	.+0      	; 0x18c6 <DIO_vdTogPinValue+0x6>
    18c6:	00 d0       	rcall	.+0      	; 0x18c8 <DIO_vdTogPinValue+0x8>
    18c8:	cd b7       	in	r28, 0x3d	; 61
    18ca:	de b7       	in	r29, 0x3e	; 62
    18cc:	89 83       	std	Y+1, r24	; 0x01
    18ce:	6a 83       	std	Y+2, r22	; 0x02
	if(PortID >= 0 && PortID <= 3)
    18d0:	89 81       	ldd	r24, Y+1	; 0x01
    18d2:	84 30       	cpi	r24, 0x04	; 4
    18d4:	08 f0       	brcs	.+2      	; 0x18d8 <DIO_vdTogPinValue+0x18>
    18d6:	6e c0       	rjmp	.+220    	; 0x19b4 <DIO_vdTogPinValue+0xf4>
	{
		switch(PortID)
    18d8:	89 81       	ldd	r24, Y+1	; 0x01
    18da:	28 2f       	mov	r18, r24
    18dc:	30 e0       	ldi	r19, 0x00	; 0
    18de:	3c 83       	std	Y+4, r19	; 0x04
    18e0:	2b 83       	std	Y+3, r18	; 0x03
    18e2:	8b 81       	ldd	r24, Y+3	; 0x03
    18e4:	9c 81       	ldd	r25, Y+4	; 0x04
    18e6:	81 30       	cpi	r24, 0x01	; 1
    18e8:	91 05       	cpc	r25, r1
    18ea:	49 f1       	breq	.+82     	; 0x193e <DIO_vdTogPinValue+0x7e>
    18ec:	2b 81       	ldd	r18, Y+3	; 0x03
    18ee:	3c 81       	ldd	r19, Y+4	; 0x04
    18f0:	22 30       	cpi	r18, 0x02	; 2
    18f2:	31 05       	cpc	r19, r1
    18f4:	2c f4       	brge	.+10     	; 0x1900 <DIO_vdTogPinValue+0x40>
    18f6:	8b 81       	ldd	r24, Y+3	; 0x03
    18f8:	9c 81       	ldd	r25, Y+4	; 0x04
    18fa:	00 97       	sbiw	r24, 0x00	; 0
    18fc:	61 f0       	breq	.+24     	; 0x1916 <DIO_vdTogPinValue+0x56>
    18fe:	5a c0       	rjmp	.+180    	; 0x19b4 <DIO_vdTogPinValue+0xf4>
    1900:	2b 81       	ldd	r18, Y+3	; 0x03
    1902:	3c 81       	ldd	r19, Y+4	; 0x04
    1904:	22 30       	cpi	r18, 0x02	; 2
    1906:	31 05       	cpc	r19, r1
    1908:	71 f1       	breq	.+92     	; 0x1966 <DIO_vdTogPinValue+0xa6>
    190a:	8b 81       	ldd	r24, Y+3	; 0x03
    190c:	9c 81       	ldd	r25, Y+4	; 0x04
    190e:	83 30       	cpi	r24, 0x03	; 3
    1910:	91 05       	cpc	r25, r1
    1912:	e9 f1       	breq	.+122    	; 0x198e <DIO_vdTogPinValue+0xce>
    1914:	4f c0       	rjmp	.+158    	; 0x19b4 <DIO_vdTogPinValue+0xf4>
		{
			case PortA:
				TOG_BIT(PORTA_REGISTER, PinID);
    1916:	ab e3       	ldi	r26, 0x3B	; 59
    1918:	b0 e0       	ldi	r27, 0x00	; 0
    191a:	eb e3       	ldi	r30, 0x3B	; 59
    191c:	f0 e0       	ldi	r31, 0x00	; 0
    191e:	80 81       	ld	r24, Z
    1920:	48 2f       	mov	r20, r24
    1922:	8a 81       	ldd	r24, Y+2	; 0x02
    1924:	28 2f       	mov	r18, r24
    1926:	30 e0       	ldi	r19, 0x00	; 0
    1928:	81 e0       	ldi	r24, 0x01	; 1
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	02 2e       	mov	r0, r18
    192e:	02 c0       	rjmp	.+4      	; 0x1934 <DIO_vdTogPinValue+0x74>
    1930:	88 0f       	add	r24, r24
    1932:	99 1f       	adc	r25, r25
    1934:	0a 94       	dec	r0
    1936:	e2 f7       	brpl	.-8      	; 0x1930 <DIO_vdTogPinValue+0x70>
    1938:	84 27       	eor	r24, r20
    193a:	8c 93       	st	X, r24
    193c:	3b c0       	rjmp	.+118    	; 0x19b4 <DIO_vdTogPinValue+0xf4>
				break;
			case PortB:
				TOG_BIT(PORTB_REGISTER, PinID);
    193e:	a8 e3       	ldi	r26, 0x38	; 56
    1940:	b0 e0       	ldi	r27, 0x00	; 0
    1942:	e8 e3       	ldi	r30, 0x38	; 56
    1944:	f0 e0       	ldi	r31, 0x00	; 0
    1946:	80 81       	ld	r24, Z
    1948:	48 2f       	mov	r20, r24
    194a:	8a 81       	ldd	r24, Y+2	; 0x02
    194c:	28 2f       	mov	r18, r24
    194e:	30 e0       	ldi	r19, 0x00	; 0
    1950:	81 e0       	ldi	r24, 0x01	; 1
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	02 2e       	mov	r0, r18
    1956:	02 c0       	rjmp	.+4      	; 0x195c <DIO_vdTogPinValue+0x9c>
    1958:	88 0f       	add	r24, r24
    195a:	99 1f       	adc	r25, r25
    195c:	0a 94       	dec	r0
    195e:	e2 f7       	brpl	.-8      	; 0x1958 <DIO_vdTogPinValue+0x98>
    1960:	84 27       	eor	r24, r20
    1962:	8c 93       	st	X, r24
    1964:	27 c0       	rjmp	.+78     	; 0x19b4 <DIO_vdTogPinValue+0xf4>
				break;
			case PortC:
				TOG_BIT(PORTC_REGISTER, PinID);
    1966:	a5 e3       	ldi	r26, 0x35	; 53
    1968:	b0 e0       	ldi	r27, 0x00	; 0
    196a:	e5 e3       	ldi	r30, 0x35	; 53
    196c:	f0 e0       	ldi	r31, 0x00	; 0
    196e:	80 81       	ld	r24, Z
    1970:	48 2f       	mov	r20, r24
    1972:	8a 81       	ldd	r24, Y+2	; 0x02
    1974:	28 2f       	mov	r18, r24
    1976:	30 e0       	ldi	r19, 0x00	; 0
    1978:	81 e0       	ldi	r24, 0x01	; 1
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	02 2e       	mov	r0, r18
    197e:	02 c0       	rjmp	.+4      	; 0x1984 <DIO_vdTogPinValue+0xc4>
    1980:	88 0f       	add	r24, r24
    1982:	99 1f       	adc	r25, r25
    1984:	0a 94       	dec	r0
    1986:	e2 f7       	brpl	.-8      	; 0x1980 <DIO_vdTogPinValue+0xc0>
    1988:	84 27       	eor	r24, r20
    198a:	8c 93       	st	X, r24
    198c:	13 c0       	rjmp	.+38     	; 0x19b4 <DIO_vdTogPinValue+0xf4>
				break;
			case PortD:
				TOG_BIT(PORTD_REGISTER, PinID);
    198e:	a2 e3       	ldi	r26, 0x32	; 50
    1990:	b0 e0       	ldi	r27, 0x00	; 0
    1992:	e2 e3       	ldi	r30, 0x32	; 50
    1994:	f0 e0       	ldi	r31, 0x00	; 0
    1996:	80 81       	ld	r24, Z
    1998:	48 2f       	mov	r20, r24
    199a:	8a 81       	ldd	r24, Y+2	; 0x02
    199c:	28 2f       	mov	r18, r24
    199e:	30 e0       	ldi	r19, 0x00	; 0
    19a0:	81 e0       	ldi	r24, 0x01	; 1
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	02 2e       	mov	r0, r18
    19a6:	02 c0       	rjmp	.+4      	; 0x19ac <DIO_vdTogPinValue+0xec>
    19a8:	88 0f       	add	r24, r24
    19aa:	99 1f       	adc	r25, r25
    19ac:	0a 94       	dec	r0
    19ae:	e2 f7       	brpl	.-8      	; 0x19a8 <DIO_vdTogPinValue+0xe8>
    19b0:	84 27       	eor	r24, r20
    19b2:	8c 93       	st	X, r24
				break;
		}
	}
	else{}
}
    19b4:	0f 90       	pop	r0
    19b6:	0f 90       	pop	r0
    19b8:	0f 90       	pop	r0
    19ba:	0f 90       	pop	r0
    19bc:	cf 91       	pop	r28
    19be:	df 91       	pop	r29
    19c0:	08 95       	ret

000019c2 <Keypad_vdInitialization>:
		{'7','8','9','*'},
		{'0','=','/','%'}
};

void Keypad_vdInitialization (void)
{
    19c2:	df 93       	push	r29
    19c4:	cf 93       	push	r28
    19c6:	cd b7       	in	r28, 0x3d	; 61
    19c8:	de b7       	in	r29, 0x3e	; 62
	DIO_vdSetPortDirection(KEYPAD_U8_PORT, COLS_ROWS_DIRECTION);
    19ca:	82 e0       	ldi	r24, 0x02	; 2
    19cc:	6f e0       	ldi	r22, 0x0F	; 15
    19ce:	0e 94 b9 08 	call	0x1172	; 0x1172 <DIO_vdSetPortDirection>
	DIO_vdSetPortValue(KEYPAD_U8_PORT, COLS_ROWS_VALUE);
    19d2:	82 e0       	ldi	r24, 0x02	; 2
    19d4:	6f ef       	ldi	r22, 0xFF	; 255
    19d6:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_vdSetPortValue>
}
    19da:	cf 91       	pop	r28
    19dc:	df 91       	pop	r29
    19de:	08 95       	ret

000019e0 <Keypad_vdGetPressedKey>:

void Keypad_vdGetPressedKey (u8 *LOC_pu8ReturnedData)
{
    19e0:	df 93       	push	r29
    19e2:	cf 93       	push	r28
    19e4:	cd b7       	in	r28, 0x3d	; 61
    19e6:	de b7       	in	r29, 0x3e	; 62
    19e8:	63 97       	sbiw	r28, 0x13	; 19
    19ea:	0f b6       	in	r0, 0x3f	; 63
    19ec:	f8 94       	cli
    19ee:	de bf       	out	0x3e, r29	; 62
    19f0:	0f be       	out	0x3f, r0	; 63
    19f2:	cd bf       	out	0x3d, r28	; 61
    19f4:	9b 8b       	std	Y+19, r25	; 0x13
    19f6:	8a 8b       	std	Y+18, r24	; 0x12
	u8 LOC_u8RowsCounter , LOC_u8ColoumsCounter , LOC_u8StatusButton;

	DIO_vdSetPortValue(KEYPAD_U8_PORT, COLS_ROWS_VALUE);
    19f8:	82 e0       	ldi	r24, 0x02	; 2
    19fa:	6f ef       	ldi	r22, 0xFF	; 255
    19fc:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_vdSetPortValue>

	//if(LOC_pu8ReturnedData == NULL)

	for(LOC_u8RowsCounter = 0 ; LOC_u8RowsCounter <= 3 ; LOC_u8RowsCounter++)
    1a00:	19 8a       	std	Y+17, r1	; 0x11
    1a02:	bd c0       	rjmp	.+378    	; 0x1b7e <Keypad_vdGetPressedKey+0x19e>
	{
		DIO_vdSetPinValue(KEYPAD_U8_PORT,LOC_u8RowsCounter,PIN_LOW);
    1a04:	82 e0       	ldi	r24, 0x02	; 2
    1a06:	69 89       	ldd	r22, Y+17	; 0x11
    1a08:	40 e0       	ldi	r20, 0x00	; 0
    1a0a:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <DIO_vdSetPinValue>

		for(LOC_u8ColoumsCounter = 0 ; LOC_u8ColoumsCounter <= 3 ; LOC_u8ColoumsCounter++)
    1a0e:	18 8a       	std	Y+16, r1	; 0x10
    1a10:	aa c0       	rjmp	.+340    	; 0x1b66 <Keypad_vdGetPressedKey+0x186>
		{
			LOC_u8StatusButton = DIO_u8GetPinValue(KEYPAD_U8_PORT, LOC_u8ColoumsCounter+4);
    1a12:	88 89       	ldd	r24, Y+16	; 0x10
    1a14:	98 2f       	mov	r25, r24
    1a16:	9c 5f       	subi	r25, 0xFC	; 252
    1a18:	82 e0       	ldi	r24, 0x02	; 2
    1a1a:	69 2f       	mov	r22, r25
    1a1c:	0e 94 87 0b 	call	0x170e	; 0x170e <DIO_u8GetPinValue>
    1a20:	8f 87       	std	Y+15, r24	; 0x0f

			if(LOC_u8StatusButton == PIN_LOW)
    1a22:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a24:	88 23       	and	r24, r24
    1a26:	09 f0       	breq	.+2      	; 0x1a2a <Keypad_vdGetPressedKey+0x4a>
    1a28:	9b c0       	rjmp	.+310    	; 0x1b60 <Keypad_vdGetPressedKey+0x180>
    1a2a:	80 e0       	ldi	r24, 0x00	; 0
    1a2c:	90 e0       	ldi	r25, 0x00	; 0
    1a2e:	a0 ea       	ldi	r26, 0xA0	; 160
    1a30:	b1 e4       	ldi	r27, 0x41	; 65
    1a32:	8b 87       	std	Y+11, r24	; 0x0b
    1a34:	9c 87       	std	Y+12, r25	; 0x0c
    1a36:	ad 87       	std	Y+13, r26	; 0x0d
    1a38:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a3a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a3c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a3e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a40:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a42:	20 e0       	ldi	r18, 0x00	; 0
    1a44:	30 e0       	ldi	r19, 0x00	; 0
    1a46:	4a ef       	ldi	r20, 0xFA	; 250
    1a48:	54 e4       	ldi	r21, 0x44	; 68
    1a4a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a4e:	dc 01       	movw	r26, r24
    1a50:	cb 01       	movw	r24, r22
    1a52:	8f 83       	std	Y+7, r24	; 0x07
    1a54:	98 87       	std	Y+8, r25	; 0x08
    1a56:	a9 87       	std	Y+9, r26	; 0x09
    1a58:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a5a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a5c:	78 85       	ldd	r23, Y+8	; 0x08
    1a5e:	89 85       	ldd	r24, Y+9	; 0x09
    1a60:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a62:	20 e0       	ldi	r18, 0x00	; 0
    1a64:	30 e0       	ldi	r19, 0x00	; 0
    1a66:	40 e8       	ldi	r20, 0x80	; 128
    1a68:	5f e3       	ldi	r21, 0x3F	; 63
    1a6a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1a6e:	88 23       	and	r24, r24
    1a70:	2c f4       	brge	.+10     	; 0x1a7c <Keypad_vdGetPressedKey+0x9c>
		__ticks = 1;
    1a72:	81 e0       	ldi	r24, 0x01	; 1
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	9e 83       	std	Y+6, r25	; 0x06
    1a78:	8d 83       	std	Y+5, r24	; 0x05
    1a7a:	3f c0       	rjmp	.+126    	; 0x1afa <Keypad_vdGetPressedKey+0x11a>
	else if (__tmp > 65535)
    1a7c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a7e:	78 85       	ldd	r23, Y+8	; 0x08
    1a80:	89 85       	ldd	r24, Y+9	; 0x09
    1a82:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a84:	20 e0       	ldi	r18, 0x00	; 0
    1a86:	3f ef       	ldi	r19, 0xFF	; 255
    1a88:	4f e7       	ldi	r20, 0x7F	; 127
    1a8a:	57 e4       	ldi	r21, 0x47	; 71
    1a8c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1a90:	18 16       	cp	r1, r24
    1a92:	4c f5       	brge	.+82     	; 0x1ae6 <Keypad_vdGetPressedKey+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a94:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a96:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a98:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a9a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a9c:	20 e0       	ldi	r18, 0x00	; 0
    1a9e:	30 e0       	ldi	r19, 0x00	; 0
    1aa0:	40 e2       	ldi	r20, 0x20	; 32
    1aa2:	51 e4       	ldi	r21, 0x41	; 65
    1aa4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1aa8:	dc 01       	movw	r26, r24
    1aaa:	cb 01       	movw	r24, r22
    1aac:	bc 01       	movw	r22, r24
    1aae:	cd 01       	movw	r24, r26
    1ab0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ab4:	dc 01       	movw	r26, r24
    1ab6:	cb 01       	movw	r24, r22
    1ab8:	9e 83       	std	Y+6, r25	; 0x06
    1aba:	8d 83       	std	Y+5, r24	; 0x05
    1abc:	0f c0       	rjmp	.+30     	; 0x1adc <Keypad_vdGetPressedKey+0xfc>
    1abe:	88 ec       	ldi	r24, 0xC8	; 200
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	9c 83       	std	Y+4, r25	; 0x04
    1ac4:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ac6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac8:	9c 81       	ldd	r25, Y+4	; 0x04
    1aca:	01 97       	sbiw	r24, 0x01	; 1
    1acc:	f1 f7       	brne	.-4      	; 0x1aca <Keypad_vdGetPressedKey+0xea>
    1ace:	9c 83       	std	Y+4, r25	; 0x04
    1ad0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ad2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ad4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ad6:	01 97       	sbiw	r24, 0x01	; 1
    1ad8:	9e 83       	std	Y+6, r25	; 0x06
    1ada:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1adc:	8d 81       	ldd	r24, Y+5	; 0x05
    1ade:	9e 81       	ldd	r25, Y+6	; 0x06
    1ae0:	00 97       	sbiw	r24, 0x00	; 0
    1ae2:	69 f7       	brne	.-38     	; 0x1abe <Keypad_vdGetPressedKey+0xde>
    1ae4:	14 c0       	rjmp	.+40     	; 0x1b0e <Keypad_vdGetPressedKey+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ae6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ae8:	78 85       	ldd	r23, Y+8	; 0x08
    1aea:	89 85       	ldd	r24, Y+9	; 0x09
    1aec:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aee:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1af2:	dc 01       	movw	r26, r24
    1af4:	cb 01       	movw	r24, r22
    1af6:	9e 83       	std	Y+6, r25	; 0x06
    1af8:	8d 83       	std	Y+5, r24	; 0x05
    1afa:	8d 81       	ldd	r24, Y+5	; 0x05
    1afc:	9e 81       	ldd	r25, Y+6	; 0x06
    1afe:	9a 83       	std	Y+2, r25	; 0x02
    1b00:	89 83       	std	Y+1, r24	; 0x01
    1b02:	89 81       	ldd	r24, Y+1	; 0x01
    1b04:	9a 81       	ldd	r25, Y+2	; 0x02
    1b06:	01 97       	sbiw	r24, 0x01	; 1
    1b08:	f1 f7       	brne	.-4      	; 0x1b06 <Keypad_vdGetPressedKey+0x126>
    1b0a:	9a 83       	std	Y+2, r25	; 0x02
    1b0c:	89 83       	std	Y+1, r24	; 0x01
			{
				_delay_ms(20);
				LOC_u8StatusButton = DIO_u8GetPinValue(KEYPAD_U8_PORT, LOC_u8ColoumsCounter+4);
    1b0e:	88 89       	ldd	r24, Y+16	; 0x10
    1b10:	98 2f       	mov	r25, r24
    1b12:	9c 5f       	subi	r25, 0xFC	; 252
    1b14:	82 e0       	ldi	r24, 0x02	; 2
    1b16:	69 2f       	mov	r22, r25
    1b18:	0e 94 87 0b 	call	0x170e	; 0x170e <DIO_u8GetPinValue>
    1b1c:	8f 87       	std	Y+15, r24	; 0x0f
    1b1e:	08 c0       	rjmp	.+16     	; 0x1b30 <Keypad_vdGetPressedKey+0x150>

				while (LOC_u8StatusButton == PIN_LOW)
				{
					LOC_u8StatusButton = DIO_u8GetPinValue(KEYPAD_U8_PORT, LOC_u8ColoumsCounter+4);
    1b20:	88 89       	ldd	r24, Y+16	; 0x10
    1b22:	98 2f       	mov	r25, r24
    1b24:	9c 5f       	subi	r25, 0xFC	; 252
    1b26:	82 e0       	ldi	r24, 0x02	; 2
    1b28:	69 2f       	mov	r22, r25
    1b2a:	0e 94 87 0b 	call	0x170e	; 0x170e <DIO_u8GetPinValue>
    1b2e:	8f 87       	std	Y+15, r24	; 0x0f
			if(LOC_u8StatusButton == PIN_LOW)
			{
				_delay_ms(20);
				LOC_u8StatusButton = DIO_u8GetPinValue(KEYPAD_U8_PORT, LOC_u8ColoumsCounter+4);

				while (LOC_u8StatusButton == PIN_LOW)
    1b30:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b32:	88 23       	and	r24, r24
    1b34:	a9 f3       	breq	.-22     	; 0x1b20 <Keypad_vdGetPressedKey+0x140>
				{
					LOC_u8StatusButton = DIO_u8GetPinValue(KEYPAD_U8_PORT, LOC_u8ColoumsCounter+4);
				}

				*LOC_pu8ReturnedData = KEYPAD_u8KeysValues[LOC_u8RowsCounter][LOC_u8ColoumsCounter];
    1b36:	89 89       	ldd	r24, Y+17	; 0x11
    1b38:	48 2f       	mov	r20, r24
    1b3a:	50 e0       	ldi	r21, 0x00	; 0
    1b3c:	88 89       	ldd	r24, Y+16	; 0x10
    1b3e:	28 2f       	mov	r18, r24
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	ca 01       	movw	r24, r20
    1b44:	88 0f       	add	r24, r24
    1b46:	99 1f       	adc	r25, r25
    1b48:	88 0f       	add	r24, r24
    1b4a:	99 1f       	adc	r25, r25
    1b4c:	82 0f       	add	r24, r18
    1b4e:	93 1f       	adc	r25, r19
    1b50:	fc 01       	movw	r30, r24
    1b52:	e2 58       	subi	r30, 0x82	; 130
    1b54:	ff 4f       	sbci	r31, 0xFF	; 255
    1b56:	80 81       	ld	r24, Z
    1b58:	ea 89       	ldd	r30, Y+18	; 0x12
    1b5a:	fb 89       	ldd	r31, Y+19	; 0x13
    1b5c:	80 83       	st	Z, r24
    1b5e:	13 c0       	rjmp	.+38     	; 0x1b86 <Keypad_vdGetPressedKey+0x1a6>

	for(LOC_u8RowsCounter = 0 ; LOC_u8RowsCounter <= 3 ; LOC_u8RowsCounter++)
	{
		DIO_vdSetPinValue(KEYPAD_U8_PORT,LOC_u8RowsCounter,PIN_LOW);

		for(LOC_u8ColoumsCounter = 0 ; LOC_u8ColoumsCounter <= 3 ; LOC_u8ColoumsCounter++)
    1b60:	88 89       	ldd	r24, Y+16	; 0x10
    1b62:	8f 5f       	subi	r24, 0xFF	; 255
    1b64:	88 8b       	std	Y+16, r24	; 0x10
    1b66:	88 89       	ldd	r24, Y+16	; 0x10
    1b68:	84 30       	cpi	r24, 0x04	; 4
    1b6a:	08 f4       	brcc	.+2      	; 0x1b6e <Keypad_vdGetPressedKey+0x18e>
    1b6c:	52 cf       	rjmp	.-348    	; 0x1a12 <Keypad_vdGetPressedKey+0x32>

				*LOC_pu8ReturnedData = KEYPAD_u8KeysValues[LOC_u8RowsCounter][LOC_u8ColoumsCounter];
				return;
			}
		}
		DIO_vdSetPinValue(KEYPAD_U8_PORT, LOC_u8RowsCounter, PIN_High);
    1b6e:	82 e0       	ldi	r24, 0x02	; 2
    1b70:	69 89       	ldd	r22, Y+17	; 0x11
    1b72:	41 e0       	ldi	r20, 0x01	; 1
    1b74:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <DIO_vdSetPinValue>

	DIO_vdSetPortValue(KEYPAD_U8_PORT, COLS_ROWS_VALUE);

	//if(LOC_pu8ReturnedData == NULL)

	for(LOC_u8RowsCounter = 0 ; LOC_u8RowsCounter <= 3 ; LOC_u8RowsCounter++)
    1b78:	89 89       	ldd	r24, Y+17	; 0x11
    1b7a:	8f 5f       	subi	r24, 0xFF	; 255
    1b7c:	89 8b       	std	Y+17, r24	; 0x11
    1b7e:	89 89       	ldd	r24, Y+17	; 0x11
    1b80:	84 30       	cpi	r24, 0x04	; 4
    1b82:	08 f4       	brcc	.+2      	; 0x1b86 <Keypad_vdGetPressedKey+0x1a6>
    1b84:	3f cf       	rjmp	.-386    	; 0x1a04 <Keypad_vdGetPressedKey+0x24>
				return;
			}
		}
		DIO_vdSetPinValue(KEYPAD_U8_PORT, LOC_u8RowsCounter, PIN_High);
	}
}
    1b86:	63 96       	adiw	r28, 0x13	; 19
    1b88:	0f b6       	in	r0, 0x3f	; 63
    1b8a:	f8 94       	cli
    1b8c:	de bf       	out	0x3e, r29	; 62
    1b8e:	0f be       	out	0x3f, r0	; 63
    1b90:	cd bf       	out	0x3d, r28	; 61
    1b92:	cf 91       	pop	r28
    1b94:	df 91       	pop	r29
    1b96:	08 95       	ret

00001b98 <LCD_vdSendCmd>:
#include "LCD_Interface.h"

#define F_CPU 8000000UL

void LCD_vdSendCmd(u8 LOC_u8Command)
{
    1b98:	df 93       	push	r29
    1b9a:	cf 93       	push	r28
    1b9c:	cd b7       	in	r28, 0x3d	; 61
    1b9e:	de b7       	in	r29, 0x3e	; 62
    1ba0:	6d 97       	sbiw	r28, 0x1d	; 29
    1ba2:	0f b6       	in	r0, 0x3f	; 63
    1ba4:	f8 94       	cli
    1ba6:	de bf       	out	0x3e, r29	; 62
    1ba8:	0f be       	out	0x3f, r0	; 63
    1baa:	cd bf       	out	0x3d, r28	; 61
    1bac:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_vdSetPinValue(LCD_U8_CTRL_PORT,LCD_U8_RS_PIN,PIN_LOW);
    1bae:	83 e0       	ldi	r24, 0x03	; 3
    1bb0:	60 e0       	ldi	r22, 0x00	; 0
    1bb2:	40 e0       	ldi	r20, 0x00	; 0
    1bb4:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <DIO_vdSetPinValue>
	DIO_vdSetPinValue(LCD_U8_CTRL_PORT,LCD_U8_RW_PIN,PIN_LOW);
    1bb8:	83 e0       	ldi	r24, 0x03	; 3
    1bba:	61 e0       	ldi	r22, 0x01	; 1
    1bbc:	40 e0       	ldi	r20, 0x00	; 0
    1bbe:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <DIO_vdSetPinValue>
	DIO_vdSetPortValue(LCD_U8_DATA_PORT,LOC_u8Command);
    1bc2:	80 e0       	ldi	r24, 0x00	; 0
    1bc4:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1bc6:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_vdSetPortValue>
	DIO_vdSetPinValue(LCD_U8_CTRL_PORT,LCD_U8_EN_PIN,PIN_High);
    1bca:	83 e0       	ldi	r24, 0x03	; 3
    1bcc:	62 e0       	ldi	r22, 0x02	; 2
    1bce:	41 e0       	ldi	r20, 0x01	; 1
    1bd0:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <DIO_vdSetPinValue>
    1bd4:	80 e0       	ldi	r24, 0x00	; 0
    1bd6:	90 e0       	ldi	r25, 0x00	; 0
    1bd8:	a0 e8       	ldi	r26, 0x80	; 128
    1bda:	bf e3       	ldi	r27, 0x3F	; 63
    1bdc:	89 8f       	std	Y+25, r24	; 0x19
    1bde:	9a 8f       	std	Y+26, r25	; 0x1a
    1be0:	ab 8f       	std	Y+27, r26	; 0x1b
    1be2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1be4:	69 8d       	ldd	r22, Y+25	; 0x19
    1be6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1be8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bec:	20 e0       	ldi	r18, 0x00	; 0
    1bee:	30 e0       	ldi	r19, 0x00	; 0
    1bf0:	4a ef       	ldi	r20, 0xFA	; 250
    1bf2:	54 e4       	ldi	r21, 0x44	; 68
    1bf4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bf8:	dc 01       	movw	r26, r24
    1bfa:	cb 01       	movw	r24, r22
    1bfc:	8d 8b       	std	Y+21, r24	; 0x15
    1bfe:	9e 8b       	std	Y+22, r25	; 0x16
    1c00:	af 8b       	std	Y+23, r26	; 0x17
    1c02:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c04:	6d 89       	ldd	r22, Y+21	; 0x15
    1c06:	7e 89       	ldd	r23, Y+22	; 0x16
    1c08:	8f 89       	ldd	r24, Y+23	; 0x17
    1c0a:	98 8d       	ldd	r25, Y+24	; 0x18
    1c0c:	20 e0       	ldi	r18, 0x00	; 0
    1c0e:	30 e0       	ldi	r19, 0x00	; 0
    1c10:	40 e8       	ldi	r20, 0x80	; 128
    1c12:	5f e3       	ldi	r21, 0x3F	; 63
    1c14:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1c18:	88 23       	and	r24, r24
    1c1a:	2c f4       	brge	.+10     	; 0x1c26 <LCD_vdSendCmd+0x8e>
		__ticks = 1;
    1c1c:	81 e0       	ldi	r24, 0x01	; 1
    1c1e:	90 e0       	ldi	r25, 0x00	; 0
    1c20:	9c 8b       	std	Y+20, r25	; 0x14
    1c22:	8b 8b       	std	Y+19, r24	; 0x13
    1c24:	3f c0       	rjmp	.+126    	; 0x1ca4 <LCD_vdSendCmd+0x10c>
	else if (__tmp > 65535)
    1c26:	6d 89       	ldd	r22, Y+21	; 0x15
    1c28:	7e 89       	ldd	r23, Y+22	; 0x16
    1c2a:	8f 89       	ldd	r24, Y+23	; 0x17
    1c2c:	98 8d       	ldd	r25, Y+24	; 0x18
    1c2e:	20 e0       	ldi	r18, 0x00	; 0
    1c30:	3f ef       	ldi	r19, 0xFF	; 255
    1c32:	4f e7       	ldi	r20, 0x7F	; 127
    1c34:	57 e4       	ldi	r21, 0x47	; 71
    1c36:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1c3a:	18 16       	cp	r1, r24
    1c3c:	4c f5       	brge	.+82     	; 0x1c90 <LCD_vdSendCmd+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c3e:	69 8d       	ldd	r22, Y+25	; 0x19
    1c40:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c42:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c44:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c46:	20 e0       	ldi	r18, 0x00	; 0
    1c48:	30 e0       	ldi	r19, 0x00	; 0
    1c4a:	40 e2       	ldi	r20, 0x20	; 32
    1c4c:	51 e4       	ldi	r21, 0x41	; 65
    1c4e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c52:	dc 01       	movw	r26, r24
    1c54:	cb 01       	movw	r24, r22
    1c56:	bc 01       	movw	r22, r24
    1c58:	cd 01       	movw	r24, r26
    1c5a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c5e:	dc 01       	movw	r26, r24
    1c60:	cb 01       	movw	r24, r22
    1c62:	9c 8b       	std	Y+20, r25	; 0x14
    1c64:	8b 8b       	std	Y+19, r24	; 0x13
    1c66:	0f c0       	rjmp	.+30     	; 0x1c86 <LCD_vdSendCmd+0xee>
    1c68:	88 ec       	ldi	r24, 0xC8	; 200
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	9a 8b       	std	Y+18, r25	; 0x12
    1c6e:	89 8b       	std	Y+17, r24	; 0x11
    1c70:	89 89       	ldd	r24, Y+17	; 0x11
    1c72:	9a 89       	ldd	r25, Y+18	; 0x12
    1c74:	01 97       	sbiw	r24, 0x01	; 1
    1c76:	f1 f7       	brne	.-4      	; 0x1c74 <LCD_vdSendCmd+0xdc>
    1c78:	9a 8b       	std	Y+18, r25	; 0x12
    1c7a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c7c:	8b 89       	ldd	r24, Y+19	; 0x13
    1c7e:	9c 89       	ldd	r25, Y+20	; 0x14
    1c80:	01 97       	sbiw	r24, 0x01	; 1
    1c82:	9c 8b       	std	Y+20, r25	; 0x14
    1c84:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c86:	8b 89       	ldd	r24, Y+19	; 0x13
    1c88:	9c 89       	ldd	r25, Y+20	; 0x14
    1c8a:	00 97       	sbiw	r24, 0x00	; 0
    1c8c:	69 f7       	brne	.-38     	; 0x1c68 <LCD_vdSendCmd+0xd0>
    1c8e:	14 c0       	rjmp	.+40     	; 0x1cb8 <LCD_vdSendCmd+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c90:	6d 89       	ldd	r22, Y+21	; 0x15
    1c92:	7e 89       	ldd	r23, Y+22	; 0x16
    1c94:	8f 89       	ldd	r24, Y+23	; 0x17
    1c96:	98 8d       	ldd	r25, Y+24	; 0x18
    1c98:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c9c:	dc 01       	movw	r26, r24
    1c9e:	cb 01       	movw	r24, r22
    1ca0:	9c 8b       	std	Y+20, r25	; 0x14
    1ca2:	8b 8b       	std	Y+19, r24	; 0x13
    1ca4:	8b 89       	ldd	r24, Y+19	; 0x13
    1ca6:	9c 89       	ldd	r25, Y+20	; 0x14
    1ca8:	98 8b       	std	Y+16, r25	; 0x10
    1caa:	8f 87       	std	Y+15, r24	; 0x0f
    1cac:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cae:	98 89       	ldd	r25, Y+16	; 0x10
    1cb0:	01 97       	sbiw	r24, 0x01	; 1
    1cb2:	f1 f7       	brne	.-4      	; 0x1cb0 <LCD_vdSendCmd+0x118>
    1cb4:	98 8b       	std	Y+16, r25	; 0x10
    1cb6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_vdSetPinValue(LCD_U8_CTRL_PORT,LCD_U8_EN_PIN,PIN_LOW);
    1cb8:	83 e0       	ldi	r24, 0x03	; 3
    1cba:	62 e0       	ldi	r22, 0x02	; 2
    1cbc:	40 e0       	ldi	r20, 0x00	; 0
    1cbe:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <DIO_vdSetPinValue>
    1cc2:	80 e0       	ldi	r24, 0x00	; 0
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	a0 e8       	ldi	r26, 0x80	; 128
    1cc8:	bf e3       	ldi	r27, 0x3F	; 63
    1cca:	8b 87       	std	Y+11, r24	; 0x0b
    1ccc:	9c 87       	std	Y+12, r25	; 0x0c
    1cce:	ad 87       	std	Y+13, r26	; 0x0d
    1cd0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cd2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cd4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cd6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cd8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cda:	20 e0       	ldi	r18, 0x00	; 0
    1cdc:	30 e0       	ldi	r19, 0x00	; 0
    1cde:	4a ef       	ldi	r20, 0xFA	; 250
    1ce0:	54 e4       	ldi	r21, 0x44	; 68
    1ce2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ce6:	dc 01       	movw	r26, r24
    1ce8:	cb 01       	movw	r24, r22
    1cea:	8f 83       	std	Y+7, r24	; 0x07
    1cec:	98 87       	std	Y+8, r25	; 0x08
    1cee:	a9 87       	std	Y+9, r26	; 0x09
    1cf0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cf2:	6f 81       	ldd	r22, Y+7	; 0x07
    1cf4:	78 85       	ldd	r23, Y+8	; 0x08
    1cf6:	89 85       	ldd	r24, Y+9	; 0x09
    1cf8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cfa:	20 e0       	ldi	r18, 0x00	; 0
    1cfc:	30 e0       	ldi	r19, 0x00	; 0
    1cfe:	40 e8       	ldi	r20, 0x80	; 128
    1d00:	5f e3       	ldi	r21, 0x3F	; 63
    1d02:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1d06:	88 23       	and	r24, r24
    1d08:	2c f4       	brge	.+10     	; 0x1d14 <LCD_vdSendCmd+0x17c>
		__ticks = 1;
    1d0a:	81 e0       	ldi	r24, 0x01	; 1
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	9e 83       	std	Y+6, r25	; 0x06
    1d10:	8d 83       	std	Y+5, r24	; 0x05
    1d12:	3f c0       	rjmp	.+126    	; 0x1d92 <LCD_vdSendCmd+0x1fa>
	else if (__tmp > 65535)
    1d14:	6f 81       	ldd	r22, Y+7	; 0x07
    1d16:	78 85       	ldd	r23, Y+8	; 0x08
    1d18:	89 85       	ldd	r24, Y+9	; 0x09
    1d1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d1c:	20 e0       	ldi	r18, 0x00	; 0
    1d1e:	3f ef       	ldi	r19, 0xFF	; 255
    1d20:	4f e7       	ldi	r20, 0x7F	; 127
    1d22:	57 e4       	ldi	r21, 0x47	; 71
    1d24:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1d28:	18 16       	cp	r1, r24
    1d2a:	4c f5       	brge	.+82     	; 0x1d7e <LCD_vdSendCmd+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d2c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d2e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d30:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d32:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d34:	20 e0       	ldi	r18, 0x00	; 0
    1d36:	30 e0       	ldi	r19, 0x00	; 0
    1d38:	40 e2       	ldi	r20, 0x20	; 32
    1d3a:	51 e4       	ldi	r21, 0x41	; 65
    1d3c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d40:	dc 01       	movw	r26, r24
    1d42:	cb 01       	movw	r24, r22
    1d44:	bc 01       	movw	r22, r24
    1d46:	cd 01       	movw	r24, r26
    1d48:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d4c:	dc 01       	movw	r26, r24
    1d4e:	cb 01       	movw	r24, r22
    1d50:	9e 83       	std	Y+6, r25	; 0x06
    1d52:	8d 83       	std	Y+5, r24	; 0x05
    1d54:	0f c0       	rjmp	.+30     	; 0x1d74 <LCD_vdSendCmd+0x1dc>
    1d56:	88 ec       	ldi	r24, 0xC8	; 200
    1d58:	90 e0       	ldi	r25, 0x00	; 0
    1d5a:	9c 83       	std	Y+4, r25	; 0x04
    1d5c:	8b 83       	std	Y+3, r24	; 0x03
    1d5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d60:	9c 81       	ldd	r25, Y+4	; 0x04
    1d62:	01 97       	sbiw	r24, 0x01	; 1
    1d64:	f1 f7       	brne	.-4      	; 0x1d62 <LCD_vdSendCmd+0x1ca>
    1d66:	9c 83       	std	Y+4, r25	; 0x04
    1d68:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d6a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d6c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d6e:	01 97       	sbiw	r24, 0x01	; 1
    1d70:	9e 83       	std	Y+6, r25	; 0x06
    1d72:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d74:	8d 81       	ldd	r24, Y+5	; 0x05
    1d76:	9e 81       	ldd	r25, Y+6	; 0x06
    1d78:	00 97       	sbiw	r24, 0x00	; 0
    1d7a:	69 f7       	brne	.-38     	; 0x1d56 <LCD_vdSendCmd+0x1be>
    1d7c:	14 c0       	rjmp	.+40     	; 0x1da6 <LCD_vdSendCmd+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d7e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d80:	78 85       	ldd	r23, Y+8	; 0x08
    1d82:	89 85       	ldd	r24, Y+9	; 0x09
    1d84:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d86:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d8a:	dc 01       	movw	r26, r24
    1d8c:	cb 01       	movw	r24, r22
    1d8e:	9e 83       	std	Y+6, r25	; 0x06
    1d90:	8d 83       	std	Y+5, r24	; 0x05
    1d92:	8d 81       	ldd	r24, Y+5	; 0x05
    1d94:	9e 81       	ldd	r25, Y+6	; 0x06
    1d96:	9a 83       	std	Y+2, r25	; 0x02
    1d98:	89 83       	std	Y+1, r24	; 0x01
    1d9a:	89 81       	ldd	r24, Y+1	; 0x01
    1d9c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d9e:	01 97       	sbiw	r24, 0x01	; 1
    1da0:	f1 f7       	brne	.-4      	; 0x1d9e <LCD_vdSendCmd+0x206>
    1da2:	9a 83       	std	Y+2, r25	; 0x02
    1da4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1da6:	6d 96       	adiw	r28, 0x1d	; 29
    1da8:	0f b6       	in	r0, 0x3f	; 63
    1daa:	f8 94       	cli
    1dac:	de bf       	out	0x3e, r29	; 62
    1dae:	0f be       	out	0x3f, r0	; 63
    1db0:	cd bf       	out	0x3d, r28	; 61
    1db2:	cf 91       	pop	r28
    1db4:	df 91       	pop	r29
    1db6:	08 95       	ret

00001db8 <LCD_vdSendChar>:

void LCD_vdSendChar(u8 LOC_u8Char)
{
    1db8:	df 93       	push	r29
    1dba:	cf 93       	push	r28
    1dbc:	cd b7       	in	r28, 0x3d	; 61
    1dbe:	de b7       	in	r29, 0x3e	; 62
    1dc0:	6d 97       	sbiw	r28, 0x1d	; 29
    1dc2:	0f b6       	in	r0, 0x3f	; 63
    1dc4:	f8 94       	cli
    1dc6:	de bf       	out	0x3e, r29	; 62
    1dc8:	0f be       	out	0x3f, r0	; 63
    1dca:	cd bf       	out	0x3d, r28	; 61
    1dcc:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_vdSetPinValue(LCD_U8_CTRL_PORT,LCD_U8_RS_PIN,PIN_High);
    1dce:	83 e0       	ldi	r24, 0x03	; 3
    1dd0:	60 e0       	ldi	r22, 0x00	; 0
    1dd2:	41 e0       	ldi	r20, 0x01	; 1
    1dd4:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <DIO_vdSetPinValue>
	DIO_vdSetPinValue(LCD_U8_CTRL_PORT,LCD_U8_RW_PIN,PIN_LOW);
    1dd8:	83 e0       	ldi	r24, 0x03	; 3
    1dda:	61 e0       	ldi	r22, 0x01	; 1
    1ddc:	40 e0       	ldi	r20, 0x00	; 0
    1dde:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <DIO_vdSetPinValue>
	DIO_vdSetPortValue(LCD_U8_DATA_PORT, LOC_u8Char);
    1de2:	80 e0       	ldi	r24, 0x00	; 0
    1de4:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1de6:	0e 94 fd 08 	call	0x11fa	; 0x11fa <DIO_vdSetPortValue>
	DIO_vdSetPinValue(LCD_U8_CTRL_PORT,LCD_U8_EN_PIN,PIN_High);
    1dea:	83 e0       	ldi	r24, 0x03	; 3
    1dec:	62 e0       	ldi	r22, 0x02	; 2
    1dee:	41 e0       	ldi	r20, 0x01	; 1
    1df0:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <DIO_vdSetPinValue>
    1df4:	80 e0       	ldi	r24, 0x00	; 0
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	a0 e8       	ldi	r26, 0x80	; 128
    1dfa:	bf e3       	ldi	r27, 0x3F	; 63
    1dfc:	89 8f       	std	Y+25, r24	; 0x19
    1dfe:	9a 8f       	std	Y+26, r25	; 0x1a
    1e00:	ab 8f       	std	Y+27, r26	; 0x1b
    1e02:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e04:	69 8d       	ldd	r22, Y+25	; 0x19
    1e06:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e08:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e0a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e0c:	20 e0       	ldi	r18, 0x00	; 0
    1e0e:	30 e0       	ldi	r19, 0x00	; 0
    1e10:	4a ef       	ldi	r20, 0xFA	; 250
    1e12:	54 e4       	ldi	r21, 0x44	; 68
    1e14:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e18:	dc 01       	movw	r26, r24
    1e1a:	cb 01       	movw	r24, r22
    1e1c:	8d 8b       	std	Y+21, r24	; 0x15
    1e1e:	9e 8b       	std	Y+22, r25	; 0x16
    1e20:	af 8b       	std	Y+23, r26	; 0x17
    1e22:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e24:	6d 89       	ldd	r22, Y+21	; 0x15
    1e26:	7e 89       	ldd	r23, Y+22	; 0x16
    1e28:	8f 89       	ldd	r24, Y+23	; 0x17
    1e2a:	98 8d       	ldd	r25, Y+24	; 0x18
    1e2c:	20 e0       	ldi	r18, 0x00	; 0
    1e2e:	30 e0       	ldi	r19, 0x00	; 0
    1e30:	40 e8       	ldi	r20, 0x80	; 128
    1e32:	5f e3       	ldi	r21, 0x3F	; 63
    1e34:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1e38:	88 23       	and	r24, r24
    1e3a:	2c f4       	brge	.+10     	; 0x1e46 <LCD_vdSendChar+0x8e>
		__ticks = 1;
    1e3c:	81 e0       	ldi	r24, 0x01	; 1
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	9c 8b       	std	Y+20, r25	; 0x14
    1e42:	8b 8b       	std	Y+19, r24	; 0x13
    1e44:	3f c0       	rjmp	.+126    	; 0x1ec4 <LCD_vdSendChar+0x10c>
	else if (__tmp > 65535)
    1e46:	6d 89       	ldd	r22, Y+21	; 0x15
    1e48:	7e 89       	ldd	r23, Y+22	; 0x16
    1e4a:	8f 89       	ldd	r24, Y+23	; 0x17
    1e4c:	98 8d       	ldd	r25, Y+24	; 0x18
    1e4e:	20 e0       	ldi	r18, 0x00	; 0
    1e50:	3f ef       	ldi	r19, 0xFF	; 255
    1e52:	4f e7       	ldi	r20, 0x7F	; 127
    1e54:	57 e4       	ldi	r21, 0x47	; 71
    1e56:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1e5a:	18 16       	cp	r1, r24
    1e5c:	4c f5       	brge	.+82     	; 0x1eb0 <LCD_vdSendChar+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e5e:	69 8d       	ldd	r22, Y+25	; 0x19
    1e60:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e62:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e64:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e66:	20 e0       	ldi	r18, 0x00	; 0
    1e68:	30 e0       	ldi	r19, 0x00	; 0
    1e6a:	40 e2       	ldi	r20, 0x20	; 32
    1e6c:	51 e4       	ldi	r21, 0x41	; 65
    1e6e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e72:	dc 01       	movw	r26, r24
    1e74:	cb 01       	movw	r24, r22
    1e76:	bc 01       	movw	r22, r24
    1e78:	cd 01       	movw	r24, r26
    1e7a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e7e:	dc 01       	movw	r26, r24
    1e80:	cb 01       	movw	r24, r22
    1e82:	9c 8b       	std	Y+20, r25	; 0x14
    1e84:	8b 8b       	std	Y+19, r24	; 0x13
    1e86:	0f c0       	rjmp	.+30     	; 0x1ea6 <LCD_vdSendChar+0xee>
    1e88:	88 ec       	ldi	r24, 0xC8	; 200
    1e8a:	90 e0       	ldi	r25, 0x00	; 0
    1e8c:	9a 8b       	std	Y+18, r25	; 0x12
    1e8e:	89 8b       	std	Y+17, r24	; 0x11
    1e90:	89 89       	ldd	r24, Y+17	; 0x11
    1e92:	9a 89       	ldd	r25, Y+18	; 0x12
    1e94:	01 97       	sbiw	r24, 0x01	; 1
    1e96:	f1 f7       	brne	.-4      	; 0x1e94 <LCD_vdSendChar+0xdc>
    1e98:	9a 8b       	std	Y+18, r25	; 0x12
    1e9a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e9c:	8b 89       	ldd	r24, Y+19	; 0x13
    1e9e:	9c 89       	ldd	r25, Y+20	; 0x14
    1ea0:	01 97       	sbiw	r24, 0x01	; 1
    1ea2:	9c 8b       	std	Y+20, r25	; 0x14
    1ea4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ea6:	8b 89       	ldd	r24, Y+19	; 0x13
    1ea8:	9c 89       	ldd	r25, Y+20	; 0x14
    1eaa:	00 97       	sbiw	r24, 0x00	; 0
    1eac:	69 f7       	brne	.-38     	; 0x1e88 <LCD_vdSendChar+0xd0>
    1eae:	14 c0       	rjmp	.+40     	; 0x1ed8 <LCD_vdSendChar+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eb0:	6d 89       	ldd	r22, Y+21	; 0x15
    1eb2:	7e 89       	ldd	r23, Y+22	; 0x16
    1eb4:	8f 89       	ldd	r24, Y+23	; 0x17
    1eb6:	98 8d       	ldd	r25, Y+24	; 0x18
    1eb8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ebc:	dc 01       	movw	r26, r24
    1ebe:	cb 01       	movw	r24, r22
    1ec0:	9c 8b       	std	Y+20, r25	; 0x14
    1ec2:	8b 8b       	std	Y+19, r24	; 0x13
    1ec4:	8b 89       	ldd	r24, Y+19	; 0x13
    1ec6:	9c 89       	ldd	r25, Y+20	; 0x14
    1ec8:	98 8b       	std	Y+16, r25	; 0x10
    1eca:	8f 87       	std	Y+15, r24	; 0x0f
    1ecc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ece:	98 89       	ldd	r25, Y+16	; 0x10
    1ed0:	01 97       	sbiw	r24, 0x01	; 1
    1ed2:	f1 f7       	brne	.-4      	; 0x1ed0 <LCD_vdSendChar+0x118>
    1ed4:	98 8b       	std	Y+16, r25	; 0x10
    1ed6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_vdSetPinValue(LCD_U8_CTRL_PORT,LCD_U8_EN_PIN,PIN_LOW);
    1ed8:	83 e0       	ldi	r24, 0x03	; 3
    1eda:	62 e0       	ldi	r22, 0x02	; 2
    1edc:	40 e0       	ldi	r20, 0x00	; 0
    1ede:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <DIO_vdSetPinValue>
    1ee2:	80 e0       	ldi	r24, 0x00	; 0
    1ee4:	90 e0       	ldi	r25, 0x00	; 0
    1ee6:	a0 e8       	ldi	r26, 0x80	; 128
    1ee8:	bf e3       	ldi	r27, 0x3F	; 63
    1eea:	8b 87       	std	Y+11, r24	; 0x0b
    1eec:	9c 87       	std	Y+12, r25	; 0x0c
    1eee:	ad 87       	std	Y+13, r26	; 0x0d
    1ef0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ef2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ef4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ef6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ef8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1efa:	20 e0       	ldi	r18, 0x00	; 0
    1efc:	30 e0       	ldi	r19, 0x00	; 0
    1efe:	4a ef       	ldi	r20, 0xFA	; 250
    1f00:	54 e4       	ldi	r21, 0x44	; 68
    1f02:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f06:	dc 01       	movw	r26, r24
    1f08:	cb 01       	movw	r24, r22
    1f0a:	8f 83       	std	Y+7, r24	; 0x07
    1f0c:	98 87       	std	Y+8, r25	; 0x08
    1f0e:	a9 87       	std	Y+9, r26	; 0x09
    1f10:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f12:	6f 81       	ldd	r22, Y+7	; 0x07
    1f14:	78 85       	ldd	r23, Y+8	; 0x08
    1f16:	89 85       	ldd	r24, Y+9	; 0x09
    1f18:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f1a:	20 e0       	ldi	r18, 0x00	; 0
    1f1c:	30 e0       	ldi	r19, 0x00	; 0
    1f1e:	40 e8       	ldi	r20, 0x80	; 128
    1f20:	5f e3       	ldi	r21, 0x3F	; 63
    1f22:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1f26:	88 23       	and	r24, r24
    1f28:	2c f4       	brge	.+10     	; 0x1f34 <LCD_vdSendChar+0x17c>
		__ticks = 1;
    1f2a:	81 e0       	ldi	r24, 0x01	; 1
    1f2c:	90 e0       	ldi	r25, 0x00	; 0
    1f2e:	9e 83       	std	Y+6, r25	; 0x06
    1f30:	8d 83       	std	Y+5, r24	; 0x05
    1f32:	3f c0       	rjmp	.+126    	; 0x1fb2 <LCD_vdSendChar+0x1fa>
	else if (__tmp > 65535)
    1f34:	6f 81       	ldd	r22, Y+7	; 0x07
    1f36:	78 85       	ldd	r23, Y+8	; 0x08
    1f38:	89 85       	ldd	r24, Y+9	; 0x09
    1f3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f3c:	20 e0       	ldi	r18, 0x00	; 0
    1f3e:	3f ef       	ldi	r19, 0xFF	; 255
    1f40:	4f e7       	ldi	r20, 0x7F	; 127
    1f42:	57 e4       	ldi	r21, 0x47	; 71
    1f44:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1f48:	18 16       	cp	r1, r24
    1f4a:	4c f5       	brge	.+82     	; 0x1f9e <LCD_vdSendChar+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f4c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f4e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f50:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f52:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f54:	20 e0       	ldi	r18, 0x00	; 0
    1f56:	30 e0       	ldi	r19, 0x00	; 0
    1f58:	40 e2       	ldi	r20, 0x20	; 32
    1f5a:	51 e4       	ldi	r21, 0x41	; 65
    1f5c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f60:	dc 01       	movw	r26, r24
    1f62:	cb 01       	movw	r24, r22
    1f64:	bc 01       	movw	r22, r24
    1f66:	cd 01       	movw	r24, r26
    1f68:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f6c:	dc 01       	movw	r26, r24
    1f6e:	cb 01       	movw	r24, r22
    1f70:	9e 83       	std	Y+6, r25	; 0x06
    1f72:	8d 83       	std	Y+5, r24	; 0x05
    1f74:	0f c0       	rjmp	.+30     	; 0x1f94 <LCD_vdSendChar+0x1dc>
    1f76:	88 ec       	ldi	r24, 0xC8	; 200
    1f78:	90 e0       	ldi	r25, 0x00	; 0
    1f7a:	9c 83       	std	Y+4, r25	; 0x04
    1f7c:	8b 83       	std	Y+3, r24	; 0x03
    1f7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f80:	9c 81       	ldd	r25, Y+4	; 0x04
    1f82:	01 97       	sbiw	r24, 0x01	; 1
    1f84:	f1 f7       	brne	.-4      	; 0x1f82 <LCD_vdSendChar+0x1ca>
    1f86:	9c 83       	std	Y+4, r25	; 0x04
    1f88:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f8a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f8c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f8e:	01 97       	sbiw	r24, 0x01	; 1
    1f90:	9e 83       	std	Y+6, r25	; 0x06
    1f92:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f94:	8d 81       	ldd	r24, Y+5	; 0x05
    1f96:	9e 81       	ldd	r25, Y+6	; 0x06
    1f98:	00 97       	sbiw	r24, 0x00	; 0
    1f9a:	69 f7       	brne	.-38     	; 0x1f76 <LCD_vdSendChar+0x1be>
    1f9c:	14 c0       	rjmp	.+40     	; 0x1fc6 <LCD_vdSendChar+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f9e:	6f 81       	ldd	r22, Y+7	; 0x07
    1fa0:	78 85       	ldd	r23, Y+8	; 0x08
    1fa2:	89 85       	ldd	r24, Y+9	; 0x09
    1fa4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fa6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1faa:	dc 01       	movw	r26, r24
    1fac:	cb 01       	movw	r24, r22
    1fae:	9e 83       	std	Y+6, r25	; 0x06
    1fb0:	8d 83       	std	Y+5, r24	; 0x05
    1fb2:	8d 81       	ldd	r24, Y+5	; 0x05
    1fb4:	9e 81       	ldd	r25, Y+6	; 0x06
    1fb6:	9a 83       	std	Y+2, r25	; 0x02
    1fb8:	89 83       	std	Y+1, r24	; 0x01
    1fba:	89 81       	ldd	r24, Y+1	; 0x01
    1fbc:	9a 81       	ldd	r25, Y+2	; 0x02
    1fbe:	01 97       	sbiw	r24, 0x01	; 1
    1fc0:	f1 f7       	brne	.-4      	; 0x1fbe <LCD_vdSendChar+0x206>
    1fc2:	9a 83       	std	Y+2, r25	; 0x02
    1fc4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1fc6:	6d 96       	adiw	r28, 0x1d	; 29
    1fc8:	0f b6       	in	r0, 0x3f	; 63
    1fca:	f8 94       	cli
    1fcc:	de bf       	out	0x3e, r29	; 62
    1fce:	0f be       	out	0x3f, r0	; 63
    1fd0:	cd bf       	out	0x3d, r28	; 61
    1fd2:	cf 91       	pop	r28
    1fd4:	df 91       	pop	r29
    1fd6:	08 95       	ret

00001fd8 <LCD_vdInitialization>:

void LCD_vdInitialization(void)
{
    1fd8:	0f 93       	push	r16
    1fda:	1f 93       	push	r17
    1fdc:	df 93       	push	r29
    1fde:	cf 93       	push	r28
    1fe0:	cd b7       	in	r28, 0x3d	; 61
    1fe2:	de b7       	in	r29, 0x3e	; 62
    1fe4:	c6 54       	subi	r28, 0x46	; 70
    1fe6:	d0 40       	sbci	r29, 0x00	; 0
    1fe8:	0f b6       	in	r0, 0x3f	; 63
    1fea:	f8 94       	cli
    1fec:	de bf       	out	0x3e, r29	; 62
    1fee:	0f be       	out	0x3f, r0	; 63
    1ff0:	cd bf       	out	0x3d, r28	; 61
    1ff2:	fe 01       	movw	r30, r28
    1ff4:	ed 5b       	subi	r30, 0xBD	; 189
    1ff6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff8:	80 e0       	ldi	r24, 0x00	; 0
    1ffa:	90 e0       	ldi	r25, 0x00	; 0
    1ffc:	a8 e4       	ldi	r26, 0x48	; 72
    1ffe:	b2 e4       	ldi	r27, 0x42	; 66
    2000:	80 83       	st	Z, r24
    2002:	91 83       	std	Z+1, r25	; 0x01
    2004:	a2 83       	std	Z+2, r26	; 0x02
    2006:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2008:	8e 01       	movw	r16, r28
    200a:	01 5c       	subi	r16, 0xC1	; 193
    200c:	1f 4f       	sbci	r17, 0xFF	; 255
    200e:	fe 01       	movw	r30, r28
    2010:	ed 5b       	subi	r30, 0xBD	; 189
    2012:	ff 4f       	sbci	r31, 0xFF	; 255
    2014:	60 81       	ld	r22, Z
    2016:	71 81       	ldd	r23, Z+1	; 0x01
    2018:	82 81       	ldd	r24, Z+2	; 0x02
    201a:	93 81       	ldd	r25, Z+3	; 0x03
    201c:	20 e0       	ldi	r18, 0x00	; 0
    201e:	30 e0       	ldi	r19, 0x00	; 0
    2020:	4a ef       	ldi	r20, 0xFA	; 250
    2022:	54 e4       	ldi	r21, 0x44	; 68
    2024:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2028:	dc 01       	movw	r26, r24
    202a:	cb 01       	movw	r24, r22
    202c:	f8 01       	movw	r30, r16
    202e:	80 83       	st	Z, r24
    2030:	91 83       	std	Z+1, r25	; 0x01
    2032:	a2 83       	std	Z+2, r26	; 0x02
    2034:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2036:	fe 01       	movw	r30, r28
    2038:	ff 96       	adiw	r30, 0x3f	; 63
    203a:	60 81       	ld	r22, Z
    203c:	71 81       	ldd	r23, Z+1	; 0x01
    203e:	82 81       	ldd	r24, Z+2	; 0x02
    2040:	93 81       	ldd	r25, Z+3	; 0x03
    2042:	20 e0       	ldi	r18, 0x00	; 0
    2044:	30 e0       	ldi	r19, 0x00	; 0
    2046:	40 e8       	ldi	r20, 0x80	; 128
    2048:	5f e3       	ldi	r21, 0x3F	; 63
    204a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    204e:	88 23       	and	r24, r24
    2050:	2c f4       	brge	.+10     	; 0x205c <LCD_vdInitialization+0x84>
		__ticks = 1;
    2052:	81 e0       	ldi	r24, 0x01	; 1
    2054:	90 e0       	ldi	r25, 0x00	; 0
    2056:	9e af       	std	Y+62, r25	; 0x3e
    2058:	8d af       	std	Y+61, r24	; 0x3d
    205a:	46 c0       	rjmp	.+140    	; 0x20e8 <LCD_vdInitialization+0x110>
	else if (__tmp > 65535)
    205c:	fe 01       	movw	r30, r28
    205e:	ff 96       	adiw	r30, 0x3f	; 63
    2060:	60 81       	ld	r22, Z
    2062:	71 81       	ldd	r23, Z+1	; 0x01
    2064:	82 81       	ldd	r24, Z+2	; 0x02
    2066:	93 81       	ldd	r25, Z+3	; 0x03
    2068:	20 e0       	ldi	r18, 0x00	; 0
    206a:	3f ef       	ldi	r19, 0xFF	; 255
    206c:	4f e7       	ldi	r20, 0x7F	; 127
    206e:	57 e4       	ldi	r21, 0x47	; 71
    2070:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2074:	18 16       	cp	r1, r24
    2076:	64 f5       	brge	.+88     	; 0x20d0 <LCD_vdInitialization+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2078:	fe 01       	movw	r30, r28
    207a:	ed 5b       	subi	r30, 0xBD	; 189
    207c:	ff 4f       	sbci	r31, 0xFF	; 255
    207e:	60 81       	ld	r22, Z
    2080:	71 81       	ldd	r23, Z+1	; 0x01
    2082:	82 81       	ldd	r24, Z+2	; 0x02
    2084:	93 81       	ldd	r25, Z+3	; 0x03
    2086:	20 e0       	ldi	r18, 0x00	; 0
    2088:	30 e0       	ldi	r19, 0x00	; 0
    208a:	40 e2       	ldi	r20, 0x20	; 32
    208c:	51 e4       	ldi	r21, 0x41	; 65
    208e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2092:	dc 01       	movw	r26, r24
    2094:	cb 01       	movw	r24, r22
    2096:	bc 01       	movw	r22, r24
    2098:	cd 01       	movw	r24, r26
    209a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    209e:	dc 01       	movw	r26, r24
    20a0:	cb 01       	movw	r24, r22
    20a2:	9e af       	std	Y+62, r25	; 0x3e
    20a4:	8d af       	std	Y+61, r24	; 0x3d
    20a6:	0f c0       	rjmp	.+30     	; 0x20c6 <LCD_vdInitialization+0xee>
    20a8:	88 ec       	ldi	r24, 0xC8	; 200
    20aa:	90 e0       	ldi	r25, 0x00	; 0
    20ac:	9c af       	std	Y+60, r25	; 0x3c
    20ae:	8b af       	std	Y+59, r24	; 0x3b
    20b0:	8b ad       	ldd	r24, Y+59	; 0x3b
    20b2:	9c ad       	ldd	r25, Y+60	; 0x3c
    20b4:	01 97       	sbiw	r24, 0x01	; 1
    20b6:	f1 f7       	brne	.-4      	; 0x20b4 <LCD_vdInitialization+0xdc>
    20b8:	9c af       	std	Y+60, r25	; 0x3c
    20ba:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20bc:	8d ad       	ldd	r24, Y+61	; 0x3d
    20be:	9e ad       	ldd	r25, Y+62	; 0x3e
    20c0:	01 97       	sbiw	r24, 0x01	; 1
    20c2:	9e af       	std	Y+62, r25	; 0x3e
    20c4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20c6:	8d ad       	ldd	r24, Y+61	; 0x3d
    20c8:	9e ad       	ldd	r25, Y+62	; 0x3e
    20ca:	00 97       	sbiw	r24, 0x00	; 0
    20cc:	69 f7       	brne	.-38     	; 0x20a8 <LCD_vdInitialization+0xd0>
    20ce:	16 c0       	rjmp	.+44     	; 0x20fc <LCD_vdInitialization+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20d0:	fe 01       	movw	r30, r28
    20d2:	ff 96       	adiw	r30, 0x3f	; 63
    20d4:	60 81       	ld	r22, Z
    20d6:	71 81       	ldd	r23, Z+1	; 0x01
    20d8:	82 81       	ldd	r24, Z+2	; 0x02
    20da:	93 81       	ldd	r25, Z+3	; 0x03
    20dc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20e0:	dc 01       	movw	r26, r24
    20e2:	cb 01       	movw	r24, r22
    20e4:	9e af       	std	Y+62, r25	; 0x3e
    20e6:	8d af       	std	Y+61, r24	; 0x3d
    20e8:	8d ad       	ldd	r24, Y+61	; 0x3d
    20ea:	9e ad       	ldd	r25, Y+62	; 0x3e
    20ec:	9a af       	std	Y+58, r25	; 0x3a
    20ee:	89 af       	std	Y+57, r24	; 0x39
    20f0:	89 ad       	ldd	r24, Y+57	; 0x39
    20f2:	9a ad       	ldd	r25, Y+58	; 0x3a
    20f4:	01 97       	sbiw	r24, 0x01	; 1
    20f6:	f1 f7       	brne	.-4      	; 0x20f4 <LCD_vdInitialization+0x11c>
    20f8:	9a af       	std	Y+58, r25	; 0x3a
    20fa:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(50);
	LCD_vdSendCmd(LCD_U8_FUNC_SET);
    20fc:	88 e3       	ldi	r24, 0x38	; 56
    20fe:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <LCD_vdSendCmd>
    2102:	80 e0       	ldi	r24, 0x00	; 0
    2104:	90 e0       	ldi	r25, 0x00	; 0
    2106:	a0 e2       	ldi	r26, 0x20	; 32
    2108:	b1 e4       	ldi	r27, 0x41	; 65
    210a:	8d ab       	std	Y+53, r24	; 0x35
    210c:	9e ab       	std	Y+54, r25	; 0x36
    210e:	af ab       	std	Y+55, r26	; 0x37
    2110:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2112:	6d a9       	ldd	r22, Y+53	; 0x35
    2114:	7e a9       	ldd	r23, Y+54	; 0x36
    2116:	8f a9       	ldd	r24, Y+55	; 0x37
    2118:	98 ad       	ldd	r25, Y+56	; 0x38
    211a:	20 e0       	ldi	r18, 0x00	; 0
    211c:	30 e0       	ldi	r19, 0x00	; 0
    211e:	4a ef       	ldi	r20, 0xFA	; 250
    2120:	54 e4       	ldi	r21, 0x44	; 68
    2122:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2126:	dc 01       	movw	r26, r24
    2128:	cb 01       	movw	r24, r22
    212a:	89 ab       	std	Y+49, r24	; 0x31
    212c:	9a ab       	std	Y+50, r25	; 0x32
    212e:	ab ab       	std	Y+51, r26	; 0x33
    2130:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2132:	69 a9       	ldd	r22, Y+49	; 0x31
    2134:	7a a9       	ldd	r23, Y+50	; 0x32
    2136:	8b a9       	ldd	r24, Y+51	; 0x33
    2138:	9c a9       	ldd	r25, Y+52	; 0x34
    213a:	20 e0       	ldi	r18, 0x00	; 0
    213c:	30 e0       	ldi	r19, 0x00	; 0
    213e:	40 e8       	ldi	r20, 0x80	; 128
    2140:	5f e3       	ldi	r21, 0x3F	; 63
    2142:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2146:	88 23       	and	r24, r24
    2148:	2c f4       	brge	.+10     	; 0x2154 <LCD_vdInitialization+0x17c>
		__ticks = 1;
    214a:	81 e0       	ldi	r24, 0x01	; 1
    214c:	90 e0       	ldi	r25, 0x00	; 0
    214e:	98 ab       	std	Y+48, r25	; 0x30
    2150:	8f a7       	std	Y+47, r24	; 0x2f
    2152:	3f c0       	rjmp	.+126    	; 0x21d2 <LCD_vdInitialization+0x1fa>
	else if (__tmp > 65535)
    2154:	69 a9       	ldd	r22, Y+49	; 0x31
    2156:	7a a9       	ldd	r23, Y+50	; 0x32
    2158:	8b a9       	ldd	r24, Y+51	; 0x33
    215a:	9c a9       	ldd	r25, Y+52	; 0x34
    215c:	20 e0       	ldi	r18, 0x00	; 0
    215e:	3f ef       	ldi	r19, 0xFF	; 255
    2160:	4f e7       	ldi	r20, 0x7F	; 127
    2162:	57 e4       	ldi	r21, 0x47	; 71
    2164:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2168:	18 16       	cp	r1, r24
    216a:	4c f5       	brge	.+82     	; 0x21be <LCD_vdInitialization+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    216c:	6d a9       	ldd	r22, Y+53	; 0x35
    216e:	7e a9       	ldd	r23, Y+54	; 0x36
    2170:	8f a9       	ldd	r24, Y+55	; 0x37
    2172:	98 ad       	ldd	r25, Y+56	; 0x38
    2174:	20 e0       	ldi	r18, 0x00	; 0
    2176:	30 e0       	ldi	r19, 0x00	; 0
    2178:	40 e2       	ldi	r20, 0x20	; 32
    217a:	51 e4       	ldi	r21, 0x41	; 65
    217c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2180:	dc 01       	movw	r26, r24
    2182:	cb 01       	movw	r24, r22
    2184:	bc 01       	movw	r22, r24
    2186:	cd 01       	movw	r24, r26
    2188:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    218c:	dc 01       	movw	r26, r24
    218e:	cb 01       	movw	r24, r22
    2190:	98 ab       	std	Y+48, r25	; 0x30
    2192:	8f a7       	std	Y+47, r24	; 0x2f
    2194:	0f c0       	rjmp	.+30     	; 0x21b4 <LCD_vdInitialization+0x1dc>
    2196:	88 ec       	ldi	r24, 0xC8	; 200
    2198:	90 e0       	ldi	r25, 0x00	; 0
    219a:	9e a7       	std	Y+46, r25	; 0x2e
    219c:	8d a7       	std	Y+45, r24	; 0x2d
    219e:	8d a5       	ldd	r24, Y+45	; 0x2d
    21a0:	9e a5       	ldd	r25, Y+46	; 0x2e
    21a2:	01 97       	sbiw	r24, 0x01	; 1
    21a4:	f1 f7       	brne	.-4      	; 0x21a2 <LCD_vdInitialization+0x1ca>
    21a6:	9e a7       	std	Y+46, r25	; 0x2e
    21a8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21aa:	8f a5       	ldd	r24, Y+47	; 0x2f
    21ac:	98 a9       	ldd	r25, Y+48	; 0x30
    21ae:	01 97       	sbiw	r24, 0x01	; 1
    21b0:	98 ab       	std	Y+48, r25	; 0x30
    21b2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21b4:	8f a5       	ldd	r24, Y+47	; 0x2f
    21b6:	98 a9       	ldd	r25, Y+48	; 0x30
    21b8:	00 97       	sbiw	r24, 0x00	; 0
    21ba:	69 f7       	brne	.-38     	; 0x2196 <LCD_vdInitialization+0x1be>
    21bc:	14 c0       	rjmp	.+40     	; 0x21e6 <LCD_vdInitialization+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21be:	69 a9       	ldd	r22, Y+49	; 0x31
    21c0:	7a a9       	ldd	r23, Y+50	; 0x32
    21c2:	8b a9       	ldd	r24, Y+51	; 0x33
    21c4:	9c a9       	ldd	r25, Y+52	; 0x34
    21c6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21ca:	dc 01       	movw	r26, r24
    21cc:	cb 01       	movw	r24, r22
    21ce:	98 ab       	std	Y+48, r25	; 0x30
    21d0:	8f a7       	std	Y+47, r24	; 0x2f
    21d2:	8f a5       	ldd	r24, Y+47	; 0x2f
    21d4:	98 a9       	ldd	r25, Y+48	; 0x30
    21d6:	9c a7       	std	Y+44, r25	; 0x2c
    21d8:	8b a7       	std	Y+43, r24	; 0x2b
    21da:	8b a5       	ldd	r24, Y+43	; 0x2b
    21dc:	9c a5       	ldd	r25, Y+44	; 0x2c
    21de:	01 97       	sbiw	r24, 0x01	; 1
    21e0:	f1 f7       	brne	.-4      	; 0x21de <LCD_vdInitialization+0x206>
    21e2:	9c a7       	std	Y+44, r25	; 0x2c
    21e4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(10);
	LCD_vdSendCmd(LCD_U8_DISP_ON_OFF_CTRL);
    21e6:	8f e0       	ldi	r24, 0x0F	; 15
    21e8:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <LCD_vdSendCmd>
    21ec:	80 e0       	ldi	r24, 0x00	; 0
    21ee:	90 e0       	ldi	r25, 0x00	; 0
    21f0:	a0 e2       	ldi	r26, 0x20	; 32
    21f2:	b1 e4       	ldi	r27, 0x41	; 65
    21f4:	8f a3       	std	Y+39, r24	; 0x27
    21f6:	98 a7       	std	Y+40, r25	; 0x28
    21f8:	a9 a7       	std	Y+41, r26	; 0x29
    21fa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21fc:	6f a1       	ldd	r22, Y+39	; 0x27
    21fe:	78 a5       	ldd	r23, Y+40	; 0x28
    2200:	89 a5       	ldd	r24, Y+41	; 0x29
    2202:	9a a5       	ldd	r25, Y+42	; 0x2a
    2204:	20 e0       	ldi	r18, 0x00	; 0
    2206:	30 e0       	ldi	r19, 0x00	; 0
    2208:	4a ef       	ldi	r20, 0xFA	; 250
    220a:	54 e4       	ldi	r21, 0x44	; 68
    220c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2210:	dc 01       	movw	r26, r24
    2212:	cb 01       	movw	r24, r22
    2214:	8b a3       	std	Y+35, r24	; 0x23
    2216:	9c a3       	std	Y+36, r25	; 0x24
    2218:	ad a3       	std	Y+37, r26	; 0x25
    221a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    221c:	6b a1       	ldd	r22, Y+35	; 0x23
    221e:	7c a1       	ldd	r23, Y+36	; 0x24
    2220:	8d a1       	ldd	r24, Y+37	; 0x25
    2222:	9e a1       	ldd	r25, Y+38	; 0x26
    2224:	20 e0       	ldi	r18, 0x00	; 0
    2226:	30 e0       	ldi	r19, 0x00	; 0
    2228:	40 e8       	ldi	r20, 0x80	; 128
    222a:	5f e3       	ldi	r21, 0x3F	; 63
    222c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2230:	88 23       	and	r24, r24
    2232:	2c f4       	brge	.+10     	; 0x223e <LCD_vdInitialization+0x266>
		__ticks = 1;
    2234:	81 e0       	ldi	r24, 0x01	; 1
    2236:	90 e0       	ldi	r25, 0x00	; 0
    2238:	9a a3       	std	Y+34, r25	; 0x22
    223a:	89 a3       	std	Y+33, r24	; 0x21
    223c:	3f c0       	rjmp	.+126    	; 0x22bc <LCD_vdInitialization+0x2e4>
	else if (__tmp > 65535)
    223e:	6b a1       	ldd	r22, Y+35	; 0x23
    2240:	7c a1       	ldd	r23, Y+36	; 0x24
    2242:	8d a1       	ldd	r24, Y+37	; 0x25
    2244:	9e a1       	ldd	r25, Y+38	; 0x26
    2246:	20 e0       	ldi	r18, 0x00	; 0
    2248:	3f ef       	ldi	r19, 0xFF	; 255
    224a:	4f e7       	ldi	r20, 0x7F	; 127
    224c:	57 e4       	ldi	r21, 0x47	; 71
    224e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2252:	18 16       	cp	r1, r24
    2254:	4c f5       	brge	.+82     	; 0x22a8 <LCD_vdInitialization+0x2d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2256:	6f a1       	ldd	r22, Y+39	; 0x27
    2258:	78 a5       	ldd	r23, Y+40	; 0x28
    225a:	89 a5       	ldd	r24, Y+41	; 0x29
    225c:	9a a5       	ldd	r25, Y+42	; 0x2a
    225e:	20 e0       	ldi	r18, 0x00	; 0
    2260:	30 e0       	ldi	r19, 0x00	; 0
    2262:	40 e2       	ldi	r20, 0x20	; 32
    2264:	51 e4       	ldi	r21, 0x41	; 65
    2266:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    226a:	dc 01       	movw	r26, r24
    226c:	cb 01       	movw	r24, r22
    226e:	bc 01       	movw	r22, r24
    2270:	cd 01       	movw	r24, r26
    2272:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2276:	dc 01       	movw	r26, r24
    2278:	cb 01       	movw	r24, r22
    227a:	9a a3       	std	Y+34, r25	; 0x22
    227c:	89 a3       	std	Y+33, r24	; 0x21
    227e:	0f c0       	rjmp	.+30     	; 0x229e <LCD_vdInitialization+0x2c6>
    2280:	88 ec       	ldi	r24, 0xC8	; 200
    2282:	90 e0       	ldi	r25, 0x00	; 0
    2284:	98 a3       	std	Y+32, r25	; 0x20
    2286:	8f 8f       	std	Y+31, r24	; 0x1f
    2288:	8f 8d       	ldd	r24, Y+31	; 0x1f
    228a:	98 a1       	ldd	r25, Y+32	; 0x20
    228c:	01 97       	sbiw	r24, 0x01	; 1
    228e:	f1 f7       	brne	.-4      	; 0x228c <LCD_vdInitialization+0x2b4>
    2290:	98 a3       	std	Y+32, r25	; 0x20
    2292:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2294:	89 a1       	ldd	r24, Y+33	; 0x21
    2296:	9a a1       	ldd	r25, Y+34	; 0x22
    2298:	01 97       	sbiw	r24, 0x01	; 1
    229a:	9a a3       	std	Y+34, r25	; 0x22
    229c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    229e:	89 a1       	ldd	r24, Y+33	; 0x21
    22a0:	9a a1       	ldd	r25, Y+34	; 0x22
    22a2:	00 97       	sbiw	r24, 0x00	; 0
    22a4:	69 f7       	brne	.-38     	; 0x2280 <LCD_vdInitialization+0x2a8>
    22a6:	14 c0       	rjmp	.+40     	; 0x22d0 <LCD_vdInitialization+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22a8:	6b a1       	ldd	r22, Y+35	; 0x23
    22aa:	7c a1       	ldd	r23, Y+36	; 0x24
    22ac:	8d a1       	ldd	r24, Y+37	; 0x25
    22ae:	9e a1       	ldd	r25, Y+38	; 0x26
    22b0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22b4:	dc 01       	movw	r26, r24
    22b6:	cb 01       	movw	r24, r22
    22b8:	9a a3       	std	Y+34, r25	; 0x22
    22ba:	89 a3       	std	Y+33, r24	; 0x21
    22bc:	89 a1       	ldd	r24, Y+33	; 0x21
    22be:	9a a1       	ldd	r25, Y+34	; 0x22
    22c0:	9e 8f       	std	Y+30, r25	; 0x1e
    22c2:	8d 8f       	std	Y+29, r24	; 0x1d
    22c4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22c6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    22c8:	01 97       	sbiw	r24, 0x01	; 1
    22ca:	f1 f7       	brne	.-4      	; 0x22c8 <LCD_vdInitialization+0x2f0>
    22cc:	9e 8f       	std	Y+30, r25	; 0x1e
    22ce:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(10);
	LCD_vdSendCmd(LCD_U8_DISP_CLEAR);
    22d0:	81 e0       	ldi	r24, 0x01	; 1
    22d2:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <LCD_vdSendCmd>
    22d6:	80 e0       	ldi	r24, 0x00	; 0
    22d8:	90 e0       	ldi	r25, 0x00	; 0
    22da:	a0 e2       	ldi	r26, 0x20	; 32
    22dc:	b1 e4       	ldi	r27, 0x41	; 65
    22de:	89 8f       	std	Y+25, r24	; 0x19
    22e0:	9a 8f       	std	Y+26, r25	; 0x1a
    22e2:	ab 8f       	std	Y+27, r26	; 0x1b
    22e4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22e6:	69 8d       	ldd	r22, Y+25	; 0x19
    22e8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22ea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22ec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22ee:	20 e0       	ldi	r18, 0x00	; 0
    22f0:	30 e0       	ldi	r19, 0x00	; 0
    22f2:	4a ef       	ldi	r20, 0xFA	; 250
    22f4:	54 e4       	ldi	r21, 0x44	; 68
    22f6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22fa:	dc 01       	movw	r26, r24
    22fc:	cb 01       	movw	r24, r22
    22fe:	8d 8b       	std	Y+21, r24	; 0x15
    2300:	9e 8b       	std	Y+22, r25	; 0x16
    2302:	af 8b       	std	Y+23, r26	; 0x17
    2304:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2306:	6d 89       	ldd	r22, Y+21	; 0x15
    2308:	7e 89       	ldd	r23, Y+22	; 0x16
    230a:	8f 89       	ldd	r24, Y+23	; 0x17
    230c:	98 8d       	ldd	r25, Y+24	; 0x18
    230e:	20 e0       	ldi	r18, 0x00	; 0
    2310:	30 e0       	ldi	r19, 0x00	; 0
    2312:	40 e8       	ldi	r20, 0x80	; 128
    2314:	5f e3       	ldi	r21, 0x3F	; 63
    2316:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    231a:	88 23       	and	r24, r24
    231c:	2c f4       	brge	.+10     	; 0x2328 <LCD_vdInitialization+0x350>
		__ticks = 1;
    231e:	81 e0       	ldi	r24, 0x01	; 1
    2320:	90 e0       	ldi	r25, 0x00	; 0
    2322:	9c 8b       	std	Y+20, r25	; 0x14
    2324:	8b 8b       	std	Y+19, r24	; 0x13
    2326:	3f c0       	rjmp	.+126    	; 0x23a6 <LCD_vdInitialization+0x3ce>
	else if (__tmp > 65535)
    2328:	6d 89       	ldd	r22, Y+21	; 0x15
    232a:	7e 89       	ldd	r23, Y+22	; 0x16
    232c:	8f 89       	ldd	r24, Y+23	; 0x17
    232e:	98 8d       	ldd	r25, Y+24	; 0x18
    2330:	20 e0       	ldi	r18, 0x00	; 0
    2332:	3f ef       	ldi	r19, 0xFF	; 255
    2334:	4f e7       	ldi	r20, 0x7F	; 127
    2336:	57 e4       	ldi	r21, 0x47	; 71
    2338:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    233c:	18 16       	cp	r1, r24
    233e:	4c f5       	brge	.+82     	; 0x2392 <LCD_vdInitialization+0x3ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2340:	69 8d       	ldd	r22, Y+25	; 0x19
    2342:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2344:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2346:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2348:	20 e0       	ldi	r18, 0x00	; 0
    234a:	30 e0       	ldi	r19, 0x00	; 0
    234c:	40 e2       	ldi	r20, 0x20	; 32
    234e:	51 e4       	ldi	r21, 0x41	; 65
    2350:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2354:	dc 01       	movw	r26, r24
    2356:	cb 01       	movw	r24, r22
    2358:	bc 01       	movw	r22, r24
    235a:	cd 01       	movw	r24, r26
    235c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2360:	dc 01       	movw	r26, r24
    2362:	cb 01       	movw	r24, r22
    2364:	9c 8b       	std	Y+20, r25	; 0x14
    2366:	8b 8b       	std	Y+19, r24	; 0x13
    2368:	0f c0       	rjmp	.+30     	; 0x2388 <LCD_vdInitialization+0x3b0>
    236a:	88 ec       	ldi	r24, 0xC8	; 200
    236c:	90 e0       	ldi	r25, 0x00	; 0
    236e:	9a 8b       	std	Y+18, r25	; 0x12
    2370:	89 8b       	std	Y+17, r24	; 0x11
    2372:	89 89       	ldd	r24, Y+17	; 0x11
    2374:	9a 89       	ldd	r25, Y+18	; 0x12
    2376:	01 97       	sbiw	r24, 0x01	; 1
    2378:	f1 f7       	brne	.-4      	; 0x2376 <LCD_vdInitialization+0x39e>
    237a:	9a 8b       	std	Y+18, r25	; 0x12
    237c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    237e:	8b 89       	ldd	r24, Y+19	; 0x13
    2380:	9c 89       	ldd	r25, Y+20	; 0x14
    2382:	01 97       	sbiw	r24, 0x01	; 1
    2384:	9c 8b       	std	Y+20, r25	; 0x14
    2386:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2388:	8b 89       	ldd	r24, Y+19	; 0x13
    238a:	9c 89       	ldd	r25, Y+20	; 0x14
    238c:	00 97       	sbiw	r24, 0x00	; 0
    238e:	69 f7       	brne	.-38     	; 0x236a <LCD_vdInitialization+0x392>
    2390:	14 c0       	rjmp	.+40     	; 0x23ba <LCD_vdInitialization+0x3e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2392:	6d 89       	ldd	r22, Y+21	; 0x15
    2394:	7e 89       	ldd	r23, Y+22	; 0x16
    2396:	8f 89       	ldd	r24, Y+23	; 0x17
    2398:	98 8d       	ldd	r25, Y+24	; 0x18
    239a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    239e:	dc 01       	movw	r26, r24
    23a0:	cb 01       	movw	r24, r22
    23a2:	9c 8b       	std	Y+20, r25	; 0x14
    23a4:	8b 8b       	std	Y+19, r24	; 0x13
    23a6:	8b 89       	ldd	r24, Y+19	; 0x13
    23a8:	9c 89       	ldd	r25, Y+20	; 0x14
    23aa:	98 8b       	std	Y+16, r25	; 0x10
    23ac:	8f 87       	std	Y+15, r24	; 0x0f
    23ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    23b0:	98 89       	ldd	r25, Y+16	; 0x10
    23b2:	01 97       	sbiw	r24, 0x01	; 1
    23b4:	f1 f7       	brne	.-4      	; 0x23b2 <LCD_vdInitialization+0x3da>
    23b6:	98 8b       	std	Y+16, r25	; 0x10
    23b8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	LCD_vdSendCmd(LCD_U8_ENTRY_MDE);
    23ba:	86 e0       	ldi	r24, 0x06	; 6
    23bc:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <LCD_vdSendCmd>
    23c0:	80 e0       	ldi	r24, 0x00	; 0
    23c2:	90 e0       	ldi	r25, 0x00	; 0
    23c4:	a0 e2       	ldi	r26, 0x20	; 32
    23c6:	b1 e4       	ldi	r27, 0x41	; 65
    23c8:	8b 87       	std	Y+11, r24	; 0x0b
    23ca:	9c 87       	std	Y+12, r25	; 0x0c
    23cc:	ad 87       	std	Y+13, r26	; 0x0d
    23ce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    23d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    23d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    23d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    23d8:	20 e0       	ldi	r18, 0x00	; 0
    23da:	30 e0       	ldi	r19, 0x00	; 0
    23dc:	4a ef       	ldi	r20, 0xFA	; 250
    23de:	54 e4       	ldi	r21, 0x44	; 68
    23e0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23e4:	dc 01       	movw	r26, r24
    23e6:	cb 01       	movw	r24, r22
    23e8:	8f 83       	std	Y+7, r24	; 0x07
    23ea:	98 87       	std	Y+8, r25	; 0x08
    23ec:	a9 87       	std	Y+9, r26	; 0x09
    23ee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23f0:	6f 81       	ldd	r22, Y+7	; 0x07
    23f2:	78 85       	ldd	r23, Y+8	; 0x08
    23f4:	89 85       	ldd	r24, Y+9	; 0x09
    23f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    23f8:	20 e0       	ldi	r18, 0x00	; 0
    23fa:	30 e0       	ldi	r19, 0x00	; 0
    23fc:	40 e8       	ldi	r20, 0x80	; 128
    23fe:	5f e3       	ldi	r21, 0x3F	; 63
    2400:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2404:	88 23       	and	r24, r24
    2406:	2c f4       	brge	.+10     	; 0x2412 <LCD_vdInitialization+0x43a>
		__ticks = 1;
    2408:	81 e0       	ldi	r24, 0x01	; 1
    240a:	90 e0       	ldi	r25, 0x00	; 0
    240c:	9e 83       	std	Y+6, r25	; 0x06
    240e:	8d 83       	std	Y+5, r24	; 0x05
    2410:	3f c0       	rjmp	.+126    	; 0x2490 <LCD_vdInitialization+0x4b8>
	else if (__tmp > 65535)
    2412:	6f 81       	ldd	r22, Y+7	; 0x07
    2414:	78 85       	ldd	r23, Y+8	; 0x08
    2416:	89 85       	ldd	r24, Y+9	; 0x09
    2418:	9a 85       	ldd	r25, Y+10	; 0x0a
    241a:	20 e0       	ldi	r18, 0x00	; 0
    241c:	3f ef       	ldi	r19, 0xFF	; 255
    241e:	4f e7       	ldi	r20, 0x7F	; 127
    2420:	57 e4       	ldi	r21, 0x47	; 71
    2422:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2426:	18 16       	cp	r1, r24
    2428:	4c f5       	brge	.+82     	; 0x247c <LCD_vdInitialization+0x4a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    242a:	6b 85       	ldd	r22, Y+11	; 0x0b
    242c:	7c 85       	ldd	r23, Y+12	; 0x0c
    242e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2430:	9e 85       	ldd	r25, Y+14	; 0x0e
    2432:	20 e0       	ldi	r18, 0x00	; 0
    2434:	30 e0       	ldi	r19, 0x00	; 0
    2436:	40 e2       	ldi	r20, 0x20	; 32
    2438:	51 e4       	ldi	r21, 0x41	; 65
    243a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    243e:	dc 01       	movw	r26, r24
    2440:	cb 01       	movw	r24, r22
    2442:	bc 01       	movw	r22, r24
    2444:	cd 01       	movw	r24, r26
    2446:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    244a:	dc 01       	movw	r26, r24
    244c:	cb 01       	movw	r24, r22
    244e:	9e 83       	std	Y+6, r25	; 0x06
    2450:	8d 83       	std	Y+5, r24	; 0x05
    2452:	0f c0       	rjmp	.+30     	; 0x2472 <LCD_vdInitialization+0x49a>
    2454:	88 ec       	ldi	r24, 0xC8	; 200
    2456:	90 e0       	ldi	r25, 0x00	; 0
    2458:	9c 83       	std	Y+4, r25	; 0x04
    245a:	8b 83       	std	Y+3, r24	; 0x03
    245c:	8b 81       	ldd	r24, Y+3	; 0x03
    245e:	9c 81       	ldd	r25, Y+4	; 0x04
    2460:	01 97       	sbiw	r24, 0x01	; 1
    2462:	f1 f7       	brne	.-4      	; 0x2460 <LCD_vdInitialization+0x488>
    2464:	9c 83       	std	Y+4, r25	; 0x04
    2466:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2468:	8d 81       	ldd	r24, Y+5	; 0x05
    246a:	9e 81       	ldd	r25, Y+6	; 0x06
    246c:	01 97       	sbiw	r24, 0x01	; 1
    246e:	9e 83       	std	Y+6, r25	; 0x06
    2470:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2472:	8d 81       	ldd	r24, Y+5	; 0x05
    2474:	9e 81       	ldd	r25, Y+6	; 0x06
    2476:	00 97       	sbiw	r24, 0x00	; 0
    2478:	69 f7       	brne	.-38     	; 0x2454 <LCD_vdInitialization+0x47c>
    247a:	14 c0       	rjmp	.+40     	; 0x24a4 <LCD_vdInitialization+0x4cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    247c:	6f 81       	ldd	r22, Y+7	; 0x07
    247e:	78 85       	ldd	r23, Y+8	; 0x08
    2480:	89 85       	ldd	r24, Y+9	; 0x09
    2482:	9a 85       	ldd	r25, Y+10	; 0x0a
    2484:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2488:	dc 01       	movw	r26, r24
    248a:	cb 01       	movw	r24, r22
    248c:	9e 83       	std	Y+6, r25	; 0x06
    248e:	8d 83       	std	Y+5, r24	; 0x05
    2490:	8d 81       	ldd	r24, Y+5	; 0x05
    2492:	9e 81       	ldd	r25, Y+6	; 0x06
    2494:	9a 83       	std	Y+2, r25	; 0x02
    2496:	89 83       	std	Y+1, r24	; 0x01
    2498:	89 81       	ldd	r24, Y+1	; 0x01
    249a:	9a 81       	ldd	r25, Y+2	; 0x02
    249c:	01 97       	sbiw	r24, 0x01	; 1
    249e:	f1 f7       	brne	.-4      	; 0x249c <LCD_vdInitialization+0x4c4>
    24a0:	9a 83       	std	Y+2, r25	; 0x02
    24a2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    24a4:	ca 5b       	subi	r28, 0xBA	; 186
    24a6:	df 4f       	sbci	r29, 0xFF	; 255
    24a8:	0f b6       	in	r0, 0x3f	; 63
    24aa:	f8 94       	cli
    24ac:	de bf       	out	0x3e, r29	; 62
    24ae:	0f be       	out	0x3f, r0	; 63
    24b0:	cd bf       	out	0x3d, r28	; 61
    24b2:	cf 91       	pop	r28
    24b4:	df 91       	pop	r29
    24b6:	1f 91       	pop	r17
    24b8:	0f 91       	pop	r16
    24ba:	08 95       	ret

000024bc <LCD_vdWriteString>:

void LCD_vdWriteString(u8 *LOC_u8Ptr)
{
    24bc:	df 93       	push	r29
    24be:	cf 93       	push	r28
    24c0:	00 d0       	rcall	.+0      	; 0x24c2 <LCD_vdWriteString+0x6>
    24c2:	cd b7       	in	r28, 0x3d	; 61
    24c4:	de b7       	in	r29, 0x3e	; 62
    24c6:	9a 83       	std	Y+2, r25	; 0x02
    24c8:	89 83       	std	Y+1, r24	; 0x01
    24ca:	0a c0       	rjmp	.+20     	; 0x24e0 <LCD_vdWriteString+0x24>
	while(*LOC_u8Ptr != '\0')
	{
		LCD_vdSendChar(*LOC_u8Ptr);
    24cc:	e9 81       	ldd	r30, Y+1	; 0x01
    24ce:	fa 81       	ldd	r31, Y+2	; 0x02
    24d0:	80 81       	ld	r24, Z
    24d2:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <LCD_vdSendChar>
		LOC_u8Ptr++;
    24d6:	89 81       	ldd	r24, Y+1	; 0x01
    24d8:	9a 81       	ldd	r25, Y+2	; 0x02
    24da:	01 96       	adiw	r24, 0x01	; 1
    24dc:	9a 83       	std	Y+2, r25	; 0x02
    24de:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}

void LCD_vdWriteString(u8 *LOC_u8Ptr)
{
	while(*LOC_u8Ptr != '\0')
    24e0:	e9 81       	ldd	r30, Y+1	; 0x01
    24e2:	fa 81       	ldd	r31, Y+2	; 0x02
    24e4:	80 81       	ld	r24, Z
    24e6:	88 23       	and	r24, r24
    24e8:	89 f7       	brne	.-30     	; 0x24cc <LCD_vdWriteString+0x10>
	{
		LCD_vdSendChar(*LOC_u8Ptr);
		LOC_u8Ptr++;
	}
}
    24ea:	0f 90       	pop	r0
    24ec:	0f 90       	pop	r0
    24ee:	cf 91       	pop	r28
    24f0:	df 91       	pop	r29
    24f2:	08 95       	ret

000024f4 <LCD_vdStringPostion>:

void LCD_vdStringPostion (u8 row, u8 pos, u8 *LOC_u8Ptr)
{
    24f4:	df 93       	push	r29
    24f6:	cf 93       	push	r28
    24f8:	00 d0       	rcall	.+0      	; 0x24fa <LCD_vdStringPostion+0x6>
    24fa:	00 d0       	rcall	.+0      	; 0x24fc <LCD_vdStringPostion+0x8>
    24fc:	cd b7       	in	r28, 0x3d	; 61
    24fe:	de b7       	in	r29, 0x3e	; 62
    2500:	89 83       	std	Y+1, r24	; 0x01
    2502:	6a 83       	std	Y+2, r22	; 0x02
    2504:	5c 83       	std	Y+4, r21	; 0x04
    2506:	4b 83       	std	Y+3, r20	; 0x03
	if (row == 0 && pos<16)
    2508:	89 81       	ldd	r24, Y+1	; 0x01
    250a:	88 23       	and	r24, r24
    250c:	49 f4       	brne	.+18     	; 0x2520 <LCD_vdStringPostion+0x2c>
    250e:	8a 81       	ldd	r24, Y+2	; 0x02
    2510:	80 31       	cpi	r24, 0x10	; 16
    2512:	30 f4       	brcc	.+12     	; 0x2520 <LCD_vdStringPostion+0x2c>
		LCD_vdSendCmd((pos & 0x0F)|0x80);	/* Command of first row and required position<16 */
    2514:	8a 81       	ldd	r24, Y+2	; 0x02
    2516:	8f 70       	andi	r24, 0x0F	; 15
    2518:	80 68       	ori	r24, 0x80	; 128
    251a:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <LCD_vdSendCmd>
    251e:	0b c0       	rjmp	.+22     	; 0x2536 <LCD_vdStringPostion+0x42>
	else if (row == 1 && pos<16)
    2520:	89 81       	ldd	r24, Y+1	; 0x01
    2522:	81 30       	cpi	r24, 0x01	; 1
    2524:	41 f4       	brne	.+16     	; 0x2536 <LCD_vdStringPostion+0x42>
    2526:	8a 81       	ldd	r24, Y+2	; 0x02
    2528:	80 31       	cpi	r24, 0x10	; 16
    252a:	28 f4       	brcc	.+10     	; 0x2536 <LCD_vdStringPostion+0x42>
		LCD_vdSendCmd((pos & 0x0F)|0xC0);	/* Command of first row and required position<16 */
    252c:	8a 81       	ldd	r24, Y+2	; 0x02
    252e:	8f 70       	andi	r24, 0x0F	; 15
    2530:	80 6c       	ori	r24, 0xC0	; 192
    2532:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <LCD_vdSendCmd>
	LCD_vdWriteString(LOC_u8Ptr);
    2536:	8b 81       	ldd	r24, Y+3	; 0x03
    2538:	9c 81       	ldd	r25, Y+4	; 0x04
    253a:	0e 94 5e 12 	call	0x24bc	; 0x24bc <LCD_vdWriteString>
}
    253e:	0f 90       	pop	r0
    2540:	0f 90       	pop	r0
    2542:	0f 90       	pop	r0
    2544:	0f 90       	pop	r0
    2546:	cf 91       	pop	r28
    2548:	df 91       	pop	r29
    254a:	08 95       	ret

0000254c <LCD_vdClear>:

void LCD_vdClear()
{
    254c:	df 93       	push	r29
    254e:	cf 93       	push	r28
    2550:	cd b7       	in	r28, 0x3d	; 61
    2552:	de b7       	in	r29, 0x3e	; 62
	LCD_vdSendCmd (0x01);		/* clear display */
    2554:	81 e0       	ldi	r24, 0x01	; 1
    2556:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <LCD_vdSendCmd>
}
    255a:	cf 91       	pop	r28
    255c:	df 91       	pop	r29
    255e:	08 95       	ret

00002560 <LCD_vdSendDataoCGRAM>:

void LCD_vdSendDataoCGRAM(u8* ptr)
{
    2560:	df 93       	push	r29
    2562:	cf 93       	push	r28
    2564:	00 d0       	rcall	.+0      	; 0x2566 <LCD_vdSendDataoCGRAM+0x6>
    2566:	0f 92       	push	r0
    2568:	cd b7       	in	r28, 0x3d	; 61
    256a:	de b7       	in	r29, 0x3e	; 62
    256c:	9b 83       	std	Y+3, r25	; 0x03
    256e:	8a 83       	std	Y+2, r24	; 0x02
	LCD_vdSendCmd(CGRAM);
    2570:	80 e4       	ldi	r24, 0x40	; 64
    2572:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <LCD_vdSendCmd>
	for(u8 x=0; x<6; x++)
    2576:	19 82       	std	Y+1, r1	; 0x01
    2578:	0d c0       	rjmp	.+26     	; 0x2594 <LCD_vdSendDataoCGRAM+0x34>
	{
		LCD_vdSendChar(*ptr);
    257a:	ea 81       	ldd	r30, Y+2	; 0x02
    257c:	fb 81       	ldd	r31, Y+3	; 0x03
    257e:	80 81       	ld	r24, Z
    2580:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <LCD_vdSendChar>
		ptr++;
    2584:	8a 81       	ldd	r24, Y+2	; 0x02
    2586:	9b 81       	ldd	r25, Y+3	; 0x03
    2588:	01 96       	adiw	r24, 0x01	; 1
    258a:	9b 83       	std	Y+3, r25	; 0x03
    258c:	8a 83       	std	Y+2, r24	; 0x02
}

void LCD_vdSendDataoCGRAM(u8* ptr)
{
	LCD_vdSendCmd(CGRAM);
	for(u8 x=0; x<6; x++)
    258e:	89 81       	ldd	r24, Y+1	; 0x01
    2590:	8f 5f       	subi	r24, 0xFF	; 255
    2592:	89 83       	std	Y+1, r24	; 0x01
    2594:	89 81       	ldd	r24, Y+1	; 0x01
    2596:	86 30       	cpi	r24, 0x06	; 6
    2598:	80 f3       	brcs	.-32     	; 0x257a <LCD_vdSendDataoCGRAM+0x1a>
	{
		LCD_vdSendChar(*ptr);
		ptr++;
	}
}
    259a:	0f 90       	pop	r0
    259c:	0f 90       	pop	r0
    259e:	0f 90       	pop	r0
    25a0:	cf 91       	pop	r28
    25a2:	df 91       	pop	r29
    25a4:	08 95       	ret

000025a6 <LCD_vdGotoDDRAM>:

void LCD_vdGotoDDRAM(u8 row, u8 pos)
{
    25a6:	df 93       	push	r29
    25a8:	cf 93       	push	r28
    25aa:	00 d0       	rcall	.+0      	; 0x25ac <LCD_vdGotoDDRAM+0x6>
    25ac:	cd b7       	in	r28, 0x3d	; 61
    25ae:	de b7       	in	r29, 0x3e	; 62
    25b0:	89 83       	std	Y+1, r24	; 0x01
    25b2:	6a 83       	std	Y+2, r22	; 0x02

	if (row == 0 && pos<16)
    25b4:	89 81       	ldd	r24, Y+1	; 0x01
    25b6:	88 23       	and	r24, r24
    25b8:	49 f4       	brne	.+18     	; 0x25cc <LCD_vdGotoDDRAM+0x26>
    25ba:	8a 81       	ldd	r24, Y+2	; 0x02
    25bc:	80 31       	cpi	r24, 0x10	; 16
    25be:	30 f4       	brcc	.+12     	; 0x25cc <LCD_vdGotoDDRAM+0x26>
		LCD_vdSendCmd((pos & 0x0F)|DDRAM_ROW0);
    25c0:	8a 81       	ldd	r24, Y+2	; 0x02
    25c2:	8f 70       	andi	r24, 0x0F	; 15
    25c4:	80 68       	ori	r24, 0x80	; 128
    25c6:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <LCD_vdSendCmd>
    25ca:	0b c0       	rjmp	.+22     	; 0x25e2 <LCD_vdGotoDDRAM+0x3c>
	else if (row == 1 && pos<16)
    25cc:	89 81       	ldd	r24, Y+1	; 0x01
    25ce:	81 30       	cpi	r24, 0x01	; 1
    25d0:	41 f4       	brne	.+16     	; 0x25e2 <LCD_vdGotoDDRAM+0x3c>
    25d2:	8a 81       	ldd	r24, Y+2	; 0x02
    25d4:	80 31       	cpi	r24, 0x10	; 16
    25d6:	28 f4       	brcc	.+10     	; 0x25e2 <LCD_vdGotoDDRAM+0x3c>
		LCD_vdSendCmd((pos & 0x0F)|DDRAM_ROW1);
    25d8:	8a 81       	ldd	r24, Y+2	; 0x02
    25da:	8f 70       	andi	r24, 0x0F	; 15
    25dc:	80 6c       	ori	r24, 0xC0	; 192
    25de:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <LCD_vdSendCmd>
}
    25e2:	0f 90       	pop	r0
    25e4:	0f 90       	pop	r0
    25e6:	cf 91       	pop	r28
    25e8:	df 91       	pop	r29
    25ea:	08 95       	ret

000025ec <LCD_vdWriteNum>:

void LCD_vdWriteNum(u32 num)
{
    25ec:	df 93       	push	r29
    25ee:	cf 93       	push	r28
    25f0:	cd b7       	in	r28, 0x3d	; 61
    25f2:	de b7       	in	r29, 0x3e	; 62
    25f4:	2a 97       	sbiw	r28, 0x0a	; 10
    25f6:	0f b6       	in	r0, 0x3f	; 63
    25f8:	f8 94       	cli
    25fa:	de bf       	out	0x3e, r29	; 62
    25fc:	0f be       	out	0x3f, r0	; 63
    25fe:	cd bf       	out	0x3d, r28	; 61
    2600:	6f 83       	std	Y+7, r22	; 0x07
    2602:	78 87       	std	Y+8, r23	; 0x08
    2604:	89 87       	std	Y+9, r24	; 0x09
    2606:	9a 87       	std	Y+10, r25	; 0x0a
	u32 reverse=0;
    2608:	1b 82       	std	Y+3, r1	; 0x03
    260a:	1c 82       	std	Y+4, r1	; 0x04
    260c:	1d 82       	std	Y+5, r1	; 0x05
    260e:	1e 82       	std	Y+6, r1	; 0x06
	u8 reminder=0;
    2610:	1a 82       	std	Y+2, r1	; 0x02
	u8 flag=0;
    2612:	19 82       	std	Y+1, r1	; 0x01
	if(num<=0)
    2614:	8f 81       	ldd	r24, Y+7	; 0x07
    2616:	98 85       	ldd	r25, Y+8	; 0x08
    2618:	a9 85       	ldd	r26, Y+9	; 0x09
    261a:	ba 85       	ldd	r27, Y+10	; 0x0a
    261c:	00 97       	sbiw	r24, 0x00	; 0
    261e:	a1 05       	cpc	r26, r1
    2620:	b1 05       	cpc	r27, r1
    2622:	91 f4       	brne	.+36     	; 0x2648 <LCD_vdWriteNum+0x5c>
	{
		LCD_vdSendChar('-');
    2624:	8d e2       	ldi	r24, 0x2D	; 45
    2626:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <LCD_vdSendChar>
		num*=-1;
    262a:	8f 81       	ldd	r24, Y+7	; 0x07
    262c:	98 85       	ldd	r25, Y+8	; 0x08
    262e:	a9 85       	ldd	r26, Y+9	; 0x09
    2630:	ba 85       	ldd	r27, Y+10	; 0x0a
    2632:	b0 95       	com	r27
    2634:	a0 95       	com	r26
    2636:	90 95       	com	r25
    2638:	81 95       	neg	r24
    263a:	9f 4f       	sbci	r25, 0xFF	; 255
    263c:	af 4f       	sbci	r26, 0xFF	; 255
    263e:	bf 4f       	sbci	r27, 0xFF	; 255
    2640:	8f 83       	std	Y+7, r24	; 0x07
    2642:	98 87       	std	Y+8, r25	; 0x08
    2644:	a9 87       	std	Y+9, r26	; 0x09
    2646:	ba 87       	std	Y+10, r27	; 0x0a
	}
	if(num>=10)
    2648:	8f 81       	ldd	r24, Y+7	; 0x07
    264a:	98 85       	ldd	r25, Y+8	; 0x08
    264c:	a9 85       	ldd	r26, Y+9	; 0x09
    264e:	ba 85       	ldd	r27, Y+10	; 0x0a
    2650:	8a 30       	cpi	r24, 0x0A	; 10
    2652:	91 05       	cpc	r25, r1
    2654:	a1 05       	cpc	r26, r1
    2656:	b1 05       	cpc	r27, r1
    2658:	08 f4       	brcc	.+2      	; 0x265c <LCD_vdWriteNum+0x70>
    265a:	8d c0       	rjmp	.+282    	; 0x2776 <LCD_vdWriteNum+0x18a>
    265c:	4a c0       	rjmp	.+148    	; 0x26f2 <LCD_vdWriteNum+0x106>
	{
		while(num !=0)
		{
			reminder = num%10;
    265e:	8f 81       	ldd	r24, Y+7	; 0x07
    2660:	98 85       	ldd	r25, Y+8	; 0x08
    2662:	a9 85       	ldd	r26, Y+9	; 0x09
    2664:	ba 85       	ldd	r27, Y+10	; 0x0a
    2666:	2a e0       	ldi	r18, 0x0A	; 10
    2668:	30 e0       	ldi	r19, 0x00	; 0
    266a:	40 e0       	ldi	r20, 0x00	; 0
    266c:	50 e0       	ldi	r21, 0x00	; 0
    266e:	bc 01       	movw	r22, r24
    2670:	cd 01       	movw	r24, r26
    2672:	0e 94 e7 13 	call	0x27ce	; 0x27ce <__udivmodsi4>
    2676:	dc 01       	movw	r26, r24
    2678:	cb 01       	movw	r24, r22
    267a:	8a 83       	std	Y+2, r24	; 0x02
			reverse = reverse*10+reminder;
    267c:	8b 81       	ldd	r24, Y+3	; 0x03
    267e:	9c 81       	ldd	r25, Y+4	; 0x04
    2680:	ad 81       	ldd	r26, Y+5	; 0x05
    2682:	be 81       	ldd	r27, Y+6	; 0x06
    2684:	2a e0       	ldi	r18, 0x0A	; 10
    2686:	30 e0       	ldi	r19, 0x00	; 0
    2688:	40 e0       	ldi	r20, 0x00	; 0
    268a:	50 e0       	ldi	r21, 0x00	; 0
    268c:	bc 01       	movw	r22, r24
    268e:	cd 01       	movw	r24, r26
    2690:	0e 94 c8 13 	call	0x2790	; 0x2790 <__mulsi3>
    2694:	9b 01       	movw	r18, r22
    2696:	ac 01       	movw	r20, r24
    2698:	8a 81       	ldd	r24, Y+2	; 0x02
    269a:	88 2f       	mov	r24, r24
    269c:	90 e0       	ldi	r25, 0x00	; 0
    269e:	a0 e0       	ldi	r26, 0x00	; 0
    26a0:	b0 e0       	ldi	r27, 0x00	; 0
    26a2:	82 0f       	add	r24, r18
    26a4:	93 1f       	adc	r25, r19
    26a6:	a4 1f       	adc	r26, r20
    26a8:	b5 1f       	adc	r27, r21
    26aa:	8b 83       	std	Y+3, r24	; 0x03
    26ac:	9c 83       	std	Y+4, r25	; 0x04
    26ae:	ad 83       	std	Y+5, r26	; 0x05
    26b0:	be 83       	std	Y+6, r27	; 0x06
			if(reminder==0 && reverse==0)
    26b2:	8a 81       	ldd	r24, Y+2	; 0x02
    26b4:	88 23       	and	r24, r24
    26b6:	59 f4       	brne	.+22     	; 0x26ce <LCD_vdWriteNum+0xe2>
    26b8:	8b 81       	ldd	r24, Y+3	; 0x03
    26ba:	9c 81       	ldd	r25, Y+4	; 0x04
    26bc:	ad 81       	ldd	r26, Y+5	; 0x05
    26be:	be 81       	ldd	r27, Y+6	; 0x06
    26c0:	00 97       	sbiw	r24, 0x00	; 0
    26c2:	a1 05       	cpc	r26, r1
    26c4:	b1 05       	cpc	r27, r1
    26c6:	19 f4       	brne	.+6      	; 0x26ce <LCD_vdWriteNum+0xe2>
				flag++;
    26c8:	89 81       	ldd	r24, Y+1	; 0x01
    26ca:	8f 5f       	subi	r24, 0xFF	; 255
    26cc:	89 83       	std	Y+1, r24	; 0x01
			num/=10;
    26ce:	8f 81       	ldd	r24, Y+7	; 0x07
    26d0:	98 85       	ldd	r25, Y+8	; 0x08
    26d2:	a9 85       	ldd	r26, Y+9	; 0x09
    26d4:	ba 85       	ldd	r27, Y+10	; 0x0a
    26d6:	2a e0       	ldi	r18, 0x0A	; 10
    26d8:	30 e0       	ldi	r19, 0x00	; 0
    26da:	40 e0       	ldi	r20, 0x00	; 0
    26dc:	50 e0       	ldi	r21, 0x00	; 0
    26de:	bc 01       	movw	r22, r24
    26e0:	cd 01       	movw	r24, r26
    26e2:	0e 94 e7 13 	call	0x27ce	; 0x27ce <__udivmodsi4>
    26e6:	da 01       	movw	r26, r20
    26e8:	c9 01       	movw	r24, r18
    26ea:	8f 83       	std	Y+7, r24	; 0x07
    26ec:	98 87       	std	Y+8, r25	; 0x08
    26ee:	a9 87       	std	Y+9, r26	; 0x09
    26f0:	ba 87       	std	Y+10, r27	; 0x0a
		LCD_vdSendChar('-');
		num*=-1;
	}
	if(num>=10)
	{
		while(num !=0)
    26f2:	8f 81       	ldd	r24, Y+7	; 0x07
    26f4:	98 85       	ldd	r25, Y+8	; 0x08
    26f6:	a9 85       	ldd	r26, Y+9	; 0x09
    26f8:	ba 85       	ldd	r27, Y+10	; 0x0a
    26fa:	00 97       	sbiw	r24, 0x00	; 0
    26fc:	a1 05       	cpc	r26, r1
    26fe:	b1 05       	cpc	r27, r1
    2700:	09 f0       	breq	.+2      	; 0x2704 <LCD_vdWriteNum+0x118>
    2702:	ad cf       	rjmp	.-166    	; 0x265e <LCD_vdWriteNum+0x72>
    2704:	25 c0       	rjmp	.+74     	; 0x2750 <LCD_vdWriteNum+0x164>
				flag++;
			num/=10;
		}
		while(reverse !=0)
		{
			reminder = reverse%10;
    2706:	8b 81       	ldd	r24, Y+3	; 0x03
    2708:	9c 81       	ldd	r25, Y+4	; 0x04
    270a:	ad 81       	ldd	r26, Y+5	; 0x05
    270c:	be 81       	ldd	r27, Y+6	; 0x06
    270e:	2a e0       	ldi	r18, 0x0A	; 10
    2710:	30 e0       	ldi	r19, 0x00	; 0
    2712:	40 e0       	ldi	r20, 0x00	; 0
    2714:	50 e0       	ldi	r21, 0x00	; 0
    2716:	bc 01       	movw	r22, r24
    2718:	cd 01       	movw	r24, r26
    271a:	0e 94 e7 13 	call	0x27ce	; 0x27ce <__udivmodsi4>
    271e:	dc 01       	movw	r26, r24
    2720:	cb 01       	movw	r24, r22
    2722:	8a 83       	std	Y+2, r24	; 0x02
			LCD_vdSendChar(reminder+'0');
    2724:	8a 81       	ldd	r24, Y+2	; 0x02
    2726:	80 5d       	subi	r24, 0xD0	; 208
    2728:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <LCD_vdSendChar>
			reverse/=10;
    272c:	8b 81       	ldd	r24, Y+3	; 0x03
    272e:	9c 81       	ldd	r25, Y+4	; 0x04
    2730:	ad 81       	ldd	r26, Y+5	; 0x05
    2732:	be 81       	ldd	r27, Y+6	; 0x06
    2734:	2a e0       	ldi	r18, 0x0A	; 10
    2736:	30 e0       	ldi	r19, 0x00	; 0
    2738:	40 e0       	ldi	r20, 0x00	; 0
    273a:	50 e0       	ldi	r21, 0x00	; 0
    273c:	bc 01       	movw	r22, r24
    273e:	cd 01       	movw	r24, r26
    2740:	0e 94 e7 13 	call	0x27ce	; 0x27ce <__udivmodsi4>
    2744:	da 01       	movw	r26, r20
    2746:	c9 01       	movw	r24, r18
    2748:	8b 83       	std	Y+3, r24	; 0x03
    274a:	9c 83       	std	Y+4, r25	; 0x04
    274c:	ad 83       	std	Y+5, r26	; 0x05
    274e:	be 83       	std	Y+6, r27	; 0x06
			reverse = reverse*10+reminder;
			if(reminder==0 && reverse==0)
				flag++;
			num/=10;
		}
		while(reverse !=0)
    2750:	8b 81       	ldd	r24, Y+3	; 0x03
    2752:	9c 81       	ldd	r25, Y+4	; 0x04
    2754:	ad 81       	ldd	r26, Y+5	; 0x05
    2756:	be 81       	ldd	r27, Y+6	; 0x06
    2758:	00 97       	sbiw	r24, 0x00	; 0
    275a:	a1 05       	cpc	r26, r1
    275c:	b1 05       	cpc	r27, r1
    275e:	99 f6       	brne	.-90     	; 0x2706 <LCD_vdWriteNum+0x11a>
    2760:	06 c0       	rjmp	.+12     	; 0x276e <LCD_vdWriteNum+0x182>
			reminder = reverse%10;
			LCD_vdSendChar(reminder+'0');
			reverse/=10;
		}
		while(flag!=0){
			LCD_vdSendChar('0');
    2762:	80 e3       	ldi	r24, 0x30	; 48
    2764:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <LCD_vdSendChar>
		    flag--;
    2768:	89 81       	ldd	r24, Y+1	; 0x01
    276a:	81 50       	subi	r24, 0x01	; 1
    276c:	89 83       	std	Y+1, r24	; 0x01
		{
			reminder = reverse%10;
			LCD_vdSendChar(reminder+'0');
			reverse/=10;
		}
		while(flag!=0){
    276e:	89 81       	ldd	r24, Y+1	; 0x01
    2770:	88 23       	and	r24, r24
    2772:	b9 f7       	brne	.-18     	; 0x2762 <LCD_vdWriteNum+0x176>
    2774:	04 c0       	rjmp	.+8      	; 0x277e <LCD_vdWriteNum+0x192>
		}

	}
	else
	{
		LCD_vdSendChar(num+'0');
    2776:	8f 81       	ldd	r24, Y+7	; 0x07
    2778:	80 5d       	subi	r24, 0xD0	; 208
    277a:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <LCD_vdSendChar>
	}
}
    277e:	2a 96       	adiw	r28, 0x0a	; 10
    2780:	0f b6       	in	r0, 0x3f	; 63
    2782:	f8 94       	cli
    2784:	de bf       	out	0x3e, r29	; 62
    2786:	0f be       	out	0x3f, r0	; 63
    2788:	cd bf       	out	0x3d, r28	; 61
    278a:	cf 91       	pop	r28
    278c:	df 91       	pop	r29
    278e:	08 95       	ret

00002790 <__mulsi3>:
    2790:	62 9f       	mul	r22, r18
    2792:	d0 01       	movw	r26, r0
    2794:	73 9f       	mul	r23, r19
    2796:	f0 01       	movw	r30, r0
    2798:	82 9f       	mul	r24, r18
    279a:	e0 0d       	add	r30, r0
    279c:	f1 1d       	adc	r31, r1
    279e:	64 9f       	mul	r22, r20
    27a0:	e0 0d       	add	r30, r0
    27a2:	f1 1d       	adc	r31, r1
    27a4:	92 9f       	mul	r25, r18
    27a6:	f0 0d       	add	r31, r0
    27a8:	83 9f       	mul	r24, r19
    27aa:	f0 0d       	add	r31, r0
    27ac:	74 9f       	mul	r23, r20
    27ae:	f0 0d       	add	r31, r0
    27b0:	65 9f       	mul	r22, r21
    27b2:	f0 0d       	add	r31, r0
    27b4:	99 27       	eor	r25, r25
    27b6:	72 9f       	mul	r23, r18
    27b8:	b0 0d       	add	r27, r0
    27ba:	e1 1d       	adc	r30, r1
    27bc:	f9 1f       	adc	r31, r25
    27be:	63 9f       	mul	r22, r19
    27c0:	b0 0d       	add	r27, r0
    27c2:	e1 1d       	adc	r30, r1
    27c4:	f9 1f       	adc	r31, r25
    27c6:	bd 01       	movw	r22, r26
    27c8:	cf 01       	movw	r24, r30
    27ca:	11 24       	eor	r1, r1
    27cc:	08 95       	ret

000027ce <__udivmodsi4>:
    27ce:	a1 e2       	ldi	r26, 0x21	; 33
    27d0:	1a 2e       	mov	r1, r26
    27d2:	aa 1b       	sub	r26, r26
    27d4:	bb 1b       	sub	r27, r27
    27d6:	fd 01       	movw	r30, r26
    27d8:	0d c0       	rjmp	.+26     	; 0x27f4 <__udivmodsi4_ep>

000027da <__udivmodsi4_loop>:
    27da:	aa 1f       	adc	r26, r26
    27dc:	bb 1f       	adc	r27, r27
    27de:	ee 1f       	adc	r30, r30
    27e0:	ff 1f       	adc	r31, r31
    27e2:	a2 17       	cp	r26, r18
    27e4:	b3 07       	cpc	r27, r19
    27e6:	e4 07       	cpc	r30, r20
    27e8:	f5 07       	cpc	r31, r21
    27ea:	20 f0       	brcs	.+8      	; 0x27f4 <__udivmodsi4_ep>
    27ec:	a2 1b       	sub	r26, r18
    27ee:	b3 0b       	sbc	r27, r19
    27f0:	e4 0b       	sbc	r30, r20
    27f2:	f5 0b       	sbc	r31, r21

000027f4 <__udivmodsi4_ep>:
    27f4:	66 1f       	adc	r22, r22
    27f6:	77 1f       	adc	r23, r23
    27f8:	88 1f       	adc	r24, r24
    27fa:	99 1f       	adc	r25, r25
    27fc:	1a 94       	dec	r1
    27fe:	69 f7       	brne	.-38     	; 0x27da <__udivmodsi4_loop>
    2800:	60 95       	com	r22
    2802:	70 95       	com	r23
    2804:	80 95       	com	r24
    2806:	90 95       	com	r25
    2808:	9b 01       	movw	r18, r22
    280a:	ac 01       	movw	r20, r24
    280c:	bd 01       	movw	r22, r26
    280e:	cf 01       	movw	r24, r30
    2810:	08 95       	ret

00002812 <__divmodsi4>:
    2812:	97 fb       	bst	r25, 7
    2814:	09 2e       	mov	r0, r25
    2816:	05 26       	eor	r0, r21
    2818:	0e d0       	rcall	.+28     	; 0x2836 <__divmodsi4_neg1>
    281a:	57 fd       	sbrc	r21, 7
    281c:	04 d0       	rcall	.+8      	; 0x2826 <__divmodsi4_neg2>
    281e:	d7 df       	rcall	.-82     	; 0x27ce <__udivmodsi4>
    2820:	0a d0       	rcall	.+20     	; 0x2836 <__divmodsi4_neg1>
    2822:	00 1c       	adc	r0, r0
    2824:	38 f4       	brcc	.+14     	; 0x2834 <__divmodsi4_exit>

00002826 <__divmodsi4_neg2>:
    2826:	50 95       	com	r21
    2828:	40 95       	com	r20
    282a:	30 95       	com	r19
    282c:	21 95       	neg	r18
    282e:	3f 4f       	sbci	r19, 0xFF	; 255
    2830:	4f 4f       	sbci	r20, 0xFF	; 255
    2832:	5f 4f       	sbci	r21, 0xFF	; 255

00002834 <__divmodsi4_exit>:
    2834:	08 95       	ret

00002836 <__divmodsi4_neg1>:
    2836:	f6 f7       	brtc	.-4      	; 0x2834 <__divmodsi4_exit>
    2838:	90 95       	com	r25
    283a:	80 95       	com	r24
    283c:	70 95       	com	r23
    283e:	61 95       	neg	r22
    2840:	7f 4f       	sbci	r23, 0xFF	; 255
    2842:	8f 4f       	sbci	r24, 0xFF	; 255
    2844:	9f 4f       	sbci	r25, 0xFF	; 255
    2846:	08 95       	ret

00002848 <__prologue_saves__>:
    2848:	2f 92       	push	r2
    284a:	3f 92       	push	r3
    284c:	4f 92       	push	r4
    284e:	5f 92       	push	r5
    2850:	6f 92       	push	r6
    2852:	7f 92       	push	r7
    2854:	8f 92       	push	r8
    2856:	9f 92       	push	r9
    2858:	af 92       	push	r10
    285a:	bf 92       	push	r11
    285c:	cf 92       	push	r12
    285e:	df 92       	push	r13
    2860:	ef 92       	push	r14
    2862:	ff 92       	push	r15
    2864:	0f 93       	push	r16
    2866:	1f 93       	push	r17
    2868:	cf 93       	push	r28
    286a:	df 93       	push	r29
    286c:	cd b7       	in	r28, 0x3d	; 61
    286e:	de b7       	in	r29, 0x3e	; 62
    2870:	ca 1b       	sub	r28, r26
    2872:	db 0b       	sbc	r29, r27
    2874:	0f b6       	in	r0, 0x3f	; 63
    2876:	f8 94       	cli
    2878:	de bf       	out	0x3e, r29	; 62
    287a:	0f be       	out	0x3f, r0	; 63
    287c:	cd bf       	out	0x3d, r28	; 61
    287e:	09 94       	ijmp

00002880 <__epilogue_restores__>:
    2880:	2a 88       	ldd	r2, Y+18	; 0x12
    2882:	39 88       	ldd	r3, Y+17	; 0x11
    2884:	48 88       	ldd	r4, Y+16	; 0x10
    2886:	5f 84       	ldd	r5, Y+15	; 0x0f
    2888:	6e 84       	ldd	r6, Y+14	; 0x0e
    288a:	7d 84       	ldd	r7, Y+13	; 0x0d
    288c:	8c 84       	ldd	r8, Y+12	; 0x0c
    288e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2890:	aa 84       	ldd	r10, Y+10	; 0x0a
    2892:	b9 84       	ldd	r11, Y+9	; 0x09
    2894:	c8 84       	ldd	r12, Y+8	; 0x08
    2896:	df 80       	ldd	r13, Y+7	; 0x07
    2898:	ee 80       	ldd	r14, Y+6	; 0x06
    289a:	fd 80       	ldd	r15, Y+5	; 0x05
    289c:	0c 81       	ldd	r16, Y+4	; 0x04
    289e:	1b 81       	ldd	r17, Y+3	; 0x03
    28a0:	aa 81       	ldd	r26, Y+2	; 0x02
    28a2:	b9 81       	ldd	r27, Y+1	; 0x01
    28a4:	ce 0f       	add	r28, r30
    28a6:	d1 1d       	adc	r29, r1
    28a8:	0f b6       	in	r0, 0x3f	; 63
    28aa:	f8 94       	cli
    28ac:	de bf       	out	0x3e, r29	; 62
    28ae:	0f be       	out	0x3f, r0	; 63
    28b0:	cd bf       	out	0x3d, r28	; 61
    28b2:	ed 01       	movw	r28, r26
    28b4:	08 95       	ret

000028b6 <_exit>:
    28b6:	f8 94       	cli

000028b8 <__stop_program>:
    28b8:	ff cf       	rjmp	.-2      	; 0x28b8 <__stop_program>
